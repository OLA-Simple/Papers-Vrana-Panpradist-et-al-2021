{"config":{"title":"OLA Simple Workflow","description":"Aquarium workflow enabling rapid HIV drug resistance detection using the OLA simple technique.","copyright":"","version":"2.0.00","authors":null,"maintainer":{"name":"Abe Miller/Nuttada Panpradist","email":"abraham.r.m@gmail.com/nuttadap@uw.edu"},"acknowledgements":null,"github":{"user":"gamemackerel","repo":"OLASimple-Protocols","organization":"OLA-Simple"},"keywords":null,"aquadoc_version":"1.0.2","aquarium_version":"\u003c%= Bioturk::Application.config.aquarium_version %\u003e"},"components":[{"sample_types":[],"object_types":[],"operation_type":{"name":"Fluorescence Analysis","category":"Misc.","deployed":false,"on_the_fly":false,"field_types":[],"protocol":"# frozen_string_literal: true\n\n# This is a default, one-size-fits all protocol that shows how you can\n# access the inputs and outputs of the operations associated with a job.\n# Add specific instructions for this protocol!\nneeds 'OLASimple/NetworkRequests'\nclass Protocol\n  include NetworkRequests\n  API_URL = 'http://ola_image_processing:5000/api/classifyfluorescence'\n  def main\n    operations.each do |op|\n      image_results = nil\n      5.times.each do |_i|\n        break if image_results\n\n        upload = accept_file\n\n        image_results = make_calls(upload)\n      end\n\n      if image_results.nil?\n        op.error(:image_result_failed, 'Image processing has failed. Check that the OLA IP service is running and connected correctly, and that the file is in a normal image format.')\n        raise 'Image processing has failed. Check that the OLA IP service is running and connected correctly, and that the file is in a normal image format.'\n      end\n\n      result_table = [['tube #', 'viral', 'r', 'g', 'b']]\n      tubes = image_results[0].size\n      tubes.times do |i|\n        rgb = image_results[0][i]\n        classification = image_results[1][i]\n        result_table \u003c\u003c [i.to_s, classification, *rgb]\n      end\n\n      show do\n        title 'Image analyzed'\n        note 'Results:'\n        table result_table\n      end\n    end\n    {}\n  end\n\n  def make_calls(image_upload)\n    res = post_file(API_URL, 'file', image_upload)\n    JSON.parse(res.body)['results']\n  end\n\n  def accept_file\n    result = show do\n      title 'Upload file for analysis'\n      upload var: :files\n    end\n    upload_hashes = result[:files] || []\n    uhash = upload_hashes.first\n    Upload.find(uhash[:id])\n  end\nend\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[],"object_types":[],"operation_type":{"name":"Pipette Training","category":"Misc.","deployed":false,"on_the_fly":false,"field_types":[],"protocol":"class Protocol\n\ndef main\n    \n    show do\n      title \"Gather Materials\"\n      check \"Four 14 mL test tubes\"\n      check \"Four different colors of food coloring\"\n      check \"Five 1.5 mL tubes\"\n    end\n\n    show do\n      title \"Exercise Preparation\"\n      note \"Fill each test tube about 2/3 full with sink water.\"\n      note \"To each test tube add one drop of a different color of food coloring.\"\n      warning \"Make sure the blue and purple drops are very small because the color is dark.\"\n      note \"Label tubes as I, II, III, and IV.\"\n      note \"Put test tubes in a test tube rack and set aside.\"\n    end\n    \n    show do\n      title \"Large Volume Exercise\"\n      note \"Take out five 1.5 mL tubes and label them A - E. Put tubes C - D off to the side.\"\n      note \"Using the 1 mL pipette, add solution I to the tubes: 100 uL to A and 150 uL to B.\"\n      note \"Using the same pipette but a fresh tip, add solution II to the tubes: 200 uL to A and 250 uL to B.\"\n      note \"Using the same pipette but a fresh tip, add solution III to the tubes: 150 uL to A and 350 uL to B.\"\n      note \"Using the same pipette but a fresh tip, and solution IV to the tubes: 550 uL to A and 250 uL to B.\"\n      check \"Each tube should now have 1 mL (total volume) in it, so, to check the error from pipetting, set the 1 mL pipette to 1000 uL and draw up as much liquid as possible from each tube.\"\n    end\n    \n    calculate_error()\n    \n    show do\n      title \"Discard Tubes\"\n      check \"Throw out tubes A and B\"\n    end\n    \n    show do \n      title \"Small Volume Exercise\"\n    \n      note \"Take out tubes C - E, and the 10 uL pipette and pipette tip box.\"\n      note \"Add solution I to the tubes: 4 uL in in C, 4 uL in D, and 4 uL in E.\"\n      note \"Using the same pipette but a new tip, add solution II to the tubes: 5 uL to C, 5 uL to D, and 4 uL to E.\"\n      note \"Using the same pipette but a new tip, add solution III to the tuebs: 1 uL to C, and 1 uL to E.\"\n      note \"Using the same pipette but a new tip, add solution IV to the tubes: 1 uL to D and 1 uL to E.\"\n      note \"Each tube should now have 10 uL (total volume) in it, so to check the error from pipetting, set the 10 uL pipette to 10 uL and draw up as much liquid as possible from each tube.\"\n    end\n    \n    calculate_error()\n    \n    show do\n      title \"Discard Tubes\"\n      check \"Throw out tubes C, D, and E\"\n    end\n    \n    return {}\n\n  end\n  \n  \n  def calculate_error\n    choice = show do\n      title \"Calculate Measurement Error\"\n      bullet \"If there is still liquid left in the tube, too much was added.\"\n      bullet \"If there is air at the end of the tip, too little was added.\"\n      bullet \"If the tube is filled exactly with liquid, the measurement error is 0.\"\n      \n      select [\"Too much\", \"Too little\", \"Just right\"], var: \"choice\", label: \"How much liquid did you add?\", default: [0,1,2].sample\n    end.get_response(\"choice\")\n      \n    if choice == \"Too much\"\n      show do\n        title \"Calculate Measurement Error\"\n        note \"To determine the error if too much was added, follow thise steps:\"\n        check \"Discard the tip with liquid in it and get a fresh tip. \"\n        check \"Carefully pipette up the remaining liquid in the tip, and then rotate the volume dial until the liquid reaches the bottom of the tip.\" \n        note \"The error rate is (new volume / total volume)\"\n      end\n    elsif choice == \"Too little\"\n      show do\n        title \"Calculate Measurement Error\"\n        note \"To determine the error if too little was added, follow thise steps:\"\n        check \"Slowly decrease the volume until the liquid reaches the end of the tip.\"\n        note \"The error rate is ((total volume - new volume) / total volume)\"\n      end\n    else\n      show do\n        title \"Calculate Measurement Error\"\n        note \"If the tube is filled exactly with liquid, the measurement error is 0.\"\n        note \"Try again and mess up more so that you can practice calculating measurement error!\"\n      end\n    end\n  end\nend\n\n\n\n","precondition":"def precondition(_op)\n  true\nend","cost_model":"def cost(_op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"sample_types":[{"id":1,"name":"OLASimple Sample","description":"Patient sample and OLA kit","created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","field_types":[{"id":1,"parent_id":1,"name":"Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Secondary Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":3,"name":"OLA PCR","description":"OLA PCR","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","unit":"OLASimple Sample","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":"OLASimple Sample"},{"id":4,"name":"OLA Ligation Stripwell","description":"OLA Ligation Stripwell","min":0,"max":1,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","unit":"Well","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":null,"prefix":"","rows":1,"columns":12,"sample_type_name":null}],"operation_type":{"name":"OLASimple Ligation","category":"OLASimple","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"PCR Product","sample_types":["OLASimple Sample"],"object_types":["OLA PCR"],"part":false,"array":false,"routing":"PP","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"Ligation Product","sample_types":["OLASimple Sample"],"object_types":["OLA Ligation Stripwell"],"part":false,"array":false,"routing":"PP","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\n\n##########################################\n#\n#\n# OLASimple Ligation\n# author: Justin Vrana\n# date: March 2018\n#\n#\n##########################################\n\nneeds 'OLASimple/OLAConstants'\nneeds 'OLASimple/OLALib'\nneeds 'OLASimple/OLAGraphics'\nneeds 'OLASimple/JobComments'\nneeds 'OLASimple/OLAKitIDs'\n\nclass Protocol\n  include OLALib\n  include OLAGraphics\n  include OLAConstants\n  include JobComments\n  include OLAKitIDs\n\n  ##########################################\n  # INPUT/OUTPUT\n  ##########################################\n  INPUT = 'PCR Product'\n  OUTPUT = 'Ligation Product'\n  PACK = 'Ligation Pack'\n  A = 'Diluent A'\n\n  ##########################################\n  # TERMINOLOGY\n  ##########################################\n\n  ##########################################\n  # Protocol Specifics\n  ##########################################\n\n  AREA = POST_PCR\n\n  # for debugging\n  PREV_COMPONENT = '2'\n  PREV_UNIT = 'A'\n\n  CENTRIFUGE_TIME = '5 seconds' # time to pulse centrifuge to pull down dried powder\n  VORTEX_TIME = '5 seconds' # time to pulse vortex to mix\n  TUBE_CAP_WARNING = 'Check to make sure tube caps are completely closed.'\n\n  PACK_HASH = LIGATION_UNIT\n\n  LIGATION_VOLUME = PACK_HASH['Ligation Mix Rehydration Volume'] # volume to rehydrate ligation mix\n  SAMPLE_VOLUME = PACK_HASH['PCR to Ligation Mix Volume'] # volume of pcr product to ligation mix\n  MATERIALS = [\n    'gloves (wear tight gloves to reduce contamination risk)',\n    'P200 pipette and filtered tips',\n    'P2 pipette and filtered tips',\n    'a spray bottle of 10% v/v bleach',\n    'a spray bottle of 70% v/v ethanol',\n    'balancing tube (on rack)',\n    'centrifuge',\n    'vortex mixer'\n  ].freeze\n  COMPONENTS = PACK_HASH['Components']['sample tubes']\n\n  ##########################################\n  # ##\n  # Input Restrictions:\n  # Input needs a kit, unit, components,\n  # and sample data associations to work properly\n  ##########################################\n\n  def main\n    operations.running.retrieve interactive: false\n    save_user operations\n    debug_setup(operations) if debug\n    save_temporary_input_values(operations, INPUT)\n    # save_pack_hash(operations, PACK)\n    operations.each do |op|\n      op.temporary[:pack_hash] = PACK_HASH\n    end\n    save_temporary_output_values(operations)\n    run_checks operations\n\n    expert_mode = true\n\n    introduction(operations.running)\n    record_technician_id\n    safety_warning\n    area_preparation(POST_PCR, MATERIALS, PRE_PCR)\n    simple_clean(\"OLASimple Ligation\")\n\n    get_samples_from_thermocycler(operations.running)\n    validate_ligation_inputs(operations.running)\n\n    get_ligation_packages(operations.running)\n    validate_ligation_packages(operations.running)\n    open_ligation_packages(operations.running)\n    # check_for_tube_defects operations.running\n    centrifuge_samples(sorted_ops.running)\n    rehydrate_ligation_mix(sorted_ops.running, expert_mode)\n    vortex_and_centrifuge_samples(sorted_ops.running)\n    add_template(sorted_ops.running, expert_mode)\n    vortex_and_centrifuge_samples(sorted_ops.running)\n    cleanup(sorted_ops)\n    start_ligation(sorted_ops.running)\n    wash_self\n    accept_comments\n    conclusion(sorted_ops)\n    {}\n  end\n\n  def sorted_ops\n    operations.sort_by { |op| op.output_ref(OUTPUT) }.extend(OperationList)\n  end\n\n  def save_user(ops)\n    ops.each do |op|\n      username = get_technician_name(jid)\n      op.associate(:technician, username)\n    end\n  end\n\n  def debug_setup(ops)\n    # make an alias for the inputs\n    if debug\n      ops.each_with_index do |op, i|\n        kit_num = 'K001'\n        sample_num = sample_num_to_id(i + 1)\n        make_alias(op.input(INPUT).item, kit_num, PREV_UNIT, PREV_COMPONENT, 'a patient id', sample_num)\n      end\n    end\n  end\n\n  def run_checks(_myops)\n    if operations.running.empty?\n      show do\n        title 'All operations have errored'\n        note \"Contact #{SUPERVISOR}\"\n        operations.each do |op|\n          note (op.errors.map { |k, v| [k, v] }).to_s\n        end\n      end\n      {}\n    end\n  end\n\n  def ask_if_expert\n    resp = show do\n      title 'Expert Mode?'\n      note 'Are you an expert at this protocol? If you do not know what this means, then continue without enabling expert mode.'\n      select ['Continue in normal mode', 'Enable expert mode'], var: :choice, label: 'Expert Mode?', default: 0\n    end\n    resp[:choice] == 'Enable expert mode'\n  end\n\n  def introduction(_ops)\n    show do\n      title 'Welcome to OLASimple Ligation'\n      note 'You will be running the OLASimple Ligation protocol'\n      note 'In this protocol you will be using PCR samples from the PCR protocol' \\\n      ' and adding small pieces of DNA which will allow you to detect HIV mutations.'\n    end\n  end\n\n  def get_ligation_packages(myops)\n    gops = myops.group_by { |op| op.temporary[:output_kit_and_unit] }\n    show do\n      title \"Take #{LIG_PKG_NAME.pluralize(gops.length)} from the R1 #{FRIDGE_POST} \"\n      gops.each do |unit, _ops|\n        check \"Retrieve #{PACKAGE_POST} #{unit.bold}\"\n      end\n      check \"Place #{pluralizer(PACKAGE_POST, gops.length)} on the #{BENCH_POST}.\"\n    end\n  end\n\n  def validate_ligation_packages(myops)\n    group_packages(myops).each { |unit, _ops| package_validation_with_multiple_tries(unit) }\n  end\n\n  def open_ligation_packages(_myops)\n    grouped_by_unit = operations.running.group_by { |op| op.temporary[:output_kit_and_unit] }\n    grouped_by_unit.each do |kit_and_unit, ops|\n      ops.each do |op|\n        op.make_collection_and_alias(OUTPUT, 'sample tubes', INPUT)\n      end\n\n      ops.each do |op|\n        op.temporary[:label_string] = \"#{op.output_refs(OUTPUT)[0]} through #{op.output_refs(OUTPUT)[-1]}\"\n      end\n\n      ##################################\n      # get output collection references\n      #################################\n\n      show_open_package(kit_and_unit, '', ops.first.temporary[:pack_hash][NUM_SUB_PACKAGES_FIELD_VALUE]) do\n        tube = make_tube(closedtube, '', ops.first.tube_label('diluent A'), 'medium')\n        num_samples = ops.first.temporary[:pack_hash][NUM_SAMPLES_FIELD_VALUE]\n        grid = SVGGrid.new(1, num_samples, 0, 100)\n        tokens = ops.first.output_tokens(OUTPUT)\n        ops.each_with_index do |op, i|\n          _tokens = tokens.dup\n          _tokens[-1] = op.temporary[:input_sample]\n          ligation_tubes = display_ligation_tubes(*_tokens, COLORS)\n          stripwell = ligation_tubes.g\n          grid.add(stripwell, 0, i)\n        end\n        grid.align_with(tube, 'center-right')\n        grid.align!('center-left')\n        img = SVGElement.new(children: [tube, grid], boundx: 1000, boundy: 300).translate!(30, -50)\n        note 'Check that the following tubes are in the pack:'\n        # check \"a 1.5mL tube of #{DILUENT_A} labeled #{ops.first.ref(\"diluent A\")}\"\n        # ops.each do |op|\n        #   check \"a strip of colored tubes labeled #{op.temporary[:label_string].bold}\"\n        # end\n        note display_svg(img, 0.75)\n      end\n\n      show do\n        title 'Place strips of tubes into a rack'\n        check \"Take #{pluralizer('tube strip', ops.length)} and place them in the plastic racks\"\n      end\n    end\n  end\n\n  def centrifuge_samples(ops)\n    labels = ops.map { |op| op.temporary[:label_string] }\n    diluentALabels = ops.map { |op| op.ref('diluent A') }.uniq\n    show do\n      title 'Centrifuge Diluent A and Ligation tubes for 5 seconds to pull down reagents'\n      note 'Put the tag side of the rack toward the center of the centrifuge'\n      check \"Centrifuge #{(labels + diluentALabels).to_sentence.bold} for 5 seconds.\"\n    end\n    # centrifuge_helper(\"tube set\", labels, CENTRIFUGE_TIME,\n    #                   \"to pull down dried powder.\",\n    #                   \"There may be dried powder on the inside of the tube #{\"lid\".pluralize(labels.length)}.\")\n    # centrifuge_helper(\"tube\", diluentALabels, CENTRIFUGE_TIME,\n    #                   \"to pull down liquid.\")\n  end\n\n  def vortex_and_centrifuge_samples(ops)\n    labels = ops.map { |op| op.temporary[:label_string] }\n    vortex_and_centrifuge_helper('tube set', labels, CENTRIFUGE_TIME, VORTEX_TIME,\n                                 'to mix.', 'to pull down the fluid.', AREA)\n    show do\n      title 'Check your tubes.'\n      note 'Dried powder of reagents should be dissolved at this point. '\n      check 'Look on the side of the tubes to check if you see any remaining powder. If you notice any powder remains on the side, rotate the tubes while vortexing for 5 seconds and centrifuge for 5 seconds.'\n    end\n  end\n\n  def get_samples_from_thermocycler(myops)\n    show do\n      title \"Retrieve PCR samples from the #{THERMOCYCLER}\"\n      check \"Take #{PCR_SAMPLE.pluralize(myops.length)} #{myops.map { |op| ref(op.input(INPUT).item).bold }.join(', ')} from the #{THERMOCYCLER}\"\n      note 'If thermocycler run is complete (infinite hold at 4C), hit cancel followed by yes. '\n      check \"Position #{PCR_SAMPLE.pluralize(myops.length)} on #{BENCH_POST} in front of you.\"\n      centrifuge_proc(PCR_SAMPLE, myops.map { |op| ref(op.input(INPUT).item) }, '3 seconds', 'to pull down liquid.', AREA, balance = false)\n    end\n  end\n\n  def validate_ligation_inputs(myops)\n    expected_inputs = myops.map { |op| ref(op.input(INPUT).item) }\n    sample_validation_with_multiple_tries(expected_inputs)\n  end\n\n  def rehydrate_ligation_mix(myops, expert_mode)\n    gops = myops.group_by { |op| op.temporary[:input_kit_and_unit] }\n    gops.each do |_unit, ops|\n      ops.each do |op|\n        labels = op.output_refs(OUTPUT)\n        if expert_mode\n          # All transfers at once...\n          from = op.ref('diluent A')\n          tubeA = make_tube(opentube, [DILUENT_A, from], op.tube_label('diluent A'), 'medium')\n          show do\n            title \"Add #{DILUENT_A} #{from} to #{LIGATION_SAMPLE}s #{op.temporary[:label_string].bold}\"\n            labels.map! { |l| \"\u003cb\u003e#{l}\u003c/b\u003e\" }\n            note \"In this step we will be adding #{LIGATION_VOLUME}uL of #{DILUENT_A} #{from} into #{pluralizer('tube', COMPONENTS.length)} \"\n            \"of the colored strip of tubes labeled \u003cb\u003e#{labels[0]} to #{labels[-1]}\u003c/b\u003e\"\n            note \"Set a #{P200_POST} pipette to [0 2 4].\"\n            note \"Using #{P200_POST} add #{LIGATION_VOLUME}uL from #{DILUENT_A} #{from} into each of the #{COMPONENTS.length} tubes.\"\n            warning 'Only open one of the ligation tubes at a time.'\n\n            ligation_tubes = display_ligation_tubes(*op.output_tokens(OUTPUT), COLORS).translate!(0, -20)\n\n            transfer_image = make_transfer(tubeA, ligation_tubes, 300, \"#{LIGATION_VOLUME}uL\", \"(#{P200_POST} pipette)\")\n            note display_svg(transfer_image, 0.6)\n\n            labels.each do |l|\n              check \"Transfer #{LIGATION_VOLUME}uL from #{from.bold} into #{l}\"\n            end\n\n            # t = Table.new\n            # t.add_column(\"Tube\", labels)\n            # t.add_column(\"Color\", COMPONENTS_COLOR_CODE)\n            # table t\n          end\n        else\n          # each transfer\n          from = op.ref('diluent A')\n          ligation_tubes = display_ligation_tubes(*op.output_tokens(OUTPUT), COLORS)\n          ligation_tubes.align!('bottom-left')\n          ligation_tubes.align_with(tube, 'bottom-right')\n          ligation_tubes.translate!(50)\n          tubeA = make_tube(closedtube, DILUENT_A, op.tube_label('diluent A'), 'medium')\n          image = SVGElement.new(children: [tubeA, ligation_tubes], boundx: 1000, boundy: tube.boundy)\n          image.translate!(50, -50)\n          show do\n            title \"Position #{DILUENT_A} #{from.bold} and colored tubes #{op.temporary[:label_string].bold} in front of you.\"\n            note \"In the next steps you will dissolve the powder in #{pluralizer('tube', COMPONENTS.length)} using #{DILUENT_A}\"\n            note display_svg(image, 0.75)\n          end\n          ligation_tubes_svg = display_ligation_tubes(*op.output_tokens(OUTPUT), COLORS).translate!(0, -20)\n          img = display_svg(ligation_tubes_svg, 0.7)\n          # centrifuge_helper(LIGATION_SAMPLE, op.temporary[:labels], CENTRIFUGE_TIME, \"to pull down dried powder.\", img)\n\n          labels.each.with_index do |label, i|\n            show do\n              raw transfer_title_proc(LIGATION_VOLUME, from, label)\n              # title \"Add #{LIGATION_VOLUME}uL #{DILUENT_A} #{from.bold} to #{LIGATION_SAMPLE} #{label}\n              warning 'Change pipette tip between tubes'\n              note \"Set a #{P200_POST} pipette to [0 2 4].\"\n              check \"Add #{LIGATION_VOLUME}uL from #{from.bold} into tube #{label.bold}\"\n              note \"Close tube #{label.bold}\"\n              tubeA = make_tube(opentube, [DILUENT_A, from], '', 'medium')\n              transfer_image = transfer_to_ligation_tubes_with_highlight(\n                tubeA, i, *op.output_tokens(OUTPUT), COLORS, LIGATION_VOLUME, \"(#{P200_POST} pipette)\"\n              )\n              note display_svg(transfer_image, 0.6)\n            end\n          end\n        end\n        # vortex_and_centrifuge_helper(LIGATION_SAMPLE,\n        #                              op.temporary[:labels],\n        #                              VORTEX_TIME,\n        #                              CENTRIFUGE_TIME,\n        #                              \"to mix well.\",\n        #                              \"to pull down liquid.\",\n        #                              img)\n\n        # show do\n        #   title \"Mix ligation tubes #{op.temporary[:labels][0]} through #{op.temporary[:labels][-1]}\"\n        #   note display_svg(display_ligation_tubes(op.temporary[:input_kit], THIS_UNIT, COMPONENTS, op.temporary[:input_sample]), 0.5)\n        #   warning \"Make sure tubes are firmly closed before proceeding.\"\n        #   check \"Vortex #{pluralizer(\"tube\", COMPONENTS.length)} for 5 seconds to mix well.\"\n        #   warning \"Make sure all powder is dissolved. Vortex for 10 more seconds to dissolve powder.\"\n        #   check \"Centrifuge #{pluralizer(\"tube\", COMPONENTS.length)} for 5 seconds to pull down liquid.\"\n        #   check \"Place tubes back into the rack.\"\n        # end\n      end\n    end\n\n    # vortex_and_centrifuge_helper(\"tube set\",\n    #                              myops.map { |op| op.temporary[:label_string] },\n    #                              VORTEX_TIME,\n    #                              CENTRIFUGE_TIME,\n    #                              \"to mix well.\",\n    #                              \"to pull down liquid.\")\n  end\n\n  def add_template(myops, expert_mode)\n    gops = myops.group_by { |op| op.temporary[:input_kit_and_unit] }\n    gops.each do |_unit, ops|\n      ops.each do |op|\n        from = op.input_ref(INPUT)\n        labels = op.output_refs(OUTPUT)\n        to_strip_name = \"#{op.temporary[:output_unit]}-#{op.temporary[:output_sample]}\"\n        tubeP = make_tube(opentube, ['PCR Sample'], op.input_tube_label(INPUT), 'small').scale(0.75)\n        ligation_tubes = display_ligation_tubes(*op.output_tokens(OUTPUT), COLORS).translate!(0, -20)\n        pre_transfer_validation_with_multiple_tries(from, to_strip_name, tubeP, ligation_tubes)\n        if expert_mode\n          # All transfers at once...\n          show do\n            raw transfer_title_proc(SAMPLE_VOLUME, from, op.temporary[:label_string])\n            warning 'Change pipette tip between tubes'\n            check \"Using a P2 pipette set to [1 2 0].\"\n            note \"Add #{SAMPLE_VOLUME}uL from #{from.bold} into each of #{op.temporary[:label_string].bold}. Only open one ligation tube at a time.\"\n\n            transfer_image = make_transfer(tubeP, ligation_tubes, 300, \"#{SAMPLE_VOLUME}uL\", \"(Post-PCR P2 pipette)\")\n            note display_svg(transfer_image, 0.6)\n            labels.each do |l|\n              check \"Transfer #{SAMPLE_VOLUME}uL from #{from.bold} into #{l}\"\n            end\n          end\n        else\n          show do\n            title \"Position #{PCR_SAMPLE} #{from.bold} and #{LIGATION_SAMPLE.pluralize(COMPONENTS.length)} #{op.temporary[:label_string].bold} in front of you.\"\n            note \"In the next steps you will add #{PCR_SAMPLE} to #{pluralizer('tube', COMPONENTS.length)}\"\n            tube = make_tube(closedtube, [PCR_SAMPLE, from], '', 'small')\n            ligation_tubes = display_ligation_tubes(*op.output_tokens(OUTPUT), COLORS)\n            ligation_tubes.align!('bottom-left')\n            ligation_tubes.align_with(tube, 'bottom-right')\n            ligation_tubes.translate!(50)\n            image = SVGElement.new(children: [tube, ligation_tubes], boundx: 1000, boundy: tube.boundy)\n            image.translate!(50, -30)\n            note display_svg(image, 0.75)\n          end\n          labels.each.with_index do |label, i|\n            show do\n              raw transfer_title_proc(SAMPLE_VOLUME, from, label)\n              # title \"Add #{PCR_SAMPLE} #{from.bold} to #{LIGATION_SAMPLE} #{label}\"\n              warning 'Change of pipette tip between tubes'\n              check \"Using a P2 pipette set to [1 2 0], add #{SAMPLE_VOLUME}uL from #{from.bold} into tube #{label.bold}\"\n              note \"Close tube #{label.bold}\"\n              tube = make_tube(opentube, ['PCR Sample'], op.input_tube_label(INPUT), 'small').scale(0.75)\n              img = transfer_to_ligation_tubes_with_highlight(tube, i, *op.output_tokens(OUTPUT), COLORS, SAMPLE_VOLUME, \"(Post-PCR P2 pipette)\")\n              note display_svg(img, 0.6)\n            end\n          end\n        end\n\n        # ligation_tubes_svg = display_ligation_tubes(*op.output_tokens(OUTPUT), COLORS)\n        # img = display_svg(ligation_tubes_svg, 0.7)\n        # vortex_and_centrifuge_helper(LIGATION_SAMPLE,\n        #                              op.output_refs(OUTPUT),\n        #                              VORTEX_TIME,\n        #                              CENTRIFUGE_TIME,\n        #                              \"to mix well.\",\n        #                              \"to pull down liquid.\",\n        #                              img)\n      end\n    end\n  end\n\n  def start_ligation(myops)\n    gops = myops.group_by { |op| op.temporary[:input_kit_and_unit] }\n    ops = gops.map { |_unit, ops| ops }.flatten # organize by unit\n    # show do\n    #   title \"Place #{LIGATION_SAMPLE.pluralize(COMPONENTS.length)} into #{THERMOCYCLER}\"\n    #   check \"Place #{pluralizer(LIGATION_SAMPLE, ops.length * COMPONENTS.length)} (#{ops.length} #{\"set\".pluralize(ops.length)} of #{COMPONENTS.length})\" \\\n    #     \" in the #{THERMOCYCLER}\"\n    #   check \"Close and tighten the lid.\"\n    #   ops.each do |op|\n    #     note display_svg(display_ligation_tubes(*op.output_tokens(OUTPUT), COLORS), 0.5)\n    #   end\n    # end\n\n    add_to_thermocycler('sample', ops.length * COMPONENTS.length, LIG_CYCLE, ligation_cycle_table, 'Ligation')\n\n    show do\n      title 'Set a timer for 45 minutes'\n      #   check \"Return to the #{PRE_PCR}.\"\n      check 'Find a timer and set it for 45 minutes. Continue to next step.'\n    end\n  end\n\n  def ligation_cycle_table\n    t = Table.new\n    cycles_temp = \"\u003ctable style=\\\"width:100%\\\"\u003e\n                        \u003ctr\u003e\u003ctd\u003e95C\u003c/td\u003e\u003c/tr\u003e\n                        \u003ctr\u003e\u003ctd\u003e37C\u003c/td\u003e\u003c/tr\u003e\n          \u003c/table\u003e\"\n    cycles_time = \"\u003ctable style=\\\"width:100%\\\"\u003e\n                        \u003ctr\u003e\u003ctd\u003e30 sec\u003c/td\u003e\u003c/tr\u003e\n                        \u003ctr\u003e\u003ctd\u003e4 min\u003c/td\u003e\u003c/tr\u003e\n          \u003c/table\u003e\"\n    # t.add_column(\"STEP\", [\"Initial Melt\", \"10 cycles of\", \"Hold\"])\n    t.add_column('TEMP', ['95C', cycles_temp, '4C'])\n    t.add_column('TIME', ['4 min', cycles_time, 'forever'])\n    t\n  end\n\n  def cleanup(myops)\n    items = [INPUT].map { |x| myops.map { |op| op.input(x) } }.flatten.uniq\n    item_refs = [INPUT].map { |x| myops.map { |op| op.input_ref(x) } }.flatten.uniq\n    item_refs = [] if KIT_NAME == 'uw kit'\n    temp_items = ['diluent A'].map { |x| myops.map { |op| op.ref(x) } }.flatten.uniq\n\n    all_refs = temp_items + item_refs\n\n    show do\n      title \"Discard items into the #{WASTE_POST}\"\n\n      note \"Discard the following items into the #{WASTE_POST} in the #{AREA}\"\n      all_refs.each { |r| bullet r }\n    end\n    # clean_area AREA\n  end\n\n  def conclusion(myops)\n    if KIT_NAME == 'uw kit'\n      show do\n        title 'Please return PCR products'\n        check \"Place #{'sample'.pluralize(myops.length)} #{myops.map { |op| op.input_ref(INPUT) }.join(', ')} in the -20.\"\n        image 'Actions/OLA/map_Klavins.svg '\n      end\n    end\n    show do\n      title 'Thank you!'\n      note \"The #{THERMOCYCLER} will be done in 50 minutes.\"\n    end\n  end\nend\n","precondition":"eval Library.find_by_name(\"OLAScheduling\").code(\"source\").content\nextend OLAScheduling\n\ndef precondition(op)\n  schedule_same_kit_ops(op)\n  true\nend","cost_model":"def cost(op)\n  { labor: 7.5, materials: 0 }\nend","documentation":"Add small pieces of DNA to the PCR product from OLASimple PCR that allow detection of HIV mutations.","test":"","timing":null}},{"sample_types":[{"id":1,"name":"OLASimple Sample","description":"Patient sample and OLA kit","created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","field_types":[{"id":1,"parent_id":1,"name":"Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Secondary Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":5,"name":"OLA viral RNA","description":"RNA extracted from patient plasma","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","unit":"OLASimple Sample","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":"OLASimple Sample"},{"id":3,"name":"OLA PCR","description":"OLA PCR","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","unit":"OLASimple Sample","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":"OLASimple Sample"}],"operation_type":{"name":"OLASimple PCR","category":"OLASimple","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Patient Sample","sample_types":["OLASimple Sample"],"object_types":["OLA viral RNA"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"PCR Product","sample_types":["OLASimple Sample"],"object_types":["OLA PCR"],"part":false,"array":false,"routing":"P","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\n\n##########################################\n#\n#\n# OLASimple PCR\n# author: Justin Vrana\n# date: March 2018\n#\n#\n##########################################\n\nneeds 'OLASimple/OLAConstants'\nneeds 'OLASimple/OLALib'\nneeds 'OLASimple/OLAGraphics'\nneeds 'OLASimple/JobComments'\nneeds 'OLASimple/OLAKitIDs'\n\n# TODO: There should be NO calculations in the show blocks\n\nclass Protocol\n  include OLAConstants\n  include OLALib\n  include OLAGraphics\n  include JobComments\n  include OLAKitIDs\n\n  ##########################################\n  # INPUT/OUTPUT\n  ##########################################\n  INPUT = 'Patient Sample'\n  OUTPUT = 'PCR Product'\n  PACK = 'PCR Pack'\n  A = 'Diluent A'\n\n  ##########################################\n  # TERMINOLOGY\n  ##########################################\n\n  ##########################################\n  # Protocol Specifics\n  ##########################################\n\n  PACK_HASH = PCR_UNIT\n  AREA = PRE_PCR\n  SAMPLE_VOLUME = 10 # volume of sample to add to PCR mix\n  PCR_MIX_VOLUME = PACK_HASH['PCR Rehydration Volume'] # volume of water to rehydrate PCR mix in\n  CENTRIFUGE_TIME = '5 seconds' # time to pulse centrifuge to pull down dried powder\n  VORTEX_TIME = '5 seconds' # time to pulse vortex to mix\n\n  # for debugging\n  PREV_COMPONENT = '6'\n  PREV_UNIT = 'E'\n\n  TUBE_CAP_WARNING = 'Check to make sure tube caps are completely closed.'\n\n  component_to_name_hash = {\n    'diluent A' =\u003e 'Diluent A',\n    'sample tube' =\u003e 'PCR tube'\n  }\n\n  MATERIALS = [\n    'P200 pipette and filtered tips',\n    'P20 pipette and filtered tips',\n    'a timer',\n    'gloves (wear tight gloves to reduce contamination risk)',\n    'pre-PCR rack',\n    'a balancing tube (on rack)',\n    'vortex',\n    'centrifuge'\n  ].freeze\n\n  SAMPLE_ALIAS = 'RNA Extract'\n\n  ##########################################\n  # ##\n  # Input Restrictions:\n  # Input needs a kit, unit, components,\n  # and sample data associations to work properly\n  ##########################################\n\n  def main\n    operations.running.retrieve interactive: false\n    operations.running.make\n    save_user operations\n\n    if debug\n      labels = %w[001 002]\n      kit_num = 'K001'\n      operations.each.with_index do |op, i|\n        op.input(INPUT).item.associate(SAMPLE_KEY, labels[i])\n        op.input(INPUT).item.associate(COMPONENT_KEY, PREV_COMPONENT)\n        op.input(INPUT).item.associate(KIT_KEY, kit_num)\n        op.input(INPUT).item.associate(UNIT_KEY, PREV_UNIT)\n        op.input(INPUT).item.associate(PATIENT_KEY, \"A PATIENT ID\")        \n      end\n    end\n\n    save_temporary_input_values(operations, INPUT)\n    operations.each do |op|\n      op.temporary[:pack_hash] = PACK_HASH\n    end\n    save_temporary_output_values(operations)\n\n    run_checks(operations)\n    kit_introduction(operations.running)\n    record_technician_id\n    safety_warning\n    area_preparation('pre-PCR', MATERIALS, POST_PCR)\n    simple_clean(\"OLASimple PCR\")\n    get_inputs(operations.running)\n    validate_pcr_inputs(operations.running)\n    get_pcr_packages(operations.running)\n    validate_pcr_packages(operations.running)\n    open_pcr_packages(operations.running)\n    # debug_table(operations.running)\n    # check_for_tube_defects sorted_ops.running\n    # nuttada thaw\n    # nuttada needs vortex + centrigure\n    centrifuge_samples(sorted_ops.running)\n    resuspend_pcr_mix(sorted_ops.running)\n    add_template_to_master_mix(sorted_ops.running)\n  \n    cleanup(sorted_ops)\n    start_thermocycler(sorted_ops.running)\n    wash_self\n    accept_comments\n    conclusion(sorted_ops)\n    {}\n  end # main\n\n  # end of main\n\n  #######################################\n  # Utilities\n  #######################################\n  def save_user(ops)\n    ops.each do |op|\n      username = get_technician_name(jid)\n      op.associate(:technician, username)\n    end\n  end\n\n  def run_checks(_myops)\n    if operations.running.empty?\n      show do\n        title 'All operations have errored'\n        note \"Contact #{SUPERVISOR}\"\n        operations.each do |op|\n          note (op.errors.map { |k, v| [k, v] }).to_s\n        end\n      end\n      {}\n    end\n  end\n\n  def sorted_ops\n    operations.sort_by { |op| op.output_ref(OUTPUT) }.extend(OperationList)\n  end\n\n  #######################################\n  # Instructions\n  #######################################\n\n  def kit_introduction(ops)\n    show do\n      title \"Welcome to OLASimple PCR\"\n      note 'You will be running the OLASimple PCR protocol. You will start with RNA Extraction products and will generate PCR products from the samples and use them later to detect HIV mutations.'\n    end\n  end\n\n  def get_inputs(myops)\n    gops = group_packages(myops)\n\n    show do\n      title \"Place #{SAMPLE_ALIAS.bold} samples in #{AREA.bold}.\"\n      note \"Retrieve from cold rack and place the following #{SAMPLE_ALIAS.bold} samples into a rack in the #{AREA.bold} area.\"\n      note 'Samples may also be in the -20 freezer if this protocol has been delayed.'\n      tubes = []\n      gops.each do |unit, ops|\n        ops.each_with_index do |op, i|\n          tubes \u003c\u003c make_tube(closedtube, '', ref(op.input(INPUT).item).split('-'), 'medium', true).translate!(100 * i)\n        end\n        img = SVGElement.new(children: tubes, boundy: 300, boundx: 300).translate!(20)\n        note display_svg(img)\n      end\n    end\n  end\n\n  def validate_pcr_inputs(myops)\n    expected_inputs = myops.map { |op| ref(op.input(INPUT).item) }\n    sample_validation_with_multiple_tries(expected_inputs)\n  end\n\n  def get_pcr_packages(myops)\n    # TODO: remove all references to 4C fridge and replace with refridgerator\n    gops = group_packages(myops)\n    show do\n      title \"Take #{PCR_PKG_NAME.pluralize(gops.length)} from the #{FRIDGE_PRE} and place on the #{BENCH_PRE}\"\n      # check \"Take the following from the #{FRIDGE} and place #{pluralizer(PACKAGE, gops.length)} on the #{BENCH}\"\n      gops.each do |unit, _ops|\n        check 'Take package ' \"#{unit.bold}\" ' from fridge.'\n        check 'Place package ' \"#{unit.bold}\" ' on the bench.'\n      end\n    end\n  end\n\n  def validate_pcr_packages(myops)\n    group_packages(myops).each { |unit, _ops| package_validation_with_multiple_tries(unit) }\n  end\n\n  def open_pcr_packages(myops)\n    grouped_by_unit = myops.group_by { |op| op.temporary[:output_kit_and_unit] }\n    grouped_by_unit.each do |kit_and_unit, ops|\n      ops.each do |op|\n        op.make_item_and_alias(OUTPUT, 'sample tube', INPUT)\n      end\n\n      show_open_package(kit_and_unit, '', ops.first.temporary[:pack_hash][NUM_SUB_PACKAGES_FIELD_VALUE]) do\n        # img\n        pcr_tube_labels = ops.map { |op| op.output_tube_label(OUTPUT) }\n\n        num_samples = ops.first.temporary[:pack_hash][NUM_SAMPLES_FIELD_VALUE]\n        kit, unit, component, sample = ops.first.output_tokens(OUTPUT)\n        # diluentATube = label_tube(closedtube, tube_label(kit, unit, diluentAcomponent, \"\"))\n        diluentATube = make_tube(closedtube, 'Diluent A', ops.first.tube_label('diluent A'), 'medium', true)\n\n        grid = SVGGrid.new(num_samples, 1, 75, 10)\n        pcr_tube_labels.each_with_index do |tube_label, i|\n          pcrtube = make_tube(closedtube, '', tube_label, 'powder', true).scale(0.75)\n          grid.add(pcrtube, i, 0)\n        end\n        grid.boundy = closedtube.boundy * 0.75\n        grid.align_with(diluentATube, 'center-right')\n        grid.align!('center-left')\n        grid.translate!(25, 25)\n        img = SVGElement.new(children: [diluentATube, grid], boundy: diluentATube.boundy + 50, boundx: 300).translate!(20)\n\n        check \"Look for #{num_samples + 1} #{'tube'.pluralize(num_samples)}\"\n        check 'Place tubes on a rack'\n        note display_svg(img, 0.75)\n      end\n    end\n  end\n\n  def debug_table(myops)\n    if debug\n      show do\n        title 'DEBUG: I/O Table'\n\n        table myops.running.start_table\n                   .custom_column(heading: 'Input Kit') { |op| op.temporary[:input_kit] }\n                   .custom_column(heading: 'Output Kit') { |op| op.temporary[:output_kit] }\n                   .custom_column(heading: 'Input Unit') { |op| op.temporary[:input_unit] }\n                   .custom_column(heading: 'Output Unit') { |op| op.temporary[:output_unit] }\n                   .custom_column(heading: 'Diluent A') { |op| op.ref('diluent A') }\n                   .custom_column(heading: 'Input Ref') { |op| op.input_ref(INPUT) }\n                   .custom_column(heading: 'Output Ref') { |op| op.output_ref(OUTPUT) }\n                   .end_table\n      end\n    end\n  end\n\n  def centrifuge_samples(ops)\n    labels = ops.map { |op| ref(op.output(OUTPUT).item) }\n    diluentALabels = ops.map { |op| op.ref('diluent A') }\n    show do\n      title 'Centrifuge all samples for 5 seconds'\n      check 'Place all tubes and samples in the centrifuge, along with a balancing tube. It is important to balance the tubes.'\n      check 'Centrifuge the tubes for 5 seconds to pull down liquid and dried reagents'\n    end\n    # centrifuge_helper(\"sample\", labels, CENTRIFUGE_TIME,\n    #                   \"to pull down dried powder.\",\n    #                   \"There may be dried powder on the inside of the tube #{\"lid\".pluralize(labels.length)}.\")\n    # centrifuge_helper(\"tube\", diluentALabels, CENTRIFUGE_TIME,\n    #                   \"to pull down liquid.\")\n  end\n\n  def resuspend_pcr_mix(myops)\n    gops = group_packages(myops)\n    gops.each do |_unit, ops|\n      from = ops.first.ref('diluent A')\n      tos = ops.map { |op| ref(op.output(OUTPUT).item) }\n      to_tubes = ops.map.with_index do |op, i|\n        to_item = op.output(OUTPUT).item\n        to = ref(to_item)\n        tubeP = make_tube(opentube, [PCR_SAMPLE, to], '', fluid = 'powder').scale!(0.75)\n        tubeP.translate!(120 * i, 0)\n      end\n      tubeA = make_tube(opentube, [DILUENT_A, from], '', fluid = 'medium')\n      tubes_P = SVGElement.new(children: to_tubes, boundx: 200, boundy: 200)\n      img = make_transfer(tubeA, tubes_P, 300, \"#{PCR_MIX_VOLUME}uL\", \"(#{P200_PRE} pipette)\")\n      img.translate!(25)\n      show do\n        raw transfer_title_proc(PCR_MIX_VOLUME, from, tos.to_sentence)\n        # title \"Add #{PCR_MIX_VOLUME}uL from #{DILUENT_A} #{from.bold} to #{PCR_SAMPLE} #{to.bold}\"\n        note \"#{DILUENT_A} will be used to dissolve the PCR mix in the #{PCR_SAMPLE}s.\"\n        note \"Use a #{P200_PRE} pipette and set it to \u003cb\u003e[0 4 0]\u003c/b\u003e.\"\n        note 'Avoid touching the inside of the lid, as this could cause contamination. '\n        tos.each do |to|\n          check \"Transfer #{PCR_MIX_VOLUME}uL from #{from.bold} into #{to.bold}\"\n          note 'Discard pipette tip.'\n        end\n        note display_svg(img, 0.75)\n      end\n      # TODO: add \"make sure tube caps are completely closed\" for any centrifugation or vortexing step.\n      #\n    end\n\n    labels = myops.map { |op| ref(op.output(OUTPUT).item) }\n    vortex_and_centrifuge_helper('tubes',\n                                 labels,\n                                 VORTEX_TIME, CENTRIFUGE_TIME,\n                                 'to mix.', 'to pull down liquid', AREA, mynote = nil)\n  end\n\n  def add_template_to_master_mix(myops)\n    gops = group_packages(myops)\n\n    gops.each do |_unit, ops|\n      samples = ops.map { |op| op.input(INPUT).item }\n      sample_refs = samples.map { |sample| ref(sample) }\n      ops.each do |op|\n        from = ref(op.input(INPUT).item)\n        to = ref(op.output(OUTPUT).item)\n        tubeS = make_tube(opentube, [SAMPLE_ALIAS, from], '', fluid = 'medium')\n        tubeP = make_tube(opentube, [PCR_SAMPLE, to], '', fluid = 'medium').scale!(0.75)\n        tubeS_closed = make_tube(closedtube, [SAMPLE_ALIAS, from], '', fluid = 'medium')\n        tubeP_closed = make_tube(closedtube, [PCR_SAMPLE, to], '', fluid = 'medium').translate!(0,40).scale!(0.75)\n        pre_transfer_validation_with_multiple_tries(from, to, tubeS_closed, tubeP_closed)\n        show do\n          raw transfer_title_proc(SAMPLE_VOLUME, \"#{SAMPLE_ALIAS} #{from}\", \"#{PCR_SAMPLE} #{to}\")\n          note \"Carefully open tube #{from.bold} and tube #{to.bold}\"\n          note \"Use a #{P20_PRE} pipette and set it to \u003cb\u003e[1 0 0]\u003c/b\u003e.\"\n          check \"Transfer #{SAMPLE_VOLUME}uL from #{from.bold} into #{to.bold}\"\n          img = make_transfer(tubeS, tubeP, 300, \"#{SAMPLE_VOLUME}uL\", \"(#{P20_PRE} pipette)\")\n          img.translate!(25)\n          note display_svg(img, 0.75)\n          check 'Close tubes and discard pipette tip'\n        end\n      end\n    end\n  end\n\n  def start_thermocycler(ops)\n    # Adds the PCR tubes to the PCR machine.\n    # Instructions for PCR cycles.\n    #\n    samples = ops.map { |op| op.output(OUTPUT).item }\n    sample_refs = samples.map { |sample| ref(sample) }\n\n    # END OF PRE_PCR PROTOCOL\n\n    vortex_and_centrifuge_helper(PCR_SAMPLE,\n                                 sample_refs,\n                                 VORTEX_TIME, CENTRIFUGE_TIME,\n                                 'to mix.', 'to pull down liquid', AREA, mynote = nil)\n\n    t = Table.new\n    cycles_temp = \"\u003ctable style=\\\"width:100%\\\"\u003e\n                    \u003ctr\u003e\u003ctd\u003e95C\u003c/td\u003e\u003c/tr\u003e\n                    \u003ctr\u003e\u003ctd\u003e57C\u003c/td\u003e\u003c/tr\u003e\n                    \u003ctr\u003e\u003ctd\u003e72C\u003c/td\u003e\u003c/tr\u003e\n      \u003c/table\u003e\"\n    cycles_time = \"\u003ctable style=\\\"width:100%\\\"\u003e\n                    \u003ctr\u003e\u003ctd\u003e30 sec\u003c/td\u003e\u003c/tr\u003e\n                    \u003ctr\u003e\u003ctd\u003e30 sec\u003c/td\u003e\u003c/tr\u003e\n                    \u003ctr\u003e\u003ctd\u003e30 sec\u003c/td\u003e\u003c/tr\u003e\n      \u003c/table\u003e\"\n    t.add_column('STEP', ['Initial Melt', '45 cycles of', 'Extension', 'Hold'])\n    t.add_column('TEMP', ['95C', cycles_temp, '72C', '4C'])\n    t.add_column('TIME', ['4 min', cycles_time, '7 min', 'forever'])\n\n    show do\n      title 'Run PCR'\n      check 'Close all the lids of the pipette tip boxes and pre-PCR rack'\n      check \"Take only the PCR tubes (#{sample_refs.to_sentence}) with you\"\n      check 'Place the PCR tubes in the assigned thermocycler, close, and tighten the lid'\n      check \"Select the program named #{PCR_CYCLE} under OS\"\n      check \"Hit #{'Run'.quote} and #{'OK to 50uL'.quote}\"\n      table t\n    end\n\n    operations.each do |op|\n      op.output(OUTPUT).item.move THERMOCYCLER\n    end\n\n    # END OF POST_PCR PCR REACTION...\n  end\n\n  def cleanup(myops)\n    items = [INPUT].map { |x| myops.map { |op| op.input(x) } }.flatten.uniq\n    item_refs = [INPUT].map { |x| myops.map { |op| op.input_ref(x) } }.flatten.uniq\n    temp_items = ['diluent A'].map { |x| myops.map { |op| op.ref(x) } }.flatten.uniq\n\n    all_refs = temp_items + item_refs\n\n    show do\n      title \"Discard items into the #{WASTE_POST}\"\n\n      note \"Discard the following items into the #{WASTE_POST}\"\n      all_refs.each { |r| bullet r }\n    end\n    # clean_area AREA\n  end\n\n  def conclusion(_myops)\n    show do\n      title 'Thank you!'\n      note 'You may start the next protocol in 2 hours.'\n    end\n  end\nend # Class\n","precondition":"eval Library.find_by_name(\"OLAScheduling\").code(\"source\").content\nextend OLAScheduling\n\ndef precondition(op)\n  schedule_same_kit_ops(op)\n  true\nend","cost_model":"def cost(op)\n  { labor: 7.5, materials: 0 }\nend","documentation":"Generate PCR products from cell lysate which will be used later to detect HIV mutations.","test":"","timing":null}},{"sample_types":[{"id":1,"name":"OLASimple Sample","description":"Patient sample and OLA kit","created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","field_types":[{"id":1,"parent_id":1,"name":"Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Secondary Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":4,"name":"OLA Ligation Stripwell","description":"OLA Ligation Stripwell","min":0,"max":1,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","unit":"Well","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":null,"prefix":"","rows":1,"columns":12,"sample_type_name":null},{"id":6,"name":"OLA Detection Strips","description":"OLA Detection STrips","min":0,"max":1,"handler":"collection","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","unit":"strip","cost":0.01,"release_method":"return","release_description":"","sample_type_id":null,"image":null,"prefix":"","rows":1,"columns":12,"sample_type_name":null}],"operation_type":{"name":"OLASimple Paper Detection","category":"OLASimple","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"input","name":"Ligation Product","sample_types":["OLASimple Sample"],"object_types":["OLA Ligation Stripwell"],"part":false,"array":false,"routing":"LP","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"output","name":"Detection Strip","sample_types":["OLASimple Sample"],"object_types":["OLA Detection Strips"],"part":false,"array":false,"routing":"LP","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\n\n##########################################\n#\n#\n# OLASimple Detection\n# author: Justin Vrana\n# date: March 2018\n#\n#\n##########################################\n\nneeds 'OLASimple/OLAConstants'\nneeds 'OLASimple/OLALib'\nneeds 'OLASimple/OLAGraphics'\nneeds 'OLASimple/JobComments'\nneeds 'OLASimple/OLAKitIDs'\n\nclass Protocol\n  include OLAConstants\n  include OLALib\n  include OLAGraphics\n  include JobComments\n  include OLAKitIDs\n\n  ###########################################\n  ## INPUT/OUTPUT\n  ###########################################\n  # F\n  INPUT = 'Ligation Product'\n  OUTPUT = 'Detection Strip'\n  PACK = 'Detection Pack'\n  A = 'Diluent A'\n  G = 'Gold Mix'\n  S = 'Stop Mix'\n\n  ###########################################\n  ## TERMINOLOGY\n  ###########################################\n\n  ###########################################\n  ## Protocol Specifics\n  ###########################################\n  AREA = POST_PCR\n  NUM_SUB_PACKAGES = 4\n\n  CENTRIFUGE_TIME = '5 seconds' # time to pulse centrifuge to pull down dried powder\n  VORTEX_TIME = '5 seconds' # time to pulse vortex to mix\n  TUBE_CAP_WARNING = 'Check to make sure tube caps are completely closed.'\n  PACK_HASH = DETECTION_UNIT\n  THIS_UNIT = PACK_HASH['Unit Name']\n  STOP_VOLUME = PACK_HASH['Stop Rehydration Volume']\n  GOLD_VOLUME = PACK_HASH['Gold Rehydration Volume']\n  STOP_TO_SAMPLE_VOLUME = PACK_HASH['Stop to Sample Volume'] # volume of competitive oligos to add to sample\n  SAMPLE_TO_STRIP_VOLUME = PACK_HASH['Sample to Strip Volume'] # volume of sample to add to the strips\n  GOLD_TO_STRIP_VOLUME = PACK_HASH['Gold to Strip Volume']\n  PREV_COMPONENTS = PACK_HASH['Components']['strips']\n  MUTATION_LABELS = PACK_HASH['Mutation Labels']\n\n  PREV_UNIT = 'L'\n  MATERIALS = [\n    'P1000 pipette and filtered tips',\n    'P200 pipette and filtered tips',\n    'P20 pipette and filtered tips',\n    'a spray bottle of 10% v/v bleach',\n    'a spray bottle of 70% v/v ethanol',\n    'a timer',\n    'gloves'\n  ].freeze\n\n  POSITIVE = 'positive'\n  NEGATIVE = 'negative'\n  DEBUG_UPLOAD_ID = 1\n\n  ##########################################\n  # ##\n  # Input Restrictions:\n  # Input needs a kit, unit, components,\n  # and sample data associations to work properly\n  ##########################################\n\n  def main\n    operations.each do |op|\n      op.temporary[:pack_hash] = PACK_HASH\n    end\n    save_user operations\n    operations.running.retrieve interactive: false\n    debug_setup operations\n    save_temporary_input_values(operations, INPUT)\n    save_temporary_output_values(operations)\n    expert_mode = true\n    introduction operations.running\n    record_technician_id\n    safety_warning\n    area_preparation POST_PCR, MATERIALS, PRE_PCR\n    simple_clean('OLASimple Paper Detection')\n\n    get_detection_packages operations.running\n    validate_detection_packages operations.running\n    open_detection_packages operations.running\n    rehydrate_stop_solution(sorted_ops.running)\n    wait_for_pcr sorted_ops.running\n    retrieve_inputs(sorted_ops.running)\n    validate_detection_inputs(sorted_ops.running)\n\n    stop_ligation_product(sorted_ops.running, expert_mode)\n    # short_timer\n    rehydrate_gold_solution(sorted_ops.running)\n    display_detection_strip_diagram\n    add_ligation_product_to_strips(sorted_ops.running)\n    add_gold_solution(sorted_ops.running)\n    read_from_scanner(sorted_ops.running)\n    analysis operations.running\n\n    discard_things(sorted_ops.running)\n    clean_area(AREA)\n    wash_self\n    conclusion sorted_ops\n    accept_comments\n    { 'Ok' =\u003e 1 }\n  end\n\n  def sorted_ops\n    operations.sort_by { |op| op.output_ref(OUTPUT) }.extend(OperationList)\n  end\n\n  def save_user(ops)\n    ops.each do |op|\n      username = get_technician_name(jid)\n      op.associate(:technician, username)\n    end\n  end\n\n  def debug_setup(ops)\n    # make an alias for the inputs\n    if debug\n      ops.each_with_index do |op, i|\n        kit_num = 'K001'\n        sample_num = sample_num_to_id(i + 1)\n        make_alias(op.input(INPUT).item, kit_num, PREV_UNIT, PREV_COMPONENTS, 'a patient id', sample_num)\n      end\n    end\n  end\n\n  def run_checks(_myops)\n    if operations.running.empty?\n      show do\n        title 'All operations have errored'\n        note \"Contact #{SUPERVISOR}\"\n        operations.each do |op|\n          note (op.errors.map { |k, v| [k, v] }).to_s\n        end\n      end\n      {}\n    end\n  end\n\n  def introduction(_myops)\n    show do\n      title 'Welcome to OLASimple Paper Detection procotol'\n      note 'In this protocol you will be adding samples from the ligation protocol onto paper detection strips. ' \\\n            'You will then scan an image of the strips and upload the image. The strips will detect whether the sample has drug resistance mutations.'\n    end\n  end\n\n  def get_detection_packages(myops)\n    gops = group_packages(myops)\n    show do\n      title \"Get #{DET_PKG_NAME.pluralize(gops.length)} from the #{FRIDGE_POST}\"\n      gops.each do |unit, _ops|\n        check \"Retrieve package #{unit.bold}\"\n      end\n      check \"Place #{pluralizer('package', gops.length)} on the bench in the #{AREA.bold} area.\"\n    end\n  end\n\n  def validate_detection_packages(myops)\n    group_packages(myops).each { |unit, _ops| package_validation_with_multiple_tries(unit) }\n  end\n\n  def open_detection_packages(myops)\n    kit_ops = myops.running.group_by { |op| op.temporary[:output_kit] }\n    kit_ops.each do |kit, ops|\n      ops.each do |op|\n        op.make_collection_and_alias(OUTPUT, 'strips', INPUT)\n      end\n\n      ops.each do |op|\n        op.temporary[:label_string] = \"#{op.output_refs(OUTPUT)[0]} through #{op.output_refs(OUTPUT)[-1]}\"\n      end\n\n      tokens = ops.first.output_tokens(OUTPUT)\n      num_samples = ops.first.temporary[:pack_hash][NUM_SAMPLES_FIELD_VALUE]\n\n      grid = SVGGrid.new(num_samples, num_samples, 50, 50)\n      ops.each_with_index do |op, i|\n        tokens = op.output_tokens(OUTPUT)\n        grid.add(display_strip_panel(*tokens, COLORS).scale!(0.5), i, i)\n      end\n\n      diluentATube = make_tube(closedtube, 'Diluent A', ops.first.tube_label('diluent A'), 'medium', true).scale!(0.75)\n      stopTube = make_tube(closedtube, 'Stop mix', ops.first.tube_label('stop'), 'powder', true).scale!(0.75)\n      goldTube = make_tube(closedtube, 'Gold mix', ops.first.tube_label('gold'), 'powder', true, fluidclass: 'pinkfluid').scale!(0.75)\n      diluentATube.translate!(50, 75)\n      goldTube.align_with(diluentATube, 'top-right').translate!(50)\n      stopTube.align_with(goldTube, 'top-right').translate!(50)\n      img = SVGElement.new(children: [grid, diluentATube, goldTube, stopTube], boundx: 500, boundy: 220)\n\n      show_open_package(kit, THIS_UNIT, NUM_SUB_PACKAGES) do\n        note \"Check that there are the following tubes and #{STRIPS}:\"\n        note display_svg(img, 1.0)\n      end\n    end\n  end\n\n  def rehydrate_stop_solution(myops)\n    gops = group_packages(myops)\n    gops.each do |_unit, ops|\n      from = ops.first.ref('diluent A')\n      to = ops.first.ref('stop')\n      show do\n        raw transfer_title_proc(STOP_VOLUME, from, to)\n        check \"Centrifuge tubes #{to} and #{from} for 5 seconds to pull reagents.\"\n        check \"Set a #{P200_POST} pipette to \u003cb\u003e[0 3 6]\u003c/b\u003e. Add #{STOP_VOLUME}uL from #{from.bold} into tube #{to.bold}\"\n        tubeA = make_tube(opentube, DILUENT_A, ops.first.tube_label('diluent A'), 'medium')\n        tubeS = make_tube(opentube, STOP_MIX, ops.first.tube_label('stop'), 'powder')\n        img = make_transfer(tubeA, tubeS, 300, \"#{STOP_VOLUME}uL\", \"(#{P200_POST} pipette)\")\n        img.translate!(20)\n        note display_svg(img, 0.75)\n      end\n\n      vortex_and_centrifuge_helper('tube',\n                                   [to],\n                                   VORTEX_TIME, CENTRIFUGE_TIME,\n                                   'to mix.', 'to pull down liquid', AREA, mynote = nil)\n    end\n  end\n\n  def wait_for_pcr(myops)\n    show do\n      title 'Wait for thermocycler to finish'\n\n      note \"The thermocycler containing the #{LIGATION_SAMPLE.pluralize(5)} needs to complete before continuing\"\n      check \"Check the #{THERMOCYCLER} to see if the samples are done.\"\n      note 'If the cycle is at \"hold at 4C\" then it is done. If it is done, hit CANCEL followed by YES. If not, continue waiting.'\n      note 'Else, if your ligation sample has been stored, retrieve from freezer.'\n      note \"You need the following samples: \"\n      myops.each do |op|\n        bullet \"#{op.input_refs(INPUT)[0].bold} to #{op.input_refs(INPUT)[-1].bold}\"\n      end\n      warning \"Do not proceed until the #{THERMOCYCLER} is finished.\"\n    end\n  end\n\n  def retrieve_inputs(myops)\n    gops = myops.group_by { |op| op.temporary[:output_kit_and_unit] }\n    num_tubes = myops.inject(0) { |sum, op| sum + op.output_refs(OUTPUT).length }\n    # ordered_ops = gops.map {|unit, ops| ops}.flatten.extend(OperationList) # organize by unit\n    show do\n      title \"Take #{pluralizer('sample', num_tubes)} from the #{THERMOCYCLER} and place on rack in #{AREA.bold} area\"\n      check 'Centrifuge for 5 seconds to pull down liquid'\n      check 'Place on rack in post-PCR area'\n\n      gops.each do |_unit, ops|\n        ops.each do |op|\n          note display_svg(display_ligation_tubes(*op.input_tokens(INPUT), COLORS), 0.75)\n        end\n      end\n    end\n  end\n\n  def validate_detection_inputs(myops)\n    expected_inputs = myops.map { |op| \"#{op.temporary[:input_unit]}-#{op.temporary[:input_sample]}\" }\n    sample_validation_with_multiple_tries(expected_inputs)\n  end\n\n  def stop_ligation_product(myops, expert_mode)\n    gops = myops.group_by { |op| op.temporary[:output_kit_and_unit] }\n\n    gops.each do |_unit, ops|\n      from = ops.first.ref('stop')\n      ops.each do |op|\n        to_labels = op.input_refs(INPUT)\n        show do\n          # title \"Get ready to add #{STOP_MIX} to #{LIGATION_SAMPLE.pluralize(MUTATIONS.length)} for #{unit}\"\n          title \"Position #{STOP_MIX} #{from.bold} and colored tubes #{op.input_refs(INPUT)[0].bold} to #{op.input_refs(INPUT)[-1].bold} in front of you.\"\n          note \"In the next steps you will add #{STOP_MIX} to #{pluralizer('tube', PREV_COMPONENTS.length)}\"\n          tube = closedtube.scale(0.75)\n          tube.translate!(0, -50)\n          tube = tube.g\n          tube.g.boundx = 0\n          labeled_tube = make_tube(closedtube, STOP_MIX, op.tube_label('stop'), 'medium', true)\n          ligation_tubes = display_ligation_tubes(*op.input_tokens(INPUT), COLORS)\n          ligation_tubes.align!('bottom-left')\n          ligation_tubes.align_with(tube, 'bottom-right')\n          ligation_tubes.translate!(50)\n          image = SVGElement.new(children: [labeled_tube, ligation_tubes], boundx: 600, boundy: tube.boundy)\n          image.translate!(50)\n          image.boundy = image.boundy + 50\n          note display_svg(image, 0.75)\n        end\n        if expert_mode\n          show do\n            # title \"Get ready to add #{STOP_MIX} to #{LIGATION_SAMPLE.pluralize(MUTATIONS.length)} for #{unit}\"\n            title \"Add #{STOP_MIX} #{from.bold} to each of #{op.input_refs(INPUT)[0].bold} to #{op.input_refs(INPUT)[-1].bold} in front of you.\"\n            tube = closedtube.scale(0.75)\n            tube.translate!(0, -50)\n            tube = tube.g\n            tube.g.boundx = 0\n            labeled_tube = make_tube(closedtube, STOP_MIX, op.tube_label('stop'), 'medium', true)\n            ligation_tubes = display_ligation_tubes(*op.input_tokens(INPUT), COLORS)\n            ligation_tubes.align!('bottom-left')\n            ligation_tubes.align_with(tube, 'bottom-right')\n            ligation_tubes.translate!(50)\n            transfer_image = make_transfer(labeled_tube, ligation_tubes, 300, \"#{STOP_TO_SAMPLE_VOLUME}uL\", \"(#{P20_POST} pipette)\")\n            note display_svg(transfer_image, 0.75)\n            to_labels.each do |l|\n              check \"Transfer #{STOP_TO_SAMPLE_VOLUME}uL from #{STOP_MIX.bold} into #{l.bold}\"\n            end\n          end\n        else\n          to_labels.each.with_index do |label, i|\n            show do\n              raw transfer_title_proc(STOP_TO_SAMPLE_VOLUME, from, label)\n              # title \"Add #{STOP_TO_SAMPLE_VOLUME}uL #{STOP_MIX} #{from.bold} to #{LIGATION_SAMPLE} #{label}\"\n              note \"Set a #{P20_POST} pipette to [0 2 4]. Add #{STOP_TO_SAMPLE_VOLUME}uL from #{from.bold} into tube #{label.bold}\"\n              note \"Close tube #{label}.\"\n              note 'Discard pipette tip.'\n              tubeS = make_tube(opentube, STOP_MIX, op.tube_label('stop'), 'medium')\n              transfer_image = transfer_to_ligation_tubes_with_highlight(\n                tubeS, i, *op.input_tokens(INPUT), COLORS, STOP_TO_SAMPLE_VOLUME, \"(#{P20_POST} pipette)\"\n              )\n              note display_svg(transfer_image, 0.75)\n            end\n          end\n        end\n      end\n    end\n\n    show do\n      title \"Vortex and centrifuge all #{operations.size * PREV_COMPONENTS.size} tubes for 5 seconds.\"\n      check 'Vortex for 5 seconds.'\n      check 'Centrifuge for 5 seconds.'\n      note 'This step is important to avoid FALSE POSITIVE.'\n    end\n\n    t = Table.new\n    t.add_column('STEP', ['Initial Melt', 'Annealing'])\n    t.add_column('TEMP', %w[95C 37C])\n    t.add_column('TIME', ['30s', '4 min'])\n    add_to_thermocycler('tube', myops.length * PREV_COMPONENTS.length, STOP_CYCLE, t, 'Stop Cycle')\n  end\n\n  def short_timer\n    show do\n      title 'Set timer for 6 minutes'\n      check 'Set a timer for 6 minutes. This will notify you when the thermocycler is done.'\n      timer initialize: { minute: 6 }\n      check 'Click the \"\u003cb\u003eplay\u003c/b\u003e\" button on the left. Proceed to next step now.'\n    end\n  end\n\n  def display_detection_strip_diagram\n    show do\n      title \"Review #{STRIP} diagram\"\n      note 'In the next steps you will be adding ligation mixtures followed by the gold solutions to the detection strips.'\n      note 'You will pipette into the \u003cb\u003ePort\u003c/b\u003e. After pipetting, you should see the \u003cb\u003eReading Window\u003c/b\u003e become wet after a few minutes.'\n      warning 'Do not add liquid directly to the \u003cb\u003eReading Window\u003c/b\u003e'\n      note display_svg(detection_strip_diagram, 0.75)\n    end\n  end\n\n  def add_ligation_product_to_strips(myops)\n    gops = group_packages(myops)\n\n    show do\n      title 'Wait for stop cycle to finish (5 minutes).'\n      note \"Wait for the #{THERMOCYCLER} containing your samples to finish. \"\n      bullet \"If the #{THERMOCYCLER} beeps, it is done. If not, continue waiting.\"\n      warning \"Once the #{THERMOCYCLER} finishes, \u003cb\u003eIMMEDIATELY\u003c/b\u003e continue to the next step.\"\n      check \"Take #{pluralizer('sample', myops.length * PREV_COMPONENTS.length)} from the #{THERMOCYCLER}.\"\n      check \"Vortex #{'sample'.pluralize(PREV_COMPONENTS.length)} for 5 seconds to mix.\"\n      check \"Centrifuge #{'sample'.pluralize(PREV_COMPONENTS.length)} for 5 seconds to pull down liquid\"\n      check \"Place on rack in the #{POST_PCR.bold} area.\"\n    end\n\n    timer_set = false\n    gops.each do |_unit, ops|\n      ops.each do |op|\n        kit = op.temporary[:output_kit]\n        sample = op.temporary[:output_sample]\n        panel_unit = op.temporary[:output_unit]\n        tube_unit = op.temporary[:input_unit]\n        # show do\n        #   title \"Arrange #{STRIPS} and tubes\" # for sample 1?\n        #   note \"Place the detection #{STRIPS} and #{LIGATION_SAMPLE.pluralize(PREV_COMPONENTS.length)} as shown in the picture:\"\n        #   note display_svg(display_panel_and_tubes(kit, panel_unit, tube_unit, PREV_COMPONENTS, sample, COLORS).translate!(50), 0.6)\n        # end\n\n        # Validate samples\n        from_name = \"#{op.temporary[:input_unit]}-#{op.temporary[:input_sample]}\"\n        to_name = \"#{op.temporary[:output_unit]}-#{op.temporary[:output_sample]}\"\n        svg_both = display_panel_and_tubes(kit, panel_unit, tube_unit, PREV_COMPONENTS, sample, COLORS).translate!(50).scale!(0.8)\n        p = proc do\n          title \"Arrange #{STRIPS} and tubes for sample #{op.temporary[:input_sample]}\" # for sample 1?\n          note \"Place the #{STRIPS} #{to_name} and #{LIGATION_SAMPLE.pluralize(PREV_COMPONENTS.length)} #{from_name} as shown in the picture:\"\n          note 'Scan in IDS of objects for confirmation.'\n        end\n        content = ShowBlock.new(self).run(\u0026p)\n        pre_transfer_validation_with_multiple_tries(from_name, to_name, svg_both, content_override: content)\n\n        show do\n          title \"From each colored tube, add #{SAMPLE_TO_STRIP_VOLUME}uL of #{LIGATION_SAMPLE} to the corresponding sample port of each #{STRIP}.\"\n          unless timer_set\n            warning '\u003ch2\u003eComplicated Step! Take note of all instructions before beginning transfers.\u003c/h2\u003e'\n            note 'Set a 5 minute timer after adding ligation sample to \u003cb\u003eFIRST\u003c/b\u003e strip at the SAMPLE PORT.'\n          end\n          note '\u003chr\u003e'\n          timer_set = true\n          #   check \"Set a 5 minute timer\" unless set_timer\n          check \"Set a #{P200_POST} pipette to [0 2 4]. Add #{SAMPLE_TO_STRIP_VOLUME}uL of \u003cb\u003eeach\u003c/b\u003e #{LIGATION_SAMPLE} to the corresponding #{STRIP}.\"\n          note \"Match the sample tube color with the #{STRIP} color. For example, match #{op.input_refs(INPUT)[0].bold} to #{op.output_refs(OUTPUT)[0].bold}\"\n          #   note \"After adding the first sample, set the timer for 5 minutes\"\n          warning 'Dispose of pipette tip and close tube after each strip.'\n          tubes = display_ligation_tubes(*op.input_tokens(INPUT), COLORS, (0..PREV_COMPONENTS.length - 1).to_a, [], 90)\n          panel = display_strip_panel(*op.output_tokens(OUTPUT), COLORS)\n          tubes.align_with(panel, 'center-bottom')\n          tubes.align!('center-top')\n          tubes.translate!(50, -50)\n          img = SVGElement.new(children: [panel, tubes], boundy: 330, boundx: panel.boundx)\n          note display_svg(img, 0.6)\n        end\n      end\n    end\n  end\n\n  def rehydrate_gold_solution(myops)\n    gops = group_packages(myops)\n    gops.each do |_unit, ops|\n      from = ops.first.ref('diluent A')\n      to = ops.first.ref('gold')\n\n      show do\n        raw transfer_title_proc(GOLD_VOLUME, from, to)\n        # title \"Add #{GOLD_VOLUME}uL of #{DILUENT_A} #{from.bold} to #{GOLD_MIX} #{to.bold}\"\n        raw centrifuge_proc(GOLD_MIX, [to], CENTRIFUGE_TIME, 'to pull down dried powder.', AREA)\n        note \"Set a #{P1000_POST} pipette to \u003cb\u003e[ 0 6 0 ]\u003c/b\u003e. Add #{GOLD_VOLUME}uL from #{from.bold} into tube #{to.bold}.\"\n        raw vortex_proc(GOLD_MIX, [to], '10 seconds', 'to mix well.')\n        warning \"Make sure #{GOLD_MIX} is fully dissolved.\"\n        warning \"Do not centrifuge #{to.bold} after vortexing.\"\n        tubeA = make_tube(opentube, DILUENT_A, ops.first.tube_label('diluent A'), 'medium')\n        tubeG = make_tube(opentube, GOLD_MIX, ops.first.tube_label('gold'), 'powder', fluidclass: 'pinkfluid')\n        img = make_transfer(tubeA, tubeG, 300, \"#{GOLD_VOLUME}uL\", \"(#{P1000_POST} pipette)\")\n        img.translate!(20)\n        note display_svg(img, 0.75)\n      end\n    end\n  end\n\n  def add_gold_solution(myops)\n    gops = group_packages(myops)\n    set_timer = false\n\n    show do\n      title 'Wait until 5 minute timer ends'\n      warning 'Do not proceed before 5 minute timer is up.'\n      note 'The strips need a chance to become fully wet.'\n    end\n\n    gops.each do |_unit, ops|\n      show do\n        title \"Add gold solution to #{pluralizer(STRIP, PREV_COMPONENTS.length * ops.length)}\"\n        note 'Set a 10 minute timer after adding gold to \u003cb\u003eFIRST\u003c/b\u003e strip at the SAMPLE PORT.'\n        note 'Add gold to the rest of strips at the SAMPLE PORT and then \u003cb\u003eimmediately\u003c/b\u003e click OK.'\n        warning 'DO NOT add gold solution onto the reading window.'\n        note '\u003chr\u003e'\n        check \"Set a #{P200_POST} pipette to \u003cb\u003e[0 4 0]\u003c/b\u003e. Transfer #{GOLD_TO_STRIP_VOLUME}uL of #{GOLD_MIX} #{ops.first.ref('gold').bold} to #{pluralizer(STRIP, PREV_COMPONENTS.length * ops.length)} at the SAMPLE PORT.\"\n        grid = SVGGrid.new(ops.length, ops.length, 50, 50)\n        ops.each.with_index do |op, i|\n          _tokens = op.output_tokens(OUTPUT)\n          grid.add(display_strip_panel(*_tokens, COLORS).scale!(0.5).translate!(0, -50), i, i)\n        end\n        tubeG = make_tube(opentube, GOLD_MIX, ops.first.tube_label('gold'), 'medium', fluidclass: 'pinkfluid')\n        img = make_transfer(tubeG, grid, 300, \"#{GOLD_TO_STRIP_VOLUME}uL\", '(each strip)')\n        img.boundx = 900\n        img.boundy = 400\n        img.translate!(40)\n        note display_svg(img, 0.6)\n      end\n    end\n  end\n\n  def read_from_scanner(myops)\n    gops = group_packages(myops)\n    show do\n      title \"Bring #{pluralizer(STRIP, myops.length * PREV_COMPONENTS.length)} to the #{PHOTOCOPIER}.\"\n    end\n\n    show do\n      title 'Wait until 10 minute timer is up'\n      note \"#{STRIPS.capitalize} need to rest for 10 minutes before taking an image.\"\n      check \"In the meantime, make sure you have access to the #{PHOTOCOPIER}.\"\n      note 'Signal can develop more slowly if the room is humid. After the 10-min timer ends, you should see at least two lines on each strip.'\n      note 'If your signal is hard to see by eye, give it another 5 minutes before clicking OK.'\n      note 'Do not continue to next step until signal is visible.'\n    end\n\n    # show do\n    #   title \"IMPORTANT NOTE TO JUSTIN\"\n    #   warning \"This protocol should be broken into two since technician will be moving from one computer to the next.\"\n    #   note \"This really depends on whether we want to use the laptop ONLY for detection purposes (I think we should)\"\n    # end\n\n    myops.each do |op|\n      op.temporary[:filename] = \"#{op.output(OUTPUT).item.id}_#{op.temporary[:output_kit]}#{op.temporary[:output_sample]}\"\n    end\n\n    gops.each do |_unit, ops|\n      ops.each do |op|\n        labels = op.output_refs(OUTPUT)\n        show do\n          title \"Scan #{STRIPS} \u003cb\u003e#{labels[0]} to #{labels[-1]}\u003c/b\u003e\"\n          check \"Open #{PHOTOCOPIER}\"\n          check \"Place #{STRIPS} face down in the #{PHOTOCOPIER}\"\n          check \"Align colored part of #{STRIPS} with the colored tape on the #{PHOTOCOPIER}\"\n          check \"Close the #{PHOTOCOPIER}\"\n        end\n\n        image_confirmed = false\n\n        5.times.each do |_this_try|\n          next if image_confirmed\n\n          show do\n            title 'Scan the image'\n            check \"Press the \u003cb\u003e\\\"AUTO SCAN\\\"\u003c/b\u003e button firmly on the side of the #{PHOTOCOPIER} and hold for a few seonds. A new window should pop up, with a green bar indicating scanning in progress.\"\n            check \"Wait for #{PHOTOCOPIER} to complete. This takes about 1 minute.\"\n          end\n\n          rename = '\u003cmd-button ng-disabled=\"true\" class=\"md-raised\"\u003erename\u003c/md-button\u003e'\n          copy = '\u003cmd-button ng-disabled=\"true\" class=\"md-raised\"\u003ecopy\u003c/md-button\u003e'\n          paste = '\u003cmd-button ng-disabled=\"true\" class=\"md-raised\"\u003epaste\u003c/md-button\u003e'\n\n          show do\n            title \"Copy image file name #{op.temporary[:filename].bold}\"\n            note \"1. highlight the file name: #{op.temporary[:filename].bold}\"\n            note \"2. then click #{copy}\"\n            title \"Then rename the new image file to #{op.temporary[:filename].bold}\"\n            note '1. a new file should appear on the desktop. Minimize this browser and find the new file.'\n            note \"2. right-click and then click #{rename}\"\n            note \"3. right-click and click #{paste} to rename file.\"\n          end\n\n          show_with_expected_uploads(op, op.temporary[:filename], SCANNED_IMAGE_UPLOAD_KEY) do\n            title \"Upload file \u003cb\u003e#{op.temporary[:filename]}\u003c/b\u003e\"\n            note \"Click the button below to upload file \u003cb\u003e#{op.temporary[:filename]}\u003c/b\u003e\"\n            note \"Navigate to the desktop. Click on file \u003cb\u003e#{op.temporary[:filename]}\u003c/b\u003e\"\n          end\n\n          op.temporary[SCANNED_IMAGE_UPLOAD_KEY] = Upload.find(DEBUG_UPLOAD_ID) if debug # false upload if debug\n\n          confirmed = show do\n            title \"Confirm image labels say #{op.temporary[:label_string].bold}\"\n            select %w[yes no], var: 'confirmed', label: 'Do the image labels and your image match?', default: 0\n            img = display_strip_panel(*op.output_tokens(OUTPUT), COLORS).g\n            img.boundy = 50\n            note display_svg(img, 0.75)\n            raw display_upload(op.temporary[SCANNED_IMAGE_UPLOAD_KEY])\n          end\n\n          image_confirmed = confirmed[:confirmed] == 'yes'\n\n          next if image_confirmed\n\n          show do\n            title \"You selected that the images don't match!\"\n            note 'You will now be asked to scan and upload the strip again.'\n          end\n        end\n\n        op.associate(SCANNED_IMAGE_UPLOAD_ID_KEY, op.temporary[SCANNED_IMAGE_UPLOAD_KEY].id)\n        op.output(OUTPUT).item.associate(SCANNED_IMAGE_UPLOAD_ID_KEY, op.temporary[SCANNED_IMAGE_UPLOAD_KEY].id)\n      end\n    end\n  end\n\n  def discard_things(myops)\n    def discard_refs_from_op(op)\n      refs = []\n      refs.push('Diluent A ' + op.ref('diluent A').bold)\n      refs.push('Gold Mix ' + op.ref('gold').bold)\n      refs.push('Stop Mix ' + op.ref('stop').bold)\n      refs.push(\"Samples #{op.input_refs(INPUT).join(', ').bold}\")\n      refs.push(\"Strips #{op.output_refs(OUTPUT).join(', ').bold}\")\n      refs\n    end\n\n    all_refs = myops.map { |op| discard_refs_from_op(op) }.flatten.uniq\n\n    show do\n      title \"Throw items into the #{WASTE_POST}\"\n\n      note \"Throw the following items into the #{WASTE_POST} in the #{AREA.bold} area:\"\n      t = Table.new\n      t.add_column('Item to throw away', all_refs)\n      table t\n    end\n  end\n\n  def filename(op)\n    item_id = op.output(OUTPUT).item.id\n    labels = op.output_refs(OUTPUT)\n    \"#{labels[0]}_#{labels[-1]}_#{item_id}\"\n  end\n\n  def conclusion(_myops)\n    show do\n      title 'Thank you!'\n      note 'Thank you for your hard work.'\n    end\n  end\n\n  def analysis(ops)\n    band_choices = {\n      \"M\": { bands: [mut_band], description: '-CTRL -WT +MUT' },\n      \"N\": { bands: [control_band, wt_band, mut_band], description: '+CTRL +WT +MUT' },\n      \"O\": { bands: [control_band, mut_band], description: '+CTRL -WT +MUT' },\n      \"P\": { bands: [control_band, wt_band], description: '+CTRL +WT -MUT' },\n      \"Q\": { bands: [control_band], description: '+CTRL -WT -MUT' },\n      \"R\": { bands: [], description: '-CTRL -WT -MUT' }\n    }\n\n    categories = {\n      \"M\": POSITIVE,\n      \"N\": POSITIVE,\n      \"O\": POSITIVE,\n      \"P\": NEGATIVE,\n      \"Q\": 'ligation failure',\n      \"R\": 'detection failure'\n    }\n\n    run_image_analysis ops.running, band_choices, categories\n    show_calls ops.running, band_choices\n    show_summary ops.running\n  end\n\n  def run_image_analysis(ops, _band_choices, category_hash)\n    ops.each do |op|\n      image_result = nil\n      5.times.each do |_i|\n        break if image_result\n\n        upload = op.temporary[SCANNED_IMAGE_UPLOAD_KEY]\n        image_result = make_calls_from_image(upload)\n      end\n\n      if image_result.nil?\n        op.error(:image_result_failed, 'Image processing has failed. Check that the OLA IP service is running and connected correctly, and that the file is in a normal image format.')\n        next\n      end\n\n      this_kit = op.temporary[:output_kit]\n      this_unit = op.temporary[:output_unit]\n      this_sample = op.temporary[:output_sample]\n\n      raise 'scanned image had less strips than expected!' if PREV_COMPONENTS.size \u003e image_result.size \u0026\u0026 !debug\n      raise 'scanned image had more strips than expected!' if PREV_COMPONENTS.size \u003c image_result.size \u0026\u0026 !debug\n\n      PREV_COMPONENTS.each.with_index do |_this_component, i|\n        alias_label = op.output_refs(OUTPUT)[i]\n        the_choice = image_result[i]\n        op.output(OUTPUT).item.associate(make_call_key(alias_label), the_choice)\n        op.output(OUTPUT).item.associate(make_call_category_key(alias_label), category_hash[the_choice.to_sym])\n        op.associate(make_call_key(alias_label), the_choice)\n        op.associate(make_call_category_key(alias_label), category_hash[the_choice.to_sym])\n      end\n    end\n  end\n\n  def make_call_key(alias_label)\n    \"#{alias_label}_call\".to_sym\n  end\n\n  def make_call_description_key(alias_label)\n    \"#{alias_label}_call_description\".to_sym\n  end\n\n  def make_call_category_key(alias_label)\n    \"#{alias_label}_call_category\".to_sym\n  end\n\n  def show_calls(myops, band_choices)\n    myops.each do |op|\n      kit_summary = {}\n\n      this_kit = op.temporary[:input_kit]\n      this_item = op.output(OUTPUT).item\n      this_unit = op.temporary[:output_unit]\n      this_sample = op.temporary[:output_sample]\n\n      grid = SVGGrid.new(MUTATION_LABELS.length, 1, 90, 10)\n      categories = []\n\n      PREV_COMPONENTS.each.with_index do |this_component, i|\n        alias_label = op.output_refs(OUTPUT)[i]\n        strip_label = tube_label(this_kit, this_unit, this_component, this_sample)\n        strip = make_strip(strip_label, COLORS[i] + 'strip')\n        band_choice = this_item.get(make_call_key(alias_label))\n        codon_label = label(MUTATION_LABELS[i], 'font-size'.to_sym =\u003e 25)\n        codon_label.align_with(strip, 'center-bottom')\n        codon_label.align!('center-top').translate!(0, 30)\n        category = this_item.get(make_call_category_key(alias_label))\n        kit_summary[MUTATION_LABELS[i]] = { alias: alias_label, category: category.to_s, call: band_choice.to_s }\n        tokens = category.split(' ')\n        tokens.push('') if tokens.length == 1\n        category_label = two_labels(*tokens)\n        category_label.scale!(0.75)\n        category_label.align!('center-top')\n        category_label.align_with(codon_label, 'center-bottom')\n        category_label.translate!(0, 10)\n        bands = band_choices[band_choice.to_sym][:bands]\n        grid.add(strip, i, 0)\n        grid.add(codon_label, i, 0)\n        grid.add(category_label, i, 0)\n        bands.each do |band|\n          grid.add(band, i, 0)\n        end\n      end\n\n      op.associate(:results, kit_summary)\n      op.output(OUTPUT).item.associate(:results, kit_summary)\n      op.temporary[:results] = kit_summary\n\n      img = SVGElement.new(children: [grid], boundx: PREV_COMPONENTS.size * 100, boundy: 350)\n      img.translate!(15)\n      show do\n        refs = op.output_refs(OUTPUT)\n        title \"Here is the summary of your results for \u003cb\u003e#{refs[0]} to #{refs[-1]}\u003c/b\u003e\"\n        note display_svg(img)\n      end\n    end\n  end\n\n  def show_summary(ops)\n    ops.each do |op|\n      hits = op.temporary[:results].select { |_k, v| v == POSITIVE }\n    end\n    show do\n      title 'Sample summary'\n      note \"You analyzed #{ops.length} #{'kit'.pluralize(ops.length)}. Below is the exportable summarized data if you need it.\"\n\n      results_hash = {}\n      kits = ops.map { |op| op.output(OUTPUT).item.get(KIT_KEY) }\n      samples = ops.map { |op| op.output(OUTPUT).item.get(SAMPLE_KEY) }\n      patients = ops.map { |op| op.output(OUTPUT).item.get(PATIENT_KEY) }\n      t = Table.new\n      t.add_column('Kit', kits)\n      t.add_column('Sample', samples)\n      t.add_column('Patient ID', patients)\n      MUTATION_LABELS.each do |label|\n        col = ops.map { |op| op.temporary[:results][label][:category] }\n        t.add_column(label, col)\n        results_hash[label] = col\n      end\n      results_hash['kits'] = kits\n      results_hash['samples'] = samples\n      table t\n    end\n  end\nend\n","precondition":"eval Library.find_by_name(\"OLAScheduling\").code(\"source\").content\nextend OLAScheduling\n\nBATCH_SIZE = 2\ndef precondition(op)\n  schedule_same_kit_ops(op)\n  true\nend","cost_model":"def cost(op)\n  { labor: 12.5, materials: 0 }\nend","documentation":"Samples from the OLASimple ligation protocol are added onto paper detection strips. Then, an an image of the strips is scanned and uploaded. The strips will detect whether the sample has drug resistance mutations, and the protocol will extract this information using computer vision.\n\nThis protocol relies on an image processing service available at the URL given in the OLAConstants library as `OLA_IP_API_URL`.","test":"","timing":null}},{"sample_types":[{"id":1,"name":"OLASimple Sample","description":"Patient sample and OLA kit","created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","field_types":[{"id":1,"parent_id":1,"name":"Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Secondary Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":5,"name":"OLA viral RNA","description":"RNA extracted from patient plasma","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","unit":"OLASimple Sample","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":"OLASimple Sample"},{"id":7,"name":"OLA plasma","description":"Patient plasma in tube identified as SXXX. Starting point for OLA Simple RT-PCR workflow.","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-06-15T09:36:09.000-07:00","updated_at":"2020-06-15T09:36:09.000-07:00","unit":"OLASimple Sample","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":"OLASimple Sample"}],"operation_type":{"name":"OLASimple RNA Extraction","category":"OLASimple","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"output","name":"Viral RNA","sample_types":["OLASimple Sample"],"object_types":["OLA viral RNA"],"part":false,"array":false,"routing":"C","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"sample","role":"input","name":"Plasma","sample_types":["OLASimple Sample"],"object_types":["OLA plasma"],"part":false,"array":false,"routing":"C","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\n\nneeds 'OLASimple/OLAConstants'\nneeds 'OLASimple/OLALib'\nneeds 'OLASimple/OLAGraphics'\nneeds 'OLASimple/JobComments'\nneeds 'OLASimple/OLAKitIDs'\nneeds 'OLASimple/RNAExtractionResources'\n\nclass Protocol\n  include OLAConstants\n  include OLALib\n  include OLAGraphics\n  include JobComments\n  include OLAKitIDs\n  include FunctionalSVG\n  include RNAExtractionResources\n\n  ##########################################\n  # INPUT/OUTPUT\n  ##########################################\n\n  INPUT = 'Plasma'\n  OUTPUT = 'Viral RNA'\n\n  ##########################################\n  # COMPONENTS\n  ##########################################\n\n  AREA = PRE_PCR\n  BSC = 'BSC'\n  PACK_HASH = EXTRACTION_UNIT\n\n  THIS_UNIT     = PACK_HASH['Unit Name']\n  DTT           = THIS_UNIT + PACK_HASH['Components']['dtt']                # E0\n  LYSIS_BUFFER  = THIS_UNIT + PACK_HASH['Components']['lysis buffer']       # E1\n  WASH1         = THIS_UNIT + PACK_HASH['Components']['wash buffer 1']      # E2\n  WASH2         = THIS_UNIT + PACK_HASH['Components']['wash buffer 2']      # E3\n  SA_WATER      = THIS_UNIT + PACK_HASH['Components']['sodium azide water'] # E4\n  SAMPLE_COLUMN = THIS_UNIT + PACK_HASH['Components']['sample column']      # E5\n  RNA_EXTRACT   = THIS_UNIT + PACK_HASH['Components']['rna extract tube']   # E6\n  ETHANOL       = 'Molecular Grade Ethanol'\n  GuSCN_WASTE = 'GuSCN waste container'\n\n  # KIT_SVGs = {\n  #   DTT =\u003e {closed_dry: E0_closed_dry}\n  #   LYSIS_BUFFER =\u003e :screwbottle,\n  #   SA_WATER =\u003e :tube,\n  #   WASH1 =\u003e :roundedtube,\n  #   WASH2 =\u003e :roundedtube,\n  #   SAMPLE_COLUMN =\u003e :samplecolumn,\n  #   RNA_EXTRACT =\u003e :tube\n  #   ETHANOL =\u003e {open: ethanol_container_open, closed: ethanol_container}\n  # }.freeze\n\n  SHARED_COMPONENTS = [DTT, WASH1, WASH2, SA_WATER, ETHANOL, GuSCN_WASTE].freeze\n  PER_SAMPLE_COMPONENTS = [LYSIS_BUFFER, SAMPLE_COLUMN, RNA_EXTRACT].freeze\n  OUTPUT_COMPONENT = '6'\n\n  CENTRIFUGE_TIME = '1 minute'\n\n  # for debugging\n  PREV_COMPONENT = 'S'\n  PREV_UNIT = ''\n\n  def main\n    this_package = prepare_protocol_operations\n\n    introduction\n    record_technician_id\n\n    safety_warning(AREA)\n    cynanide_warning\n    required_equipment\n    simple_clean('OLASimple RNA Extraction')\n\n    retrieve_package(this_package)\n    package_validation_with_multiple_tries(this_package)\n    open_package(this_package)\n\n    fill_ethanol\n    prepare_buffers\n    lyse_samples\n    remove_outer_layer\n    incubate_lysed_samples(operations)\n    add_ethanol\n\n    4.times do\n      operations.each { |op| add_sample_to_column(op) }\n      centrifuge_columns(flow_instructions: \"Discard flow through into #{GuSCN_WASTE}\")\n    end\n    change_collection_tubes\n\n    add_wash_1\n    centrifuge_columns(flow_instructions: \"Discard flow through into #{GuSCN_WASTE}\")\n    change_collection_tubes\n\n    add_wash_2\n    centrifuge_columns(flow_instructions: \"Discard flow through into #{GuSCN_WASTE}\")\n\n    transfer_column_to_e6\n    elute\n    incubate(sample_labels.map { |s| \"#{SAMPLE_COLUMN}-#{s}\" }, '1 minute')\n    centrifuge_columns(flow_instructions: '\u003cb\u003eDO NOT DISCARD FLOW THROUGH\u003c/b\u003e', extra_warning: 'DO NOT DISCARD FLOW THROUGH')\n\n    finish_up\n    disinfect\n    store\n    cleanup\n    wash_self\n    accept_comments\n    conclusion(operations)\n    {}\n  end\n\n  # perform initiating steps for operations,\n  # and gather kit package from operations\n  # that will be used for this protocol.\n  # returns kit package if nothing went wrong\n  def prepare_protocol_operations\n    if operations.length \u003e BATCH_SIZE\n      raise \"Batch size \u003e #{BATCH_SIZE} is not supported for this protocol. Please rebatch.\"\n    end\n\n    operations.make.retrieve interactive: false\n\n    if debug\n      labels = %w[001 002]\n      operations.each.with_index do |op, i|\n        op.input(INPUT).item.associate(SAMPLE_KEY, labels[i])\n        op.input(INPUT).item.associate(COMPONENT_KEY, PREV_COMPONENT)\n        op.input(INPUT).item.associate(UNIT_KEY, PREV_UNIT)\n        op.input(INPUT).item.associate(KIT_KEY, 'K001')\n        op.input(INPUT).item.associate(PATIENT_KEY, 'a patient id')\n      end\n    end\n    save_temporary_input_values(operations, INPUT)\n    operations.each do |op|\n      op.temporary[:pack_hash] = PACK_HASH\n    end\n    save_temporary_output_values(operations)\n\n    operations.each do |op|\n      op.make_item_and_alias(OUTPUT, 'rna extract tube', INPUT)\n    end\n\n    kits = operations.running.group_by { |op| op.temporary[:input_kit] }\n    this_package = kits.keys.first + THIS_UNIT\n    raise 'More than one kit is not supported by this protocol. Please rebatch.' if kits.length \u003e 1\n\n    this_package\n  end\n\n  def sample_labels\n    operations.map { |op| op.temporary[:input_sample] }\n  end\n\n  def save_user(ops)\n    ops.each do |op|\n      username = get_technician_name(jid)\n      op.associate(:technician, username)\n    end\n  end\n\n  def introduction\n    show do\n      title 'Welcome to OLASimple RNA Extraction'\n      note 'In this protocol you will lyse and purify RNA from HIV-infected plasma.'\n      # image of tubes\n    end\n\n    show do\n      title 'RNase degrades RNA'\n      note 'RNA is prone to degradation by RNase present in our eyes, skin, and breath.'\n      note 'Avoid opening tubes outside the Biosafety Cabinet (BSC).'\n      bullet 'Change gloves whenever you suspect potential RNAse contamination'\n      # show image of gloves\n    end\n\n    show do\n      title 'Required Reagent (not provided)'\n      check 'Before starting this protocol, make sure you have access to molecular grade ethanol (~10 mL).'\n      note 'Do not use other grades of ethanol as this will negatively affect the RNA extraction yield.'\n      note 'Soon, using a serological pipette, we will transfer 4ml of the molecular grade ethanol to the provided ethanol container in the kit.'\n      note display_ethanol_question_svg\n    end\n  end\n\n  def cynanide_warning\n    show do\n      title 'Review the safety warnings'\n      warning '\u003cb\u003eTOXIC CYANIDE GAS\u003c/b\u003e'\n      note \"Do not mix #{LYSIS_BUFFER} or #{WASH1} with bleach, as this can generate cyanide gas.\"\n      note \"#{LYSIS_BUFFER} AND #{WASH1} waste must be discarded into the GuSCN waste container\"\n      note display_guscn_waste_svg\n    end\n  end\n\n  def required_equipment\n    show do\n      title 'You will need the following supplies in the BSC'\n      materials = [\n        'P1000 pipette and filter tips',\n        'P200 pipette and filter tips',\n        'P20 pipette and filter tips',\n        'gloves',\n        'Pipette controller and 10mL serological pipette',\n        'Vortex mixer',\n        'Minifuge',\n        'Cold tube rack',\n        '70% v/v Ethanol spray for cleaning',\n        '10% v/v Bleach spray for cleaning',\n        'Molecular grade ethanol'\n      ]\n      materials.each do |m|\n        check m\n      end\n    end\n  end\n\n  def retrieve_package(this_package)\n    show do\n      title \"Retrieve package\"\n      check \"Grab package #{this_package.bold} from the #{FRIDGE_PRE} and place in the #{BSC}\"\n    end\n  end\n\n  def open_package(this_package)\n    show_open_package(this_package, '', 0) do\n      img = kit_image\n      check 'Check that the following are in the pack:'\n      note display_svg(img, 0.75)\n      note 'Arrange tubes on plastic rack for later use.'\n    end\n  end\n\n  def kit_image\n    grid = SVGGrid.new(PER_SAMPLE_COMPONENTS.size + SHARED_COMPONENTS.size + 1, operations.size, 80, 100)\n    initial_kit_components = {\n      DTT =\u003e :E0_closed_dry,\n      LYSIS_BUFFER =\u003e :E1_closed,\n      SA_WATER =\u003e :E4_closed,\n      WASH1 =\u003e :E2_closed,\n      WASH2 =\u003e :E3_closed,\n      SAMPLE_COLUMN =\u003e :E5_empty_closed_w_empty_collector,\n      RNA_EXTRACT =\u003e :E6_closed,\n      ETHANOL =\u003e :ethanol_container,\n      GuSCN_WASTE =\u003e :guscn_container\n    }\n\n    SHARED_COMPONENTS.each_with_index do |component, i|\n      svg_label = component != ETHANOL \u0026\u0026 component != GuSCN_WASTE ? component : ''\n      svg = draw_svg(initial_kit_components[component], svg_label: svg_label)\n      grid.add(svg, i, 0)\n    end\n\n    operations.each_with_index do |op, i|\n      sample_num = op.temporary[:output_sample]\n      PER_SAMPLE_COMPONENTS.each_with_index do |component, j|\n        svg = draw_svg(initial_kit_components[component], svg_label: \"#{component}\\n#{sample_num}\")\n        svg.translate!(30 * (i % 2), 0)\n        grid.add(svg, j + SHARED_COMPONENTS.size, i)\n      end\n    end\n\n    grid.add(many_collection_tubes(6), PER_SAMPLE_COMPONENTS.size + SHARED_COMPONENTS.size, 0)\n\n    grid.align!('center-left')\n    SVGElement.new(children: [grid], boundx: 1000, boundy: 300).translate!(30, 50)\n  end\n\n  def retrieve_inputs\n    input_sample_ids = operations.map do |op|\n      op.input_ref(INPUT)\n    end\n\n    grid = SVGGrid.new(input_sample_ids.size, 1, 80, 100)\n    input_sample_ids.each_with_index do |s, i|\n      svg = draw_svg(:sXXX_closed, svg_label: s.split('-').join(\"\\n\"), opened: false, contents: 'full')\n      grid.add(svg, i, 0)\n    end\n\n    img = SVGElement.new(children: [grid], boundx: 1000, boundy: 200).translate!(0, -30)\n    show do\n      title 'Retrieve Samples'\n      note display_svg(img, 0.75)\n      check \"Take #{input_sample_ids.to_sentence} from #{FRIDGE_PRE}\"\n    end\n  end\n\n  def fill_ethanol\n    svg = SVGElement.new(children: [ethanol_container_open], boundx: 400, boundy: 200)\n    show do\n      title 'Transfer 4mL of Molecular grade ethanol to Provided Container'\n      check 'Use a serological pipette to transfer \u003cb\u003e4ml\u003c/b\u003e of \u003cb\u003eMolecular Grade Ethanol\u003c/b\u003e into provided container.'\n      note display_svg(svg)\n      check 'Return the Molecular grade ethanol to the flammable cabinet.'\n    end\n  end\n\n  # helper method for simple transfers in this protocol\n  def transfer_and_vortex(title, from, to, volume_ul, warning: nil, to_svg: nil, from_svg: nil, skip_centrifuge: false, extra_check: nil)\n    pipette, extra_note, setting_instruction = pipette_decision(volume_ul)\n\n    if to.is_a?(Array) # MULTI TRANSFER\n      img = nil\n      if from_svg \u0026\u0026 to_svg\n        from_component, from_sample_num = from.split('-')\n        from_label = from_component != ETHANOL \u0026\u0026 from_component != GuSCN_WASTE ? from.split('-').join(\"\\n\") : ''\n        from_svg_rendered = draw_svg(from_svg, svg_label: from_label)\n        to_labels = to.map { |t| t.split('-').join(\"\\n\") }\n        to_svgs_rendered = to_labels.map.with_index { |to_label, i| draw_svg(to_svg, svg_label: to_label).translate!(130 * i, 0) }\n        to_svg_final = SVGElement.new(children: to_svgs_rendered, boundx: 300, boundy: 220)\n        img = make_transfer(from_svg_rendered, to_svg_final, 300, \"#{volume_ul}ul\", \"(#{pipette})\")\n      end\n      show do\n        title title\n        check setting_instruction\n        to.each do |t|\n          check \"Transfer \u003cb\u003e#{volume_ul}uL\u003c/b\u003e of \u003cb\u003e#{from}\u003c/b\u003e into \u003cb\u003e#{t}\u003c/b\u003e using a #{pipette} pipette.\"\n          note extra_note if extra_note\n          check \"Discard pipette tip into #{WASTE_PRE}.\"\n          check extra_check if extra_check\n        end\n        warning warning if warning\n        note display_svg(img, 0.75) if img\n        check \"Ensure tube caps are tightly shut for #{to.to_sentence}.\"\n        check \"Vortex \u003cb\u003e#{to.to_sentence}\u003c/b\u003e for \u003cb\u003e2 seconds, twice\u003c/b\u003e.\"\n        check \"Centrifuge \u003cb\u003e#{to.to_sentence}\u003c/b\u003e for \u003cb\u003e5 seconds\u003c/b\u003e.\" unless skip_centrifuge\n      end\n    else # SINGLE TRANSFER\n      from_component, from_sample_num = from.split('-')\n      to_component, to_sample_num = to.split('-')\n      if from_svg \u0026\u0026 to_svg\n        from_label = from_component != ETHANOL \u0026\u0026 from_component != GuSCN_WASTE ? [from_component, from_sample_num].join(\"\\n\") : ''\n        from_svg = draw_svg(from_svg, svg_label: from_label)\n        to_label = to_component != ETHANOL \u0026\u0026 to_component != GuSCN_WASTE ? [to_component, to_sample_num].join(\"\\n\") : ''\n        to_svg = draw_svg(to_svg, svg_label: to_label)\n        img = make_transfer(from_svg, to_svg, 300, \"#{volume_ul}ul\", \"(#{pipette})\")\n      end\n\n      show do\n        title title\n        check setting_instruction\n        check \"Transfer \u003cb\u003e#{volume_ul}uL\u003c/b\u003e of \u003cb\u003e#{from}\u003c/b\u003e into \u003cb\u003e#{to}\u003c/b\u003e using a #{pipette} pipette.\"\n        note extra_note if extra_note\n        warning warning if warning\n        note display_svg(img, 0.75) if img\n        check \"Discard pipette tip into #{WASTE_PRE}.\"\n        check extra_check if extra_check\n        check \"Ensure tube cap is tightly shut for #{to}.\"\n        check \"Vortex \u003cb\u003e#{to}\u003c/b\u003e for \u003cb\u003e2 seconds, twice\u003c/b\u003e.\"\n        check \"Centrifuge \u003cb\u003e#{to}\u003c/b\u003e for \u003cb\u003e5 seconds\u003c/b\u003e.\" unless skip_centrifuge\n      end\n    end\n  end\n\n  def pipette_decision(volume_ul)\n    if volume_ul \u003c= 20\n      setting = '[ ' + (volume_ul * 10).round.to_s.rjust(3, '0').split('').join(' ') + ' ]'\n      [P20_PRE, nil, \"Set P20 pipette to \u003cb\u003e#{setting}\u003c/b\u003e\"]\n    elsif volume_ul \u003c= 200\n      setting = '[ ' + volume_ul.round.to_s.rjust(3, '0').split('').join(' ') + ' ]'\n      [P200_PRE, nil, \"Set p200 pipette to \u003cb\u003e#{setting}\u003c/b\u003e\"]\n    elsif volume_ul \u003c= 1000\n      setting = '[ ' + (volume_ul / 10).round.to_s.rjust(3, '0').split('').join(' ') + ' ]'\n      [P1000_PRE, nil, \"Set p1000 pipette to \u003cb\u003e#{setting}\u003c/b\u003e\"]\n    else\n      factor = volume_ul.fdiv(1000).ceil\n      split_volume = volume_ul.fdiv(factor)\n      setting = '[ ' + (split_volume / 10).round.to_s.rjust(3, '0').split('').join(' ') + ' ]'\n      [P1000_PRE, \"Transfer \u003cb\u003e#{split_volume.round}uL\u003c/b\u003e, \u003cb\u003e#{factor} times\u003c/b\u003e.\", \"Set p1000 pipette to \u003cb\u003e#{setting}\u003c/b\u003e\"]\n    end\n  end\n\n  # helper method for simple incubations\n  def incubate(samples, time)\n    show do\n      title 'Incubate Sample Lysis Solutions'\n      note \"Let \u003cb\u003e#{samples.to_sentence}\u003c/b\u003e incubate for \u003cb\u003e#{time}\u003c/b\u003e at room temperature.\"\n      check \"Set a timer for \u003cb\u003e#{time}\u003c/b\u003e\"\n      note 'Do not proceed until time has elapsed.'\n      note '\u003ciframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/zdl52lDRH1U\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\u003e\u003c/iframe\u003e' \n    end\n  end\n\n  def centrifuge_columns(flow_instructions: nil, extra_warning: nil)\n    columns = sample_labels.map { |s| \"#{SAMPLE_COLUMN}-#{s}\" }\n\n    show do\n      title \" Centrifuge Columns for #{CENTRIFUGE_TIME}\"\n      warning extra_warning if extra_warning\n      warning 'Ensure both tube caps are tightly closed'\n      raw centrifuge_proc('Column', columns, CENTRIFUGE_TIME, '', AREA)\n      note display_balance_tubes_svg\n      check flow_instructions if flow_instructions\n    end\n  end\n\n  def prepare_buffers\n    show do\n      title \"Centrifuge #{DTT} and #{SA_WATER}\"\n      check \"Centrifuge \u003cb\u003e#{DTT}\u003c/b\u003e and \u003cb\u003e#{SA_WATER}\u003c/b\u003e for \u003cb\u003e5 seconds\u003c/b\u003e.\"\n    end\n\n    # add sa water to dtt/trna\n    transfer_and_vortex(\n      \"Prepare #{DTT}\",\n      SA_WATER,\n      DTT,\n      25,\n      from_svg: :E4_open,\n      to_svg: :E0_open_dry\n    )\n\n    # add dtt solution to lysis buffer\n\n    lysis_buffers = operations.map { |op| \"#{LYSIS_BUFFER}-#{op.temporary[:output_sample]}\" }\n    transfer_and_vortex(\n      \"Prepare Lysis Buffers #{lysis_buffers.to_sentence}\",\n      DTT,\n      lysis_buffers,\n      10,\n      from_svg: :E0_open_wet,\n      to_svg: :E1_open,\n      skip_centrifuge: true\n    )\n\n    # prepare wash buffer 2 with ethanaol\n    transfer_and_vortex(\n      \"Prepare #{WASH2}\",\n      ETHANOL,\n      WASH2,\n      1600,\n      from_svg: :ethanol_container_open,\n      to_svg: :E3_open\n    )\n  end\n\n  SAMPLE_VOLUME = 350\n  # transfer plasma Samples into lysis buffer and incubate\n  def lyse_samples\n    operations.each do |op|\n      from_name = op.input_ref(INPUT).to_s\n      to_name = \"#{LYSIS_BUFFER}-#{op.temporary[:output_sample]}\"\n      from_svg = draw_svg(:sXXX_closed, svg_label: op.input_ref(INPUT).to_s.sub('-', \"\\n\"))\n      to_svg = draw_svg(:E1_closed, svg_label: \"#{LYSIS_BUFFER}\\n#{op.temporary[:output_sample]}\")\n      pre_transfer_validation_with_multiple_tries(from_name, to_name, from_svg, to_svg)\n      transfer_and_vortex(\n        \"Lyse Sample #{op.input_ref(INPUT)}\",\n        op.input_ref(INPUT).to_s,\n        \"#{LYSIS_BUFFER}-#{op.temporary[:output_sample]}\",\n        SAMPLE_VOLUME,\n        from_svg: :sXXX_open,\n        to_svg: :E1_open,\n        skip_centrifuge: true,\n        extra_check: \"Close #{from_name} tightly and discard into #{WASTE_PRE}.\"\n      )\n    end\n  end\n\n  def incubate_lysed_samples(ops)\n    lysed_samples = ops.map { |op| \"#{LYSIS_BUFFER}-#{op.temporary[:output_sample]}\" }\n    incubate(lysed_samples, '15 minutes')\n  end\n\n  ETHANOL_BUFFER_VOLUME = 1400\n  def add_ethanol\n    lysis_buffers = operations.map { |op| \"#{LYSIS_BUFFER}-#{op.temporary[:output_sample]}\" }\n    transfer_and_vortex(\n      \"Add #{ETHANOL} to samples #{lysis_buffers.to_sentence}\",\n      ETHANOL,\n      lysis_buffers,\n      ETHANOL_BUFFER_VOLUME,\n      from_svg: :ethanol_container_open,\n      to_svg: :E1_open,\n      skip_centrifuge: true\n    )\n  end\n\n  COLUMN_VOLUME = 800\n  def add_sample_to_column(op)\n    from = \"#{LYSIS_BUFFER}-#{op.temporary[:output_sample]}\"\n    to = \"#{SAMPLE_COLUMN}-#{op.temporary[:output_sample]}\"\n    from_svg = draw_svg(:E1_closed, svg_label: from.sub('-', \"\\n\"))\n    to_svg = draw_svg(:E5_empty_closed_w_empty_collector, svg_label: to.sub('-', \"\\n\"))\n    pre_transfer_validation_with_multiple_tries(from, to, from_svg, to_svg)\n    transfer_carefully(from, to, COLUMN_VOLUME, from_type: 'sample', to_type: 'column', from_svg: :E1_open, to_svg: :E5_full_open_w_empty_collector)\n  end\n\n  def change_collection_tubes\n    sample_columns = operations.map { |op| \"#{SAMPLE_COLUMN}-#{op.temporary[:output_sample]}\" }\n    from_svgs_rendered = sample_columns.map.with_index { |from_label, i| draw_svg(:E5_empty_closed_w_empty_collector, svg_label: from_label.sub('-', \"\\n\")).translate!(80 * i, 0) }\n    from_svg_final = SVGElement.new(children: from_svgs_rendered, boundx: 150, boundy: 200)\n    img = make_transfer(from_svg_final, many_collection_tubes(sample_columns.size), 300, '', '(Change Tubes)')\n    show do\n      title 'Change Collection Tubes'\n      note display_svg(img, 0.8)\n      sample_columns.each do |column|\n        check \"Transfer \u003cb\u003e#{column}\u003c/b\u003e to a new collection tube.\"\n      end\n      note 'Discard previous collection tubes.'\n    end\n  end\n\n  def add_wash_1\n    columns = operations.map { |op| column = \"#{SAMPLE_COLUMN}-#{op.temporary[:output_sample]}\" }\n    transfer_carefully(WASH2, columns, COLUMN_VOLUME, from_type: 'buffer', to_type: 'column', from_svg: :E2_open, to_svg: :E5_full_open_w_empty_collector)\n  end\n\n  def add_wash_2\n    columns = operations.map { |op| column = \"#{SAMPLE_COLUMN}-#{op.temporary[:output_sample]}\" }\n    transfer_carefully(WASH2, columns, COLUMN_VOLUME, from_type: 'buffer', to_type: 'column', from_svg: :E3_open, to_svg: :E5_full_open_w_empty_collector)\n  end\n\n  def transfer_carefully(from, to, volume_ul, from_type:, to_type:, from_svg: nil, to_svg: nil)\n    pipette, extra_note, setting_instruction = pipette_decision(volume_ul)\n    if to.is_a?(Array) # MULTI TRANSFER\n      img = nil\n      if from_svg \u0026\u0026 to_svg\n        from_label = from.split('-').join(\"\\n\")\n        from_svg_rendered = draw_svg(from_svg, svg_label: from_label)\n        to_labels = to.map { |t| t.split('-').join(\"\\n\") }\n        to_svgs_rendered = to_labels.map.with_index { |to_label, i| draw_svg(to_svg, svg_label: to_label).translate!(80 * i, 0) }\n        to_svg_final = SVGElement.new(children: to_svgs_rendered, boundx: 300, boundy: 300)\n        img = make_transfer(from_svg_rendered, to_svg_final, 300, \"#{volume_ul}ul\", \"(#{pipette})\")\n      end\n      show do\n        title \"Add #{from_type || from} to each #{to_type + ' ' + to.to_sentence || to}\"\n        check setting_instruction\n        note \"\u003cb\u003eCarefully\u003c/b\u003e open #{to_type.pluralize(to)} \u003cb\u003e#{to.to_sentence}\u003c/b\u003e lid.\"\n        to.each do |t|\n          check \"\u003cb\u003eCarefully\u003c/b\u003e Add \u003cb\u003e#{volume_ul}uL\u003c/b\u003e of #{from_type} \u003cb\u003e#{from}\u003c/b\u003e to \u003cb\u003e#{t}\u003c/b\u003e using a #{pipette} pipette.\"\n          check 'Discard pipette tip.'\n        end\n        note extra_note if extra_note\n        note display_svg(img, 0.75) if img\n        note \"\u003cb\u003eSlowly\u003c/b\u003e close lid of \u003cb\u003e#{to.to_sentence}\u003c/b\u003e\"\n      end\n    else # SINGLE TRANSFER\n      img = nil\n      if from_svg \u0026\u0026 to_svg\n        from_label = from.split('-').join(\"\\n\")\n        from_svg_rendered = draw_svg(from_svg, svg_label: from_label)\n        to_label = to.split('-').join(\"\\n\")\n        to_svg_rendered = draw_svg(to_svg, svg_label: to_label)\n        img = make_transfer(from_svg_rendered, to_svg_rendered, 300, \"#{volume_ul}ul\", \"(#{pipette})\")\n      end\n      show do\n        title \"Add #{from_type || from} to #{to_type + ' ' + to || to}\"\n        check setting_instruction\n        note \"\u003cb\u003eCarefully\u003c/b\u003e open #{to_type} \u003cb\u003e#{to}\u003c/b\u003e lid.\"\n        check \"\u003cb\u003eCarefully\u003c/b\u003e Add \u003cb\u003e#{volume_ul}uL\u003c/b\u003e of #{from_type} \u003cb\u003e#{from}\u003c/b\u003e to \u003cb\u003e#{to}\u003c/b\u003e using a #{pipette} pipette.\"\n        note extra_note if extra_note\n        note display_svg(img, 0.75) if img\n        check 'Discard pipette tip.'\n        note \"\u003cb\u003eSlowly\u003c/b\u003e close lid of \u003cb\u003e#{to}\u003c/b\u003e\"\n      end\n    end\n  end\n\n  def transfer_column_to_e6\n    show do\n      title 'Transfer Columns'\n      warning 'Make sure the bottom of the E5 columns did not touch any fluid from the previous collection tubes. When in doubt, centrifuge the tube for 1 more minute.'\n      note display_pre_elution_warning\n      operations.each do |op|\n        column = \"#{SAMPLE_COLUMN}-#{op.temporary[:output_sample]}\"\n        extract_tube = \"#{RNA_EXTRACT}-#{op.temporary[:output_sample]}\"\n        check \"Transfer column \u003cb\u003e#{column}\u003c/b\u003e to \u003cb\u003e#{extract_tube}\u003c/b\u003e\"\n      end\n    end\n  end\n\n  def elute\n    show do\n      title 'Add Elution Buffer'\n      warning 'Add buffer to center of columns'\n      columns = operations.map { |op| column = \"#{SAMPLE_COLUMN}-#{op.temporary[:output_sample]}\" }\n      note display_elution_addition\n      columns.each do |column|\n        check \"Add \u003cb\u003e60uL\u003c/b\u003e from \u003cb\u003e#{SA_WATER}\u003c/b\u003e to column \u003cb\u003e#{column}\u003c/b\u003e\"\n      end\n      check 'Close lid on column tightly.'\n    end\n  end\n\n  def finish_up\n    show do\n      title 'Prepare Samples for Storage'\n      operations.each do |op|\n        column = \"#{SAMPLE_COLUMN}-#{op.temporary[:output_sample]}\"\n        extract_tube = \"#{RNA_EXTRACT}-#{op.temporary[:output_sample]}\"\n        check \"Remove column \u003cb\u003e#{column}\u003c/b\u003e from \u003cb\u003e#{extract_tube}\u003c/b\u003e, and discard \u003cb\u003e#{column} in #{WASTE_PRE}\u003c/b\u003e\"\n      end\n      extract_tubes = sample_labels.map { |s| \"#{RNA_EXTRACT}-#{s}\" }\n      check \"Ensure lids are firmly closed for all of #{extract_tubes.to_sentence}.\"\n      check \"Place \u003cb\u003e#{extract_tubes.to_sentence}\u003c/b\u003e on cold rack\"\n    end\n  end\n\n  def store\n    show do\n      title 'Store Items'\n      extract_tubes = sample_labels.map { |s| \"#{RNA_EXTRACT}-#{s}\" }\n      note \"Store \u003cb\u003e#{extract_tubes.to_sentence}\u003c/b\u003e in the fridge on a cold rack if the amplification module will proceed immediately.\"\n      note \"Store \u003cb\u003e#{extract_tubes.to_sentence}\u003c/b\u003e in -20C freezer if proceeding with the amplification module later.\"\n    end\n  end\n\n  def cleanup\n    show do\n      title 'Clean up Waste'\n      warning \"DO NOT dispose of liquid waste and bleach into #{GuSCN_WASTE}, this can produce dangerous gas.\"\n      bullet 'Dispose of liquid waste in bleach down the sink with running water.'\n      bullet \"Dispose of remaining tubes into #{WASTE_PRE}.\"\n      bullet \"Dispose of #{GuSCN_WASTE} in the manner that you are trained to.\"\n    end\n\n    show do\n      title 'Clean Biosafety Cabinet (BSC)'\n      note 'Place items in the BSC off to the side.'\n      note 'Spray surface of BSC with 10% bleach. Wipe clean using paper towel.'\n      note 'Spray surface of BSC with 70% ethanol. Wipe clean using paper towel.'\n      note \"After cleaning, dispose of gloves and paper towels in #{WASTE_PRE}.\"\n    end\n  end\n\n  def conclusion(_myops)\n    show do\n      title 'Thank you!'\n      note 'You may start the next protocol immediately, or you may take a short break and come back.'\n    end\n  end\n\n  def remove_outer_layer\n    show do\n      title 'Remove outer Layer of Gloves'\n      check \"Remove outer layer of gloves and discard them into #{WASTE_PRE}\"\n    end\n  end\nend\n","precondition":"eval Library.find_by_name(\"OLAScheduling\").code(\"source\").content\nextend OLAScheduling\n\nBATCH_SIZE = 2\ndef precondition(op)\n  schedule_same_kit_ops(op)\n  true\nend","cost_model":"def cost(op)\n  { labor: 0, materials: 0 }\nend","documentation":"Blood CD4+ cells are negatively selected and lysed. Magnetic beads and antibodies are used to separate unwanted cells.","test":"","timing":null}},{"sample_types":[{"id":1,"name":"OLASimple Sample","description":"Patient sample and OLA kit","created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","field_types":[{"id":1,"parent_id":1,"name":"Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]},{"id":2,"parent_id":1,"name":"Secondary Patient ID","ftype":"string","choices":null,"array":false,"required":false,"created_at":"2020-06-15T09:36:08.000-07:00","updated_at":"2020-06-15T09:36:08.000-07:00","parent_class":"SampleType","role":null,"part":null,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"allowable_field_types":[],"sample_types":[],"object_types":[]}]}],"object_types":[{"id":7,"name":"OLA plasma","description":"Patient plasma in tube identified as SXXX. Starting point for OLA Simple RT-PCR workflow.","min":0,"max":1,"handler":"sample_container","safety":"No safety information","cleanup":"No cleanup information","data":"No data","vendor":"No vendor information","created_at":"2020-06-15T09:36:09.000-07:00","updated_at":"2020-06-15T09:36:09.000-07:00","unit":"OLASimple Sample","cost":0.01,"release_method":"return","release_description":"","sample_type_id":1,"image":null,"prefix":"","rows":null,"columns":null,"sample_type_name":"OLASimple Sample"}],"operation_type":{"name":"OLASimple Sample Preparation","category":"OLASimple","deployed":false,"on_the_fly":false,"field_types":[{"ftype":"sample","role":"output","name":"Patient Sample","sample_types":["OLASimple Sample"],"object_types":["OLA plasma"],"part":false,"array":false,"routing":"S","preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"string","role":"input","name":"Patient Sample Identifier","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null},{"ftype":"string","role":"input","name":"Kit Identifier","sample_types":[],"object_types":[],"part":false,"array":false,"routing":null,"preferred_operation_type_id":null,"preferred_field_type_id":null,"choices":null}],"protocol":"# frozen_string_literal: true\n\nneeds 'OLASimple/OLAConstants'\nneeds 'OLASimple/OLAKitIDs'\nneeds 'OLASimple/OLAGraphics'\nneeds 'OLASimple/SVGGraphics'\nneeds 'OLASimple/OLALib'\nneeds 'OLASimple/JobComments'\n\nclass Protocol\n  include OLALib\n  include OLAGraphics\n  include FunctionalSVG\n  include OLAKitIDs\n  include OLAConstants\n  include JobComments\n\n  AREA = PRE_PCR\n\n  OUTPUT = 'Patient Sample'\n  PATIENT_ID_INPUT = 'Patient Sample Identifier'\n  KIT_ID_INPUT = 'Kit Identifier'\n\n  UNIT = 'S'\n  OUTPUT_COMPONENT = ''\n  PLASMA_LOCATION = '-80 freezer'\n  SAMPLE_VOLUME = 380\n\n  def main\n    operations.make\n    operations.each_with_index do |op, i|\n      if debug\n        op.temporary[OLAConstants::PATIENT_KEY] = \"patientid#{i}\"\n        op.temporary[OLAConstants::KIT_KEY] = 'K001'\n      else\n        op.temporary[OLAConstants::PATIENT_KEY] = op.input(PATIENT_ID_INPUT).value\n        op.temporary[OLAConstants::KIT_KEY] = op.input(KIT_ID_INPUT).value\n      end\n    end\n\n    kit_groups = operations.group_by { |op| op.temporary[OLAConstants::KIT_KEY] }\n\n    introduction\n    record_technician_id\n    safety_warning(AREA)\n    required_equipment\n    clean_area(AREA)\n\n    kit_groups.each do |kit_num, ops|\n      next unless check_batch_size(ops)\n\n      first_module_setup(ops, kit_num)\n      set_output_components_and_units(ops, OUTPUT, OUTPUT_COMPONENT, UNIT)\n\n      this_package = \"#{kit_num}#{UNIT}\"\n      retrieve_package(this_package)\n      package_validation_with_multiple_tries(this_package)\n      open_package(this_package, ops)\n      retrieve_plasma(ops)\n      _, expected_plasma_samples = plasma_tubes(ops)\n      sample_validation_with_multiple_tries(expected_plasma_samples)\n      wait_for_thaw\n      transfer_plasma(ops)\n      remove_outer_layer\n      disinfect\n      store(ops)\n    end\n    accept_comments\n    conclusion(operations)\n    {}\n  end\n\n  # Since this is the first protocol in the workflow, we\n  # pause here to link the incoming patient ids to the kit sample numbers\n  # in a coherent and deterministic way.\n  #\n  # Makes the assumptions that all operations here are from the same kit\n  # with output items made, and have a suitable batch size\n  def first_module_setup(ops, kit_num)\n    check_batch_size(ops)\n    assign_sample_aliases_from_kit_id(ops, kit_num)\n\n    data_associations = []\n    ops.each do |op|\n      output_item = op.output(OUTPUT).item\n      data_associations \u003c\u003c output_item.associate(OLAConstants::KIT_KEY, op.temporary[OLAConstants::KIT_KEY])\n      data_associations \u003c\u003c output_item.associate(OLAConstants::SAMPLE_KEY, op.temporary[OLAConstants::SAMPLE_KEY])\n      data_associations \u003c\u003c output_item.associate(OLAConstants::PATIENT_KEY, op.temporary[OLAConstants::PATIENT_KEY])\n    end\n\n    DataAssociation.import data_associations, on_duplicate_key_update: [:object]\n  end\n\n  # Assigns sample aliases in order of patient id. each operation must have op.temporary[:patient] set.\n  # Sample alias assignment is placed in op.temporary[:sample_num] for each op.\n  #\n  # requires that \"operations\" input only contains operations from a single kit\n  def assign_sample_aliases_from_kit_id(operations, kit_id)\n    operations = operations.sort_by { |op| op.temporary[OLAConstants::PATIENT_KEY] }\n    sample_nums = sample_nums_from_kit_num(extract_kit_number(kit_id))\n    operations.each_with_index do |op, i|\n      op.temporary[OLAConstants::SAMPLE_KEY] = sample_num_to_id(sample_nums[i])\n    end\n  end\n\n  def check_batch_size(ops)\n    if ops.size \u003e OLAConstants::BATCH_SIZE\n      ops.each do |op|\n        op.error(:batch_size_too_big, \"operations.size operations batched with #{kit_num}, but max batch size is #{BATCH_SIZE}.\")\n      end\n      false\n    else\n      true\n    end\n  end\n\n  def introduction\n    show do\n      title 'Welcome to OLASimple Sample Preparation'\n      note 'In this protocol you will transfer a specific volume of patient plasma into barcoded sample tubes.'\n    end\n  end\n\n  def required_equipment\n    show do\n      title 'You will need the following supplies in the BSC'\n      materials = [\n        'P1000 pipette and filter tips',\n        'P200 pipette and filter tips',\n        'P20 pipette and filter tips',\n        'Pipette controller and 10mL serological pipette',\n        'gloves',\n        'Vortex mixer',\n        'Minifuge',\n        'Cold tube rack',\n        '70% v/v Ethanol spray for cleaning',\n        '10% v/v Bleach spray for cleaning',\n        'Molecular grade ethanol'\n      ]\n      materials.each do |m|\n        check m\n      end\n    end\n  end\n\n  def retrieve_package(this_package)\n    show do\n      title \"Retrieve Package #{this_package.bold}\"\n      check \"Grab #{this_package} from the #{FRIDGE_PRE} and place inside the BSC\"\n      # check 'Remove the \u003cb\u003eoutside layer\u003c/b\u003e of gloves (since you just touched the handle).'\n      # check 'Put on a new outside layer of gloves.'\n    end\n  end\n\n  def open_package(this_package, ops)\n    show_open_package(this_package, '', 0) do\n      img = kit_image(ops)\n      check 'Check that the following are in the pack:'\n      note display_svg(img, 0.75)\n    end\n  end\n\n  def kit_image(ops)\n    tubes, = kit_tubes(ops)\n    grid = SVGGrid.new(tubes.size, 1, 80, 100)\n    tubes.each_with_index do |svg, i|\n      grid.add(svg, i, 0)\n    end\n    SVGElement.new(children: [grid], boundx: 1000, boundy: 300)\n  end\n\n  def retrieve_plasma(ops)\n    tubes, plasma_ids = plasma_tubes(ops)\n    grid = SVGGrid.new(tubes.size, 1, 250, 100)\n    tubes.each_with_index do |svg, i|\n      grid.add(svg, i, 0)\n    end\n    img = SVGElement.new(children: [grid], boundx: 1000, boundy: 300).translate(100, 0)\n    show do\n      title 'Retrieve Plasma samples'\n      note \"Retrieve plasma samples labeled #{plasma_ids.to_sentence.bold}.\"\n      note \"Patient samples are located in the #{PLASMA_LOCATION.bold}.\"\n      note display_svg(img, 0.75)\n    end\n  end\n\n  def wait_for_thaw\n    show do\n      title 'Wait for Plasma to thaw'\n      note 'Let plasma sit at room temperature to thaw for 5 minutes.'\n      check 'Set a timer.'\n      note 'Built in timer is available in the top left.'\n      note 'Plasma should be completely thawed and mixed before pipetting to ensure concentration of virus is homogeneous.'\n    end\n  end\n\n  def transfer_plasma(ops)\n    from_tubes_open, from_names = plasma_tubes_opened(ops)\n    to_tubes_open, to_names = kit_tubes_opened(ops)\n    from_tubes, from_names = plasma_tubes(ops)\n    to_tubes, to_names = kit_tubes(ops)\n    ops.each_with_index do |_op, i|\n      pre_transfer_validation_with_multiple_tries(from_names[i], to_names[i], from_tubes[i], to_tubes[i])\n      transfer_img = make_transfer(from_tubes_open[i], to_tubes_open[i], 250, \"#{SAMPLE_VOLUME}ul\", \"(#{P1000_PRE})\").translate(100, 0)\n      show do\n        title \"Transfer #{from_names[i]} to #{to_names[i]}\"\n        note \"Use a #{P1000_PRE} pipette and set it to \u003cb\u003e[3 8 0]\u003c/b\u003e.\"\n        check \"Transfer \u003cb\u003e#{SAMPLE_VOLUME}uL\u003c/b\u003e from \u003cb\u003e#{from_names[i]}\u003c/b\u003e to \u003cb\u003e#{to_names[i]}\u003c/b\u003e using a #{P1000_PRE} pipette.\"\n        note display_svg(transfer_img, 0.75)\n        check \"Discard pipette tip into #{WASTE_PRE}\"\n        check \"Close both tubes.\"\n      end\n    end\n  end\n  \n  def remove_outer_layer\n    show do\n      title 'Remove outer Layer of Gloves'\n      check \"Remove outer layer of gloves and discard them into #{WASTE_PRE}\"\n    end\n  end\n\n  def store(ops)\n    show do\n      title 'Store Items'\n      sample_tubes = sample_labels.map { |s| \"#{UNIT}-#{s}\" }\n      _, plasma_tube_names = plasma_tubes(ops)\n      check \"Return #{plasma_tube_names.to_sentence} to #{PLASMA_LOCATION}.\"\n      note \"Leave \u003cb\u003e#{sample_tubes.to_sentence}\u003c/b\u003e in the BSC for immediate continuation.\"\n    end\n  end\n\n  def cleanup\n    show do\n      title 'Clean Biosafety Cabinet (BSC)'\n      note 'Place items in the BSC off to the side.'\n      note 'Spray surface of BSC with 10% bleach. Wipe clean using paper towel.'\n      note 'Spray surface of BSC with 70% ethanol. Wipe clean using paper towel.'\n    end\n  end\n\n  def conclusion(_myops)\n    show do\n      title 'Thank you!'\n      note 'You will start the next protocol immediately.'\n    end\n  end\n\n  def kit_tubes(ops)\n    tube_names = ops.map { |op| \"#{UNIT}-#{op.temporary[OLAConstants::SAMPLE_KEY]}\" }\n    tubes = []\n    tube_names.each_with_index do |s, _i|\n      tubes \u003c\u003c draw_svg(:empty_sxx, svg_label: s.split('-').join(\"\\n\"), svg_label_initial_offset: -25)\n    end\n    [tubes, tube_names]\n  end\n\n  def plasma_tubes(ops)\n    plasma_ids = ops.map { |op| op.temporary[OLAConstants::PATIENT_KEY] }\n    tubes = []\n    plasma_ids.each_with_index do |s, _i|\n      tubes \u003c\u003c draw_svg(:plasma_sample_closed, svg_label: \"\\n\\n\\n\\n\\n\" + s)\n    end\n    [tubes, plasma_ids]\n  end\n\n  def kit_tubes_opened(ops)\n    tube_names = ops.map { |op| \"#{UNIT}-#{op.temporary[OLAConstants::SAMPLE_KEY]}\" }\n    tubes = []\n    tube_names.each_with_index do |s, _i|\n      tubes \u003c\u003c draw_svg(:empty_sxx_opened, svg_label: s.split('-').join(\"\\n\"))\n    end\n    [tubes, tube_names]\n  end\n\n  def plasma_tubes_opened(ops)\n    plasma_ids = ops.map { |op| op.temporary[OLAConstants::PATIENT_KEY] }\n    tubes = []\n    plasma_ids.each_with_index do |s, _i|\n      tubes \u003c\u003c draw_svg(:plasma_sample_opened, svg_label: \"\\n\\n\\n\\n\" + s)\n    end\n    [tubes, plasma_ids]\n  end\n\n  def sample_labels\n    operations.map { |op| op.temporary[OLAConstants::SAMPLE_KEY] }\n  end\n\n  def empty_sxx\n    tube(opened: false)\n  end\n\n  def empty_sxx_opened\n    tube(opened: true)\n  end\n\n  def plasma_sample_closed\n    svg_from_html(\n      '\u003csvg\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1{fill:#efe7a3;}.cls-2,.cls-3{fill:none;}.cls-3,.cls-4{stroke:#231f20;stroke-miterlimit:10;stroke-width:0.5px;}.cls-4{fill:#fff;}\u003c/style\u003e\u003c/defs\u003e\u003ctitle\u003ePlasma_tube_closed_lid\u003c/title\u003e\u003cpath class=\"cls-1\" d=\"M386.8,334.93a13.86,13.86,0,0,1-13.24-2v45a12,12,0,0,0,12,12h19.85a12,12,0,0,0,12-12V309.32C405.29,313.67,397.2,331.15,386.8,334.93Z\" transform=\"translate(-373.31 -222.24)\"/\u003e\u003cpath class=\"cls-2\" d=\"M376.55,250.87\" transform=\"translate(-373.31 -222.24)\"/\u003e\u003cpath class=\"cls-3\" d=\"M8.85,35.78H35.5a8.6,8.6,0,0,1,8.6,8.6v111a12,12,0,0,1-12,12H12.25a12,12,0,0,1-12-12v-111a8.6,8.6,0,0,1,8.6-8.6Z\"/\u003e\u003cpath class=\"cls-4\" d=\"M395.48,222.49c-12.11,0-21.93,3-21.93,6.74v28.22c0,3.72,9.82,6.74,21.93,6.74s21.93-3,21.93-6.74V229.23C417.41,225.51,407.59,222.49,395.48,222.49Z\" transform=\"translate(-373.31 -222.24)\"/\u003e\u003cellipse class=\"cls-4\" cx=\"22.18\" cy=\"6.87\" rx=\"16.97\" ry=\"4.01\"/\u003e\u003cline class=\"cls-3\" x1=\"4.12\" y1=\"12.2\" x2=\"4.12\" y2=\"35.31\"/\u003e\u003cline class=\"cls-3\" x1=\"22.97\" y1=\"16\" x2=\"22.97\" y2=\"39.11\"/\u003e\u003cline class=\"cls-3\" x1=\"41.55\" y1=\"10.88\" x2=\"41.55\" y2=\"33.99\"/\u003e\u003cline class=\"cls-3\" x1=\"32.79\" y1=\"14.89\" x2=\"32.79\" y2=\"38\"/\u003e\u003cline class=\"cls-3\" x1=\"13.15\" y1=\"14.89\" x2=\"13.15\" y2=\"38\"/\u003e\u003c/svg\u003e'\n    ).translate!(0,70)\n  end\n\n  def plasma_sample_opened\n    svg_from_html(\n      '\u003csvg\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1{fill:#efe7a3;}.cls-2,.cls-3{fill:none;}.cls-2,.cls-4{stroke:#010101;stroke-miterlimit:10;stroke-width:0.5px;}.cls-4{fill:#fff;}\u003c/style\u003e\u003c/defs\u003e\u003ctitle\u003ePlasma_tube_open_lid\u003c/title\u003e\u003cpath class=\"cls-1\" d=\"M359.1,326.3a13.89,13.89,0,0,1-13.2-2v45a12,12,0,0,0,12,12h19.9a12,12,0,0,0,12-12V300.7C377.6,305.1,369.5,322.5,359.1,326.3Z\" transform=\"translate(-345.45 -230.85)\"/\u003e\u003cpath class=\"cls-2\" d=\"M384,249.9V237c0-3.3-7.3-5.9-16.3-5.9s-16.3,2.7-16.3,5.9v12.9a8.68,8.68,0,0,0-5.7,8.1V369a12,12,0,0,0,12,12h19.9a12,12,0,0,0,12-12V258A8.55,8.55,0,0,0,384,249.9Z\" transform=\"translate(-345.45 -230.85)\"/\u003e\u003cpath class=\"cls-3\" d=\"M348.8,242.2\" transform=\"translate(-345.45 -230.85)\"/\u003e\u003cpath class=\"cls-4\" d=\"M423.4,340.1c-12.1,0-21.9,3-21.9,6.7V375c0,3.7,9.8,6.7,21.9,6.7s21.9-3,21.9-6.7V346.8C445.3,343.1,435.5,340.1,423.4,340.1Z\" transform=\"translate(-345.45 -230.85)\"/\u003e\u003cellipse class=\"cls-4\" cx=\"77.95\" cy=\"115.85\" rx=\"17\" ry=\"4\"/\u003e\u003cline class=\"cls-2\" x1=\"59.95\" y1=\"121.15\" x2=\"59.95\" y2=\"144.25\"/\u003e\u003cline class=\"cls-2\" x1=\"78.75\" y1=\"124.95\" x2=\"78.75\" y2=\"148.05\"/\u003e\u003cline class=\"cls-2\" x1=\"97.35\" y1=\"119.85\" x2=\"97.35\" y2=\"142.95\"/\u003e\u003cline class=\"cls-2\" x1=\"88.55\" y1=\"123.85\" x2=\"88.55\" y2=\"146.95\"/\u003e\u003cline class=\"cls-2\" x1=\"68.95\" y1=\"123.85\" x2=\"68.95\" y2=\"146.95\"/\u003e\u003cellipse class=\"cls-4\" cx=\"22.35\" cy=\"6.05\" rx=\"12.6\" ry=\"3.5\"/\u003e\u003c/svg\u003e',\n      100\n    ).translate!(0,70)\n  end\n\n  def tube(opened: false, contents: 'empty')\n    tube = SVGElement.new(boundx: 46.92, boundy: 140)\n    \n    if contents == 'empty' \u0026\u0026 !opened\n      tube.add_child(\n        '\u003csvg\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1_tube{fill:#fff;}.cls-1_tube,.cls-2_tube{stroke:#231f20;stroke-miterlimit:10;stroke-width:0.5px;}.cls-2_tube{fill:none;}\u003c/style\u003e\u003c/defs\u003e\u003crect class=\"cls-1_tube\" x=\"5.5\" y=\"2.53\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\"/\u003e\u003crect class=\"cls-1_tube\" x=\"0.25\" y=\"0.25\" width=\"42.88\" height=\"7.39\" rx=\"2.36\" ry=\"2.36\"/\u003e\u003cpath class=\"cls-2_tube\" d=\"M411.36,243.86\" transform=\"translate(-371.69 -233.08)\"/\u003e\u003cpath class=\"cls-2_tube\" d=\"M412,245.43a3.88,3.88,0,0,0,3.29-2.79,4.85,4.85,0,0,0-.42-4.28\" transform=\"translate(-371.69 -233.08)\"/\u003e\u003cpath class=\"cls-2_tube\" d=\"M412,247.27a6,6,0,0,0,6.16-4.86,5.79,5.79,0,0,0-3.17-7\" transform=\"translate(-371.69 -233.08)\"/\u003e\u003crect class=\"cls-1_tube\" x=\"0.53\" y=\"11.4\" width=\"42.32\" height=\"4.79\" rx=\"2.4\" ry=\"2.4\"/\u003e\u003cpath class=\"cls-2_tube\" d=\"M374.62,249.27V304.5l11.32,68c.8,4.79,4.61,5.75,7.86,5.09s4.39-5.33,4.39-5.33l13.16-67.79V249.27Z\" transform=\"translate(-371.69 -233.08)\"/\u003e\u003c/svg\u003e'\n        )\n    elsif contents == 'empty' \u0026\u0026 opened\n      tube.add_child(\n        '\u003csvg\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1_tube{fill:none;}.cls-1_tube,.cls-2_tube{stroke:#231f20;stroke-miterlimit:10;stroke-width:0.5px;}.cls-2_tube{fill:#fff;}\u003c/style\u003e\u003c/defs\u003e\u003ctitle\u003eUntitled-1\u003c/title\u003e\u003cpath class=\"cls-1_tube\" d=\"M410.51,263.07\" transform=\"translate(-371.13 -215.85)\"/\u003e\u003cpath class=\"cls-1_tube\" d=\"M411.12,264.64a3.88,3.88,0,0,0,3.29-2.79,4.85,4.85,0,0,0-.42-4.28\" transform=\"translate(-371.13 -215.85)\"/\u003e\u003cpath class=\"cls-1_tube\" d=\"M411.12,266.47a6,6,0,0,0,6.16-4.86,5.79,5.79,0,0,0-3.17-7\" transform=\"translate(-371.13 -215.85)\"/\u003e\u003crect class=\"cls-2_tube\" x=\"0.25\" y=\"47.83\" width=\"42.32\" height=\"4.79\" rx=\"2.4\" ry=\"2.4\"/\u003e\u003cpath class=\"cls-1_tube\" d=\"M373.78,268.47V323.7l11.32,68c.8,4.79,4.61,5.75,7.86,5.09s4.39-5.33,4.39-5.33l13.16-67.79V268.47Z\" transform=\"translate(-371.13 -215.85)\"/\u003e\u003crect class=\"cls-2_tube\" x=\"394.99\" y=\"233.39\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(236.03 -411.02) rotate(84.22)\"/\u003e\u003crect class=\"cls-2_tube\" x=\"393.55\" y=\"233.89\" width=\"42.88\" height=\"7.39\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(238.41 -415.09) rotate(84.22)\"/\u003e\u003c/svg\u003e'\n        )\n    end\n    tube.translate!(0,70)\n  end\nend\n","precondition":"eval Library.find_by_name(\"OLAScheduling\").code(\"source\").content\nextend OLAScheduling\n\ndef precondition(_op)\n  if _op.plan \u0026\u0026 _op.plan.status != 'planning'\n    schedule_same_kit_ops(_op)\n  end\n  true\nend","cost_model":"def cost(_op)\n  { labor: 0, materials: 0 }\nend","documentation":"Documentation here. Start with a paragraph, not a heading or title, as in most views, the title will be supplied by the view.","test":"","timing":null}},{"library":{"name":"JobComments","category":"OLASimple","code_source":"# frozen_string_literal: true\n\nmodule JobComments\n  COMMENT_KEY = 'Technician Comment'\n\n  def accept_comments\n    comments = ask_for_comments\n    associate_comments_to_operation_and_plan comments unless comments.blank?\n  end\n\n  # Associates the comment entered by the lab technician to the operations and plans\n  # of the protocol that uses this library.\n  #\n  # @param [String] the feedback entered by the lab technician.\n  def associate_comments_to_operation_and_plan(comments)\n    full_comment_key = COMMENT_KEY + \"- job #{jid}\"\n\n    operations.each do |op|\n      op.associate(full_comment_key, comments)\n      op.plan.associate(full_comment_key, comments)\n    end\n  end\n\n  def ask_for_comments\n    comment = show do\n      title 'Leave Comments'\n\n      note 'If anything out of the ordinary happened during this protocol, make a note of it here.'\n\n      warning 'Be as specific as possible, mentioning names of steps and labels of involved items when appropriate.'\n      warning 'Wash hands well before using keyboard or tablet.'\n\n      get 'text', var: 'response_key', label: 'Enter your feedback here', default: ''\n    end\n    comment[:response_key] # return\n  end\nend\n"}},{"library":{"name":"NetworkRequests","category":"OLASimple","code_source":"# This library allows complex network requests to be made from protocols\n# so that external APIs can be consulted during protocol execution\n\nrequire 'net/https'\nmodule NetworkRequests\n  \n  # make post request to a URL, sending a Upload object as a file\n  # returns the http response\n  def post_file(post_url, key, aq_upload)\n    file_url = aq_upload.url\n    file_name = aq_upload.name\n    file_obj = URI.open(file_url)\n    \n    uri = URI(post_url)\n    req = Net::HTTP::Post.new(uri)\n    req.set_form([[key, file_obj, {'filename': file_name}]], 'multipart/form-data')\n    \n    res = Net::HTTP.start(uri.hostname, uri.port) do |http|\n      http.request(req)\n    end\n    return res\n  end\n  \nend"}},{"library":{"name":"OLAConstants","category":"OLASimple","code_source":"needs \"OLASimple/OLAKits\"\n\nmodule OLAConstants\n  include OLAKits\n  \n  ##########################################\n  # TECHNICAL (SHOULD NOT NEED TO CHANGE)\n  ##########################################\n\n  OLA_IP_API_URL = \"http://ola_image_processing:5000/api/processstrips\" # URL of OLASimple strip image processing service \n\n  ##########################################\n  # DATA ASSOCIATION KEYS (DO NOT CHANGE)\n  ##########################################\n  #\n  PATIENT_KEY = :patient\n  TECH_KEY = :technician\n  ALIAS_KEY = :alias\n  KIT_KEY = :kit\n  UNIT_KEY = :unit\n  COMPONENT_KEY = :component\n  SAMPLE_KEY = :sample\n  SCANNED_IMAGE_UPLOAD_KEY = :scanned_image_upload\n  SCANNED_IMAGE_UPLOAD_ID_KEY = :scanned_image_upload_id\n\n  ##########################################\n  # KIT SELECTION\n  ##########################################\n\n  KIT_SELECTION = OLAKits.rt_pcr()\n  KIT_NAME = KIT_SELECTION[\"name\"]\n  SAMPLE_PREP_UNIT = KIT_SELECTION[\"sample prep\"]\n  EXTRACTION_UNIT = KIT_SELECTION[\"extraction\"]\n  PCR_UNIT = KIT_SELECTION[\"pcr\"]\n  LIGATION_UNIT = KIT_SELECTION[\"ligation\"]\n  DETECTION_UNIT = KIT_SELECTION[\"detection\"]\n  ANALYSIS_UNIT = KIT_SELECTION[\"analysis\"]\n  COLORS = DETECTION_UNIT[\"Mutation Colors\"]\n\n  ##########################################\n  # LAB SPECIFICATIONS\n  ##########################################\n  SAVE_SAMPLES = false\n  SUPERVISOR = \"Nuttada P. or Cami C.\"\n\n  ##########################################\n  # KIT SPECIFICATIONS\n  ##########################################\n\n  # mutations\n  MUTATIONKEY = :mutations\n\n  # kit components\n  DILUENT_A = \"Diluent A\" # what to call the Diluent A tube (i.e. water)\n  STOP_MIX = \"stop mix\" # what to call the input samples (cell lysates)\n  GOLD_MIX = \"gold mix\"\n  STRIP = \"detection strip\"\n  STRIPS = STRIP.pluralize(10)\n  BAND = \"band\"\n  BANDS = \"bands\"\n  PANEL = \"panel\"\n  AQUARIUM = \"Aquarium\"\n  \n  BATCH_SIZE = 2 # Changing batch size must be done in OLAScheduling as well as here\n\n  ##########################################\n  # CODONS\n  ##########################################\n\n  pcr_pkg_color = \"STEELBLUE\"\n  lig_pkg_color = \"PALETURQUOISE\"\n  det_pkg_color = \"MEDIUMPURPLE\"\n  SAMPLE_PREP_PKG_NAME = \"sample prep package\"\n  PCR_PKG_NAME = \"PCR package\"\n  LIG_PKG_NAME = \"ligation package\"\n  DET_PKG_NAME = \"detection package\"\n\n  # names of sample field value and validate kit field types\n  SAMPLE_PREP_FIELD_VALUE = \"Sample Prep Pack\"\n  PCR_FIELD_VALUE = \"PCR Pack\"\n  LIGATION_FIELD_VALUE = \"Ligation Pack\"\n  DETECTION_FIELD_VALUE = \"Detection Pack\"\n  KIT_FIELD_VALUE = \"Kit\"\n  CODONS_FIELD_VALUE = \"Codons\"\n  CODON_COLORS_FIELD_VALUE = \"Codon Colors\"\n  NUM_SAMPLES_FIELD_VALUE = \"Number of Samples\"\n  NUM_SUB_PACKAGES_FIELD_VALUE = \"Number of Sub Packages\"\n  UNIT_NAME_FIELD_VALUE = \"Unit Name\"\n  COMPONENTS_FIELD_VALUE = \"Components\"\n\n  ##########################################\n  # TERMINOLOGY\n  ##########################################\n  \n  # areas\n  PRE_PCR = \"pre-PCR\"\n  POST_PCR = \"post-PCR\"\n\n  # kit samples\n  CELL_LYSATE = \"cell lysate\" # what to call the input samples (cell lysates)\n  PCR_SAMPLE = \"PCR tube\" # what to call the tubes for the PCR protocol\n  LIGATION_SAMPLE = \"ligation sample\"\n\n  # equipment\n  THERMOCYCLER = \"thermocycler\" # what to call the thermocycler\n  CENTRIFUGE_PRE = \"Minifuge\"\n  CENTRIFUGE_POST = \"Minifuge\"\n  PCR_RACK_PRE = \"PCR rack (in the #{PRE_PCR} area)\" # what to call the racks the PCR tubes go in\n  PCR_RACK_POST = \"PCR rack (in the #{POST_PCR} area)\" # what to call the racks the PCR tubes go in\n  PHOTOCOPIER = \"scanner\"\n  BASIC_MATERIALS_PRE = [\n      \"200uL pipette and filtered tips\",\n      \"20uL pipette and filtered tips\",\n      \"a spray bottle of 10% v/v bleach\",\n      \"a spray bottle of 70% v/v ethanol\",\n      \"a timer\",\n      \"latex gloves\"\n  ]\n  BASIC_MATERIALS_POST = [\n      \"200uL pipette and filtered tips\",\n      \"20uL pipette and filtered tips\",\n      \"a spray bottle of 10% v/v bleach\",\n      \"a spray bottle of 70% v/v ethanol\",\n      \"a timer\",\n      \"latex gloves\"\n  ]\n  TRASH_PRE = \"trash (in the #{PRE_PCR} area)\"\n  TRASH_POST = \"trash (in the #{POST_PCR} area)\"\n  WASTE_PRE = \"biohazard waste (red bag in the #{PRE_PCR} area)\"\n  WASTE_POST = \"temporary waste container in the hood\"\n  BENCH_PRE = \"bench in the #{PRE_PCR} area\"\n  BENCH_POST = \"bench in the #{POST_PCR} area\"\n  PACKAGE_PRE = \"package (#{PRE_PCR})\"\n  PACKAGE_POST = \"package (#{POST_PCR})\"\n  FRIDGE_PRE = \"fridge\"\n  FRIDGE_POST = \"fridge\"\n  P20_PRE = \"#{PRE_PCR} P20\"\n  P20_POST = \"#{POST_PCR} P20\"\n  P200_PRE = \"#{PRE_PCR} P200\"\n  P200_POST = \"#{POST_PCR} P200\"\n  P1000_PRE = \"#{PRE_PCR} P1000\"\n  P1000_POST = \"#{POST_PCR} P1000\"\n  WIPE = \"Paper towel\"\n  WIPE_PRE = WIPE\n  WIPE_POST = WIPE\n\n  # verbs\n  CENTRIFUGE_VERB = \"centrifuge\" # or spin?\n\n  PCR_CYCLE = \"OSPCR\"\n  LIG_CYCLE = \"OSLIG\"\n  STOP_CYCLE = \"OSSTOP\"\n  \n  def map_temporary_from_input(input, outputs, keys)\n    outputs = [outputs].flatten\n    keys = [keys].flatten\n    operations.each do |op|\n      input_item = op.input(input).item\n      outputs.each do |out|\n        keys.each do |k|\n          op.output(out).item.associate LOT, input_item.get(k)\n        end\n      end\n    end\n  end\n\n  def explicit_retrieve\n    operations.retrieve interactive: false\n\n    show do\n      title \"Retrieve the following items:\"\n\n      t = Table.new\n      input_items = operations.map {|op| op.inputs.map {|i| i.item}}.flatten\n      t.add_column(\"ID\", input_items.map {|i| i.id})\n      t.add_column(\"Type\", input_items.map {|i| i.object_type.name})\n      t.add_column(\"Location\", input_items.map {|i| i.location})\n      table t\n    end\n  end\nend\n"}},{"library":{"name":"OLAGraphics","category":"OLASimple","code_source":"# require_relative 'graphics'\nneeds \"OLASimple/SVGGraphics\"\nmodule OLAGraphics\n  include Graphics\n  include Graphics::MyGraphics\n\n  @@colors = [\"red\", \"yellow\", \"green\", \"blue\", \"purple\", \"gray\"]\n\n  def self.set_tube_colors(new_colors)\n    @@colrs = new_colors\n  end\n\n\n  #####################################\n  # BASICS\n  #####################################\n\n  def get_style\n    \u003c\u003cEOF\n      /* \u003c![CDATA[ */\n      \n      #svg .yellow path {\n          fill: #f7f9c2;\n      }\n      \n      #svg .white rect {\n          fill: #ffffff;\n      }\n      \n      #svg .gray path {\n          fill: #d4d4d4;\n      }\n      \n      #svg .blue path {\n          fill: #bdf8f9;\n      }\n      \n      #svg .red path {\n          fill: #ffc4c4;\n      }\n      \n      #svg .green path {\n          fill: #c4f9c2;\n      }\n      \n      #svg .purple path {\n          fill: #f1e0fc;\n      }\n\n      #svg .hidden {\n        opacity: 0.3;\n      }\n\n      #svg .yellowstrip rect {\n          fill: #f7f9c2;\n      }\n      \n      #svg .bluestrip rect {\n          fill: #bdf8f9;\n      }\n      \n      #svg .whitestrip rect {\n          fill: #ffffff;\n      }\n      \n      #svg .redstrip rect {\n          fill: #ffc4c4;\n      }\n      \n      #svg .graystrip rect {\n          fill: #d4d4d4;\n      }\n      \n      #svg .greenstrip rect {\n          fill: #c4f9c2;\n      }\n      \n      #svg .purplestrip rect {\n          fill: #f1e0fc;\n      }\n\n      #svg .redfluid path {\n        fill: #ff7c66;\n      }\n      \n      #svg .brownfluid path {\n        fill: #8B4513;\n      }\n\n      #svg .pinkfluid path {\n        fill: #ff8eec;\n      }\n      \n      #svg .palefluid path {\n          fill: #F2F5D1;\n      }\n      /* ]]\u003e */\nEOF\n  end\n\n  def display_svg(element, scale = 1)\n    element.style!(self.get_style)\n    element.svg(element.boundx, element.boundy, scale).to_str\n  end\n\n  # two labels on top of each other\n  def two_labels(text1, text2)\n    label1 = label(text1, \"font-size\".to_sym =\u003e 25)\n    label2 = label(text2, \"font-size\".to_sym =\u003e 25)\n    label2.align!('center-top')\n    label2.align_with(label1, 'center-bottom')\n    label2.translate!(0, 12)\n    SVGElement.new(children: [label1, label2], boundx: label1.boundx, boundy: label1.boundy * 2)\n  end\n\n  # make a tube label\n  def tube_label(kit, unit, component, sample)\n    self.two_labels(\"#{unit}#{component}\", \"#{sample}\")\n  end\n\n  def make_arrow(from, to, tlabel = nil, blabel = nil, tfontsize = 25, bfontsize = 25)\n    # make right arrow\n    top_label = label(tlabel, \"font-size\".to_sym =\u003e tfontsize)\n    bottom_label = label(blabel, \"font-size\".to_sym =\u003e bfontsize)\n    arrow = rarrow.scale(0.75)\n    arrow.align!('center-right')\n    arrow.align_with(to, 'center-left')\n    v1 = from.get_abs_anchor('center-right') - from.abs_anchor_vector\n    v2 = to.get_abs_anchor('center-left') - to.abs_anchor_vector\n    m = (v1 + v2) / 2.0\n    line = Line.new(*v1, *v2, 'black', 3)\n    unless top_label.nil?\n      top_label.translate!(*m)\n      top_label.align!('center-bottom').translate!(0, -10)\n    end\n    unless bottom_label.nil?\n      bottom_label.translate!(*m)\n      puts bottom_label\n      bottom_label.align!('center-top').translate!(0, 10)\n    end\n    myarrow = SVGElement.new(children: [line, arrow, bottom_label, top_label].compact)\n  end\n\n  def make_transfer(from, to, spacing, top_label, bottom_label)\n    to.align_with(from, 'center-right').align!('center-left')\n    to.translate!(spacing)\n    arrow = make_arrow(from, to, top_label, bottom_label)\n    elements = [arrow, from, to]\n    puts elements.map {|e| Vector[e.x, e.y] + e.get_abs_anchor('center-right')}\n    max_x = elements.map {|e| (Vector[e.x, e.y] + e.get_abs_anchor('center-right'))[0]}.max\n    max_y = elements.map {|e| (Vector[e.x, e.y] + e.get_abs_anchor('center-bottom'))[1]}.max\n    svg = SVGElement.new(\n        children: elements,\n        boundx: 1000,\n        boundy: 300,\n        )\n    svg.translate!(20)\n  end\n\n  def make_tube(tube, bottom_label, middle_label, fluid = nil, cropped_for_closed_tube = false, fluidclass: nil)\n    bottom_label = bottom_label.join(\"\\n\") if bottom_label.is_a?(Array)\n    middle_label = middle_label.join(\"\\n\") if middle_label.is_a?(Array)\n    img = SVGElement.new(boundx: tube.boundx, boundy: tube.boundy)\n    tube_group = tube\n    bottom_labels = bottom_label.split(\"\\n\")\n    middle_labels = middle_label.split(\"\\n\")\n\n    img.add_child(tube)\n    fluidImage = nil\n    if fluid == \"small\"\n      fluidImage = fluid_small\n    elsif fluid == \"medium\"\n      fluidImage = fluid_medium\n    elsif fluid == \"large\"\n      fluidImage = fluid_large\n    elsif fluid == \"powder\"\n      fluidImage = powder\n    end\n    puts fluid\n    fluidImage.new_class!(fluidclass) unless fluidImage.nil? or fluidclass.nil?\n    img.add_child(fluidImage) unless fluidImage.nil?\n    puts fluid\n    if bottom_label != \"\"\n      bl = nil\n      if bottom_labels.length == 2\n        bl = two_labels(*bottom_labels)\n      else\n        label = label(bottom_label, \"font-size\".to_sym =\u003e 25)\n        bl = label\n      end\n      bl.align!('center-top')\n      bl.align_with(tube, 'center-bottom')\n      bl.translate!(-5 * tube.xscale, 5 * tube.yscale)\n      tube.boundy = tube.boundy + bl.boundy\n      img.add_child(bl)\n    end\n\n    if middle_label != \"\"\n      ml = nil\n      if middle_labels.length == 2\n        ml = two_labels(*middle_labels)\n      else\n        ml = label(middle_label, \"font-size\".to_sym =\u003e 25)\n      end\n      ml.align!('center-center')\n      ml.align_with(tube, 'center-bottom')\n      ml.translate!(-9 * tube.xscale, -110 * tube.yscale)\n      img.add_child(ml)\n    end\n\n\n    img.boundx = tube.boundx\n    img.boundy = tube.boundy\n    if cropped_for_closed_tube\n      shift = 70\n      img.boundy = img.boundy - shift\n      img.group_children.translate!(0, -shift)\n    end\n    img.translate!(10)\n  end\n\n  #####################################\n  # LIGATIONS\n  #####################################\n\n  def stripwell(kit, unit, components, sample, open_tubes, apply_classes, hide, spacing)\n    open_tubes = open_tubes || []\n    hide = hide || []\n    apply_classes = apply_classes || []\n    num = components.length\n    grid = SVGGrid.new(num, 1, spacing, opentube.boundy)\n    grid.each_pos do |r, c|\n\n      # add label\n      tube_label = [\"#{unit}#{components[r]}\", \"#{sample}\"]\n      tube_type = closedtube\n      if open_tubes.include?(r)\n        tube_type = opentube\n      end\n      tube = make_tube(tube_type,\n                       \"\",\n                       tube_label,\n                       nil,\n                       false)\n      tube.new_class!(apply_classes[r])\n      if hide.include?(r)\n        tube = tube.g(classname: 'hidden')\n      end\n      grid.add(tube, r, c)\n    end\n    grid\n  end\n\n  def display_ligation_tubes(kit, unit, components, sample, colors, open_tubes = nil, hide = nil, spacing = 70)\n    \n    mystripwell = stripwell(kit, unit, components, sample, open_tubes, colors, hide, spacing).scale!(0.75)\n    myimage = SVGElement.new(boundx: 500, boundy: 190)\n    myimage.add_child(mystripwell)\n  end\n\n  def highlight_ligation_tube(i, kit, unit, components, sample, colors)\n    ligation_tubes = self.display_ligation_tubes(\n        kit, unit, components, sample, colors, [i], (0..components.length - 1).to_a.reject {|x| x == i})\n    ligation_tubes\n  end\n\n  def transfer_to_ligation_tubes_with_highlight(from, i, kit, unit, components, sample, colors, vol, bottom_label = nil)\n    bottom_label = bottom_label || \"\"\n    ligation_tubes = self.highlight_ligation_tube(i, kit, unit, components, sample, colors)\n    ligation_tubes.align_with(from, 'center-right').align!('center-left')\n    ligation_label = label(\"ligation tubes\", \"font-size\".to_sym =\u003e 25)\n    # ligation_label.align_with(ligation_tubes, 'center-bottom').align!('center-top')\n    svg = self.make_transfer(from, ligation_tubes, 300, \"#{vol}uL\", bottom_label)\n    svg.translate!(20)\n    svg.boundy = svg.boundy - 20\n    svg.boundx = 700\n    svg.boundy = 295\n    svg\n  end\n\n  #####################################\n  # DETECTION\n  #####################################\n\n  def display_strip_panel(kit, unit, components, sample, colors)\n    def panel kit, unit, components, sample, apply_classes\n      apply_classes = apply_classes || []\n      num = components.length\n      strip = make_strip(nil, \"\")\n      grid = SVGGrid.new(num, 1, 90, strip.boundy)\n      grid.each_pos do |r, c|\n\n        # add label\n        strip_label = self.tube_label(kit, unit, components[r], sample).scale(0.8)\n        strip = make_strip(strip_label, apply_classes[r] + \"strip\")\n        grid.add(strip, r, c)\n      end\n      grid.scale!(0.75)\n    end\n    \n    mypanel = panel(kit, unit, components, sample, colors)\n    mypanel.boundx = 600\n    mypanel\n  end\n\n  def display_panel_and_tubes(kit, panel_unit, tube_unit, components, sample, colors)\n    tubes = display_ligation_tubes(kit, tube_unit, components, sample, colors)\n    panel = display_strip_panel(kit, panel_unit, components, sample, colors)\n    tubes.align_with(panel, 'center-bottom')\n    tubes.align!('center-top')\n    tubes.translate!(0, -50)\n    img = SVGElement.new(children: [tubes, panel], boundy: 330, boundx: panel.boundx)\n  end\n\n  def make_strip mylabel, classname\n    mystrip = SVGElement.new(boundx: 83.1, boundy: 247.45)\n    mystrip.add_child(self.strip)\n    mystrip.add_child(self.striplabel.new_class(classname))\n    # mylabel = label(\"Strip\", \"font-size\".to_sym=\u003e20)\n    unless mylabel.nil?\n      mylabel.align_with(mystrip, 'center-top')\n      mylabel.align!('center-center')\n      mylabel.translate!(0, 20)\n      mystrip.add_child(mylabel)\n    end\n    mystrip\n  end\n\n  def detection_strip_diagram\n    img = SVGElement.new(boundx: 270, boundy: 350)\n    img.add_child(\u003c\u003cEOF\n     \u003cg id=\"Strip\"\u003e\n\t\u003cg\u003e\n\t\t\u003crect x=\"4.75\" fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"78.346\" height=\"242.948\"/\u003e\n\t\t\u003cline fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"0\" y1=\"247.448\" x2=\"4.75\" y2=\"242.948\"/\u003e\n\t\t\u003cpolygon fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"-0.067,4.777 4.75,0.001 4.75,242.948 0,247.448 \t\t\"/\u003e\n\t\t\u003cpolygon fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"74.917,247.448 0,247.448 4.75,242.948 83.096,242.948 \n\t\t\t\t\t\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003crect x=\"19.583\" y=\"49.433\" fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"46.667\" height=\"80\"/\u003e\n\t\t\u003crect x=\"27.083\" y=\"57.433\" fill=\"#FFFFFF\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"31.667\" height=\"64\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"27.083\" y1=\"121.433\" x2=\"19.583\" y2=\"129.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"58.75\" y1=\"121.433\" x2=\"66.25\" y2=\"129.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"58.75\" y1=\"57.433\" x2=\"66.25\" y2=\"49.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"27.083\" y1=\"57.433\" x2=\"19.583\" y2=\"49.433\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003cpath fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M57.524,216.515c0,4.385-3.693,7.938-8.249,7.938H36.557\n\t\t\tc-4.556,0-8.249-3.554-8.249-7.938v-22.164c0-4.385,3.693-7.939,8.249-7.939h12.718c4.556,0,8.249,3.554,8.249,7.939V216.515z\"/\u003e\n\t\t\u003cpath fill=\"#FFFFFF\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M52.917,213.019c0,3.002-2.528,5.435-5.647,5.435h-8.706\n\t\t\tc-3.119,0-5.647-2.433-5.647-5.435v-15.172c0-3.001,2.528-5.435,5.647-5.435h8.706c3.119,0,5.647,2.433,5.647,5.435V213.019z\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"34.01\" y1=\"216.224\" x2=\"30.27\" y2=\"221.647\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"51.823\" y1=\"216.224\" x2=\"55.562\" y2=\"221.647\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"51.823\" y1=\"194.642\" x2=\"55.023\" y2=\"188.663\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"34.01\" y1=\"194.195\" x2=\"30.27\" y2=\"189.666\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"32.917\" y1=\"205.433\" x2=\"28.308\" y2=\"205.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"52.917\" y1=\"205.433\" x2=\"57.524\" y2=\"205.433\"/\u003e\n\t\u003c/g\u003e\n\u003c/g\u003e\n\u003cg id=\"StripLabel\"\u003e\n\t\u003crect x=\"4.75\" fill=\"#ED1C24\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"78.346\" height=\"46.433\"/\u003e\n\u003c/g\u003e\n\u003cpolygon fill=\"#BBC9E7\" stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"43.923,198.542 48.016,201.414 166.567,59.148 \n\t141.463,41.534 \"/\u003e\n\u003ctext transform=\"matrix(1 0 0 1 -60.75 216.2236)\" font-family=\"'MyriadPro-Regular'\" font-size=\"20\"\u003ePort\u003c/text\u003e\n\u003ctext transform=\"matrix(1 0 0 1 -87.2627 91.1001)\"\u003e\u003ctspan x=\"0\" y=\"0\" font-family=\"'MyriadPro-Regular'\" font-size=\"20\"\u003eReading\u003c/tspan\u003e\u003ctspan x=\"0\" y=\"24\" font-family=\"'MyriadPro-Regular'\" font-size=\"20\"\u003eWindow\u003c/tspan\u003e\u003c/text\u003e\n\u003cline fill=\"none\" stroke=\"#000000\" stroke-width=\"4\" stroke-miterlimit=\"10\" x1=\"-11.417\" y1=\"95.1\" x2=\"32.917\" y2=\"94.1\"/\u003e\n\u003cline fill=\"none\" stroke=\"#000000\" stroke-width=\"4\" stroke-miterlimit=\"10\" x1=\"-17.417\" y1=\"209.401\" x2=\"26.917\" y2=\"208.401\"/\u003e\nEOF\n    )\n    img.translate!(100)\n    return img\n  end\n\n  def negative_selection_diagram\n    img = SVGElement.new(boundx: 600, boundy: 262)\n    img.add_child(\u003c\u003cEOF\n\u003cg id=\"SingleTubes_3_\"\u003e\n\t\u003cg id=\"ClosedLid_3_\"\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M363.205,46.889c22.801,0,22.801,18.312,0,18.312c0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173\n\t\t\t\tC363.205,49.268,363.205,48.078,363.205,46.889z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M363.205,46.889c22.801,0,22.801,18.312,0,18.312\n\t\t\t\tc0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173C363.205,49.268,363.205,48.078,363.205,46.889z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M317.727,67.92c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688c0-1.1-0.535-2-1.188-2\n\t\t\t\tc-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2s-1.188,0.9-1.188,2\n\t\t\t\tV67.92z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M317.727,67.92c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688\n\t\t\t\tc0-1.1-0.535-2-1.188-2c-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2\n\t\t\t\ts-1.188,0.9-1.188,2V67.92z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M308.352,48.026c-0.55-0.952-0.1-1.731,1-1.731h55.473c1.1,0,2.311,0.845,2.689,1.877l1.146,3.121\n\t\t\t\tc0.381,1.032-0.209,1.877-1.309,1.877h-54.028c-1.101,0-2.45-0.779-3.001-1.731L308.352,48.026z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M308.352,48.026c-0.55-0.952-0.1-1.731,1-1.731h55.473\n\t\t\t\tc1.1,0,2.311,0.845,2.689,1.877l1.146,3.121c0.381,1.032-0.209,1.877-1.309,1.877h-54.028c-1.101,0-2.45-0.779-3.001-1.731\n\t\t\t\tL308.352,48.026z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"380.16\" y1=\"58.514\" x2=\"381.305\" y2=\"58.514\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg id=\"Tube_3_\"\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M312.102,65.873v45.309l14.998,90.066\n\t\t\tc0,4.35,5.037,7.875,11.25,7.875c6.215,0,11.25-3.525,11.25-7.875l15-90.066V65.873H312.102z\"/\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M369.35,61.873c0,2.199-1.799,4-4,4h-54c-2.199,0-4-1.801-4-4v-1.875c0-2.201,1.801-4,4-4h54\n\t\t\t\tc2.201,0,4,1.799,4,4V61.873z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M369.35,61.873c0,2.199-1.799,4-4,4h-54c-2.199,0-4-1.801-4-4\n\t\t\t\tv-1.875c0-2.201,1.801-4,4-4h54c2.201,0,4,1.799,4,4V61.873z\"/\u003e\n\t\t\u003c/g\u003e\n\t\u003c/g\u003e\n\u003c/g\u003e\n\u003cg id=\"SingleTubes_1_\"\u003e\n\t\u003cg id=\"ClosedLid_1_\"\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M175.96,48.821c22.801,0,22.801,18.312,0,18.312c0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173\n\t\t\t\tC175.96,51.2,175.96,50.011,175.96,48.821z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M175.96,48.821c22.801,0,22.801,18.312,0,18.312\n\t\t\t\tc0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173C175.96,51.2,175.96,50.011,175.96,48.821z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M130.481,69.853c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688c0-1.1-0.535-2-1.188-2\n\t\t\t\tc-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2s-1.188,0.9-1.188,2\n\t\t\t\tV69.853z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M130.481,69.853c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688\n\t\t\t\tc0-1.1-0.535-2-1.188-2c-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2\n\t\t\t\ts-1.188,0.9-1.188,2V69.853z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M121.106,49.959c-0.55-0.952-0.1-1.731,1-1.731h55.473c1.1,0,2.311,0.845,2.689,1.877l1.146,3.121\n\t\t\t\tc0.381,1.032-0.209,1.877-1.309,1.877h-54.028c-1.101,0-2.45-0.779-3.001-1.731L121.106,49.959z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M121.106,49.959c-0.55-0.952-0.1-1.731,1-1.731h55.473\n\t\t\t\tc1.1,0,2.311,0.845,2.689,1.877l1.146,3.121c0.381,1.032-0.209,1.877-1.309,1.877h-54.028c-1.101,0-2.45-0.779-3.001-1.731\n\t\t\t\tL121.106,49.959z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"192.915\" y1=\"60.446\" x2=\"194.06\" y2=\"60.446\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg id=\"Tube_1_\"\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M124.856,67.806v45.309l14.998,90.066\n\t\t\tc0,4.35,5.037,7.875,11.25,7.875c6.215,0,11.25-3.525,11.25-7.875l15-90.066V67.806H124.856z\"/\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M182.104,63.806c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875c0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V63.806\n\t\t\t\tz\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M182.104,63.806c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875\n\t\t\t\tc0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V63.806z\"/\u003e\n\t\t\u003c/g\u003e\n\t\u003c/g\u003e\n\u003c/g\u003e\n\u003cg id=\"SingleTubes_2_\"\u003e\n\t\u003cg id=\"ClosedLid_2_\"\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M272.545,47.965c22.801,0,22.801,18.312,0,18.312c0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173\n\t\t\t\tC272.545,50.344,272.545,49.154,272.545,47.965z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M272.545,47.965c22.801,0,22.801,18.312,0,18.312\n\t\t\t\tc0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173C272.545,50.344,272.545,49.154,272.545,47.965z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M227.066,68.996c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688c0-1.101-0.534-2-1.188-2\n\t\t\t\ts-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2s-1.188,0.899-1.188,2V68.996z\"\n\t\t\t\t/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M227.066,68.996c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688\n\t\t\t\tc0-1.101-0.534-2-1.188-2s-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2\n\t\t\t\ts-1.188,0.899-1.188,2V68.996z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M217.691,49.103c-0.55-0.953-0.1-1.732,1-1.732h55.473c1.1,0,2.311,0.845,2.69,1.877l1.146,3.121\n\t\t\t\tc0.38,1.032-0.21,1.877-1.31,1.877h-54.028c-1.1,0-2.45-0.779-3-1.732L217.691,49.103z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M217.691,49.103c-0.55-0.953-0.1-1.732,1-1.732h55.473\n\t\t\t\tc1.1,0,2.311,0.845,2.69,1.877l1.146,3.121c0.38,1.032-0.21,1.877-1.31,1.877h-54.028c-1.1,0-2.45-0.779-3-1.732L217.691,49.103z\n\t\t\t\t\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"289.5\" y1=\"59.59\" x2=\"290.645\" y2=\"59.59\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg id=\"Tube_2_\"\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M221.441,66.949v45.309l14.998,90.066\n\t\t\tc0,4.35,5.037,7.875,11.25,7.875c6.215,0,11.25-3.525,11.25-7.875l15-90.066V66.949H221.441z\"/\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M278.689,62.949c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875c0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V62.949\n\t\t\t\tz\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M278.689,62.949c0,2.2-1.8,4-4,4h-54c-2.2,0-4-1.8-4-4v-1.875\n\t\t\t\tc0-2.2,1.8-4,4-4h54c2.2,0,4,1.8,4,4V62.949z\"/\u003e\n\t\t\u003c/g\u003e\n\t\u003c/g\u003e\n\u003c/g\u003e\n\u003cg id=\"SingleTubes_4_\"\u003e\n\t\u003cg id=\"ClosedLid_4_\"\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M459.754,47.131c22.801,0,22.801,18.312,0,18.312c0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173\n\t\t\t\tC459.754,49.51,459.754,48.32,459.754,47.131z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M459.754,47.131c22.801,0,22.801,18.312,0,18.312\n\t\t\t\tc0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173C459.754,49.51,459.754,48.32,459.754,47.131z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M414.275,68.162c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688c0-1.1-0.535-2-1.188-2\n\t\t\t\tc-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2s-1.188,0.9-1.188,2\n\t\t\t\tV68.162z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M414.275,68.162c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688\n\t\t\t\tc0-1.1-0.535-2-1.188-2c-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2\n\t\t\t\ts-1.188,0.9-1.188,2V68.162z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M404.9,48.269c-0.55-0.952-0.1-1.731,1-1.731h55.473c1.1,0,2.311,0.845,2.689,1.877l1.146,3.121\n\t\t\t\tc0.381,1.032-0.209,1.877-1.309,1.877h-54.028c-1.101,0-2.45-0.779-3.001-1.731L404.9,48.269z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M404.9,48.269c-0.55-0.952-0.1-1.731,1-1.731h55.473\n\t\t\t\tc1.1,0,2.311,0.845,2.689,1.877l1.146,3.121c0.381,1.032-0.209,1.877-1.309,1.877h-54.028c-1.101,0-2.45-0.779-3.001-1.731\n\t\t\t\tL404.9,48.269z\"/\u003e\n\t\t\u003c/g\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"476.709\" y1=\"58.756\" x2=\"477.854\" y2=\"58.756\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg id=\"Tube_4_\"\u003e\n\t\t\u003cpath fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M408.65,66.115v45.309l14.998,90.066\n\t\t\tc0,4.35,5.037,7.875,11.25,7.875c6.215,0,11.25-3.525,11.25-7.875l15-90.066V66.115H408.65z\"/\u003e\n\t\t\u003cg\u003e\n\t\t\t\u003cpath fill=\"#F7FCFE\" d=\"M465.898,62.115c0,2.199-1.799,4-4,4h-54c-2.199,0-4-1.801-4-4V60.24c0-2.201,1.801-4,4-4h54\n\t\t\t\tc2.201,0,4,1.799,4,4V62.115z\"/\u003e\n\t\t\t\u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M465.898,62.115c0,2.199-1.799,4-4,4h-54c-2.199,0-4-1.801-4-4\n\t\t\t\tV60.24c0-2.201,1.801-4,4-4h54c2.201,0,4,1.799,4,4V62.115z\"/\u003e\n\t\t\u003c/g\u003e\n\t\u003c/g\u003e\n\u003c/g\u003e\n\u003crect x=\"180.021\" y=\"67.951\" fill=\"#58595B\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"16.705\" height=\"143.104\"/\u003e\n\u003crect x=\"276.023\" y=\"68.36\" fill=\"#58595B\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"16.705\" height=\"143.104\"/\u003e\n\u003crect x=\"366.934\" y=\"66.539\" fill=\"#58595B\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"16.705\" height=\"143.104\"/\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F2F5D1\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M151.104,211.465c6.215,0,11.25-3.525,11.25-7.875l15-90.066\n\t\tV92.904c-3.914-4.414-7.246-9.508-14.937-9.508c-13.567,0-13.567,15.856-27.136,15.856c-4.752,0-7.837-1.947-10.426-4.476v18.746\n\t\tl14.998,90.066C139.854,207.939,144.891,211.465,151.104,211.465z\"/\u003e\n\t\u003cpath id=\"largegoop_1_\" fill=\"#BE1E2D\" d=\"M176.233,99.027c-0.539-0.592-1.101-1.156-1.7-1.677\n\t\tc-2.18-1.891-4.767-3.295-7.818-4.106c-3.108-0.959-5.194-0.299-6.55,1.576c-1.355,1.877-1.983,4.971-2.176,8.881\n\t\tc-0.043,4.081,0.029,8.187,0.148,12.31c-0.371,3.683-0.492,7.357-0.467,11.022c0.897,18.184,3.846,37.165-0.056,56.177\n\t\tc-0.8,1.744-1.673,3.365-2.61,4.925c-3.899,3.502-12.119,3.583-12.802,9.137c-1.465,7.144,6.075,12.614,13.855,11.348\n\t\tc1.231-0.126,2.429-0.324,3.597-0.573c0.996-1.113,1.578-2.408,1.578-3.796l15-85.266V99.027z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F2F5D1\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M338.349,210.596c6.215,0,11.25-3.525,11.25-7.875l15-90.066\n\t\tV92.035c-3.914-4.414-7.246-9.508-14.937-9.508c-13.567,0-13.567,15.856-27.136,15.856c-4.752,0-7.837-1.947-10.426-4.476v18.746\n\t\tl14.998,90.066C327.099,207.07,332.136,210.596,338.349,210.596z\"/\u003e\n\t\u003cpath id=\"smallgoop_1_\" fill=\"#BE1E2D\" d=\"M351.601,187.893c-0.48,0.29-0.853,0.667-1.167,1.104\n\t\tc-0.286,0.446-0.544,0.889-0.791,1.329c-0.345,0.425-0.624,0.832-0.864,1.229c-0.991,1.92-1.5,3.797-3.802,6.113\n\t\tc-0.326,0.24-0.664,0.473-1.014,0.702c-1.255,0.63-3.409,1.163-3.962,1.811c-0.864,0.87,0.737,0.984,2.856,0.351\n\t\tc2.816-0.787,5.354-1.938,7.215-3.107c0.564-0.939,0.878-1.972,0.878-3.055l1.118-6.713\n\t\tC351.903,187.729,351.745,187.806,351.601,187.893z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F2F5D1\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M247.69,210.199c6.215,0,11.25-3.525,11.25-7.875l15-90.066\n\t\tV91.639c-3.914-4.414-7.246-9.508-14.937-9.508c-13.567,0-13.567,15.856-27.136,15.856c-4.752,0-7.837-1.947-10.426-4.476v18.746\n\t\tl14.998,90.066C236.44,206.674,241.478,210.199,247.69,210.199z\"/\u003e\n\t\u003cpath id=\"mediumgoop_1_\" fill=\"#BE1E2D\" d=\"M265.456,155.475c-1.722-0.177-2.978,0.252-3.904,1.138s-1.526,2.229-1.938,3.884\n\t\tc-0.338,1.716-0.611,3.433-0.859,5.154c-0.497,1.573-0.849,3.123-1.115,4.659c-0.877,7.564-0.631,15.315-4.343,23.576\n\t\tc-0.596,0.789-1.225,1.533-1.886,2.255c-2.521,1.753-7.274,2.385-8.095,4.764c-1.395,3.104,2.541,4.853,7.132,3.756\n\t\tc3.25-0.642,6.229-1.791,8.848-3.264c0.022-0.203,0.044-0.406,0.044-0.613l7.516-45.127\n\t\tC266.412,155.575,265.951,155.51,265.456,155.475z\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpath fill=\"#F2F5D1\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M434.899,209.771c6.215,0,11.25-3.525,11.25-7.875l15-90.066\n\t\tV91.211c-3.914-4.414-7.246-9.508-14.937-9.508c-13.567,0-13.567,15.856-27.136,15.856c-4.752,0-7.837-1.947-10.426-4.476v18.746\n\t\tl14.998,90.066C423.649,206.246,428.687,209.771,434.899,209.771z\"/\u003e\n\u003c/g\u003e\n\u003ctext transform=\"matrix(1 0 0 1 11.918 253.2422)\" font-family=\"'MyriadPro-Regular'\" font-size=\"25\"\u003eUnwanted Cells\u003c/text\u003e\n\u003ctext transform=\"matrix(1 0 0 1 12.8271 173.3662)\" font-family=\"'MyriadPro-Regular'\" font-size=\"25\"\u003eCD+ Cells\u003c/text\u003e\n\u003cg\u003e\n\t\u003cpolygon stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"158.353,205.239 150.153,202.41 156.704,194.296 \t\"/\u003e\n\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-width=\"3\" stroke-miterlimit=\"10\" x1=\"154.61\" y1=\"202.672\" x2=\"147.199\" y2=\"232.312\"/\u003e\n\u003c/g\u003e\n\u003cg\u003e\n\t\u003cpolygon stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"135.032,139.835 133.309,134.386 142.02,130.715 \t\"/\u003e\n\t\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-width=\"3\" stroke-miterlimit=\"10\" x1=\"135.147\" y1=\"136.361\" x2=\"110.832\" y2=\"156.343\"/\u003e\n\u003c/g\u003e\n\u003ctext transform=\"matrix(1 0 0 1 140.5879 38.501)\" font-family=\"'MyriadPro-Regular'\" font-size=\"41\"\u003e1\u003c/text\u003e\n\u003ctext transform=\"matrix(1 0 0 1 234.8652 36.8428)\" font-family=\"'MyriadPro-Regular'\" font-size=\"41\"\u003e2\u003c/text\u003e\n\u003ctext transform=\"matrix(1 0 0 1 326.0049 38.4541)\" font-family=\"'MyriadPro-Regular'\" font-size=\"41\"\u003e3\u003c/text\u003e\n\u003ctext transform=\"matrix(1 0 0 1 435.0049 38.4541)\" font-family=\"'MyriadPro-Regular'\" text-anchor=\"middle\" font-size=\"25\"\u003eCD4+/RBC\u003c/text\u003e\nEOF\n    )\n    img\n  end\nend"}},{"library":{"name":"OLAKitIDs","category":"OLASimple","code_source":"# frozen_string_literal: true\n\nneeds 'OLASimple/OLAConstants'\nneeds 'OLASimple/OLAGraphics'\n\nmodule OLAKitIDs\n  include OLAGraphics\n\n  KIT_NUM_DIGITS = 3\n  SAMPLE_NUM_DIGITS = 3\n  BATCH_SIZE = OLAConstants::BATCH_SIZE\n  PROPOGATION_KEYS = [OLAConstants::KIT_KEY, OLAConstants::SAMPLE_KEY, OLAConstants::PATIENT_KEY].freeze # which associations to propogate forward during an operation\n  ALL_KIT_KEYS = PROPOGATION_KEYS + [OLAConstants::COMPONENT_KEY, OLAConstants::UNIT_KEY].freeze # all keys for important kit item associations\n\n  def extract_kit_number(id)\n    id.chars[-KIT_NUM_DIGITS, KIT_NUM_DIGITS].join.to_i if id.chars[-KIT_NUM_DIGITS, KIT_NUM_DIGITS]\n  end\n\n  def extract_sample_number(id)\n    id.chars[-SAMPLE_NUM_DIGITS, SAMPLE_NUM_DIGITS].join.to_i if id.chars[-SAMPLE_NUM_DIGITS, SAMPLE_NUM_DIGITS]\n  end\n\n  def sample_num_to_id(num)\n    num.to_s.rjust(SAMPLE_NUM_DIGITS, '0')\n  end\n\n  def kit_num_to_id(num)\n    num.to_s.rjust(KIT_NUM_DIGITS, '0')\n  end\n\n  # requires and returns integer ids\n  def kit_num_from_sample_num(sample_num)\n    ((sample_num - 1) / BATCH_SIZE).floor + 1\n  end\n\n  # requires and returns integer ids\n  def sample_nums_from_kit_num(kit_num)\n    sample_nums = []\n    BATCH_SIZE.times do |i|\n      sample_nums \u003c\u003c kit_num * BATCH_SIZE - i\n    end\n    sample_nums.reverse\n  end\n\n  AUTOFILL = false # for debugging purposes when you don't have a barcode scanner\n\n  def validate_package(this_package)\n    resp = show do\n      title 'Validate kit package'\n      note \"Scan in the ID of package #{this_package} which you've retrieved.\"\n      default = AUTOFILL ? this_package : ''\n      get 'text', var: :package, label: \"Package ID\", default: default\n    end\n    return false if resp[:package] != this_package\n\n    return true\n  end\n\n  def package_validation_with_multiple_tries(this_package)\n    5.times do\n      result = validate_package(this_package)\n      return true if result || debug\n\n      show do\n        title 'Wrong Package'\n        note 'Ensure that you have the correct package before continuing.'\n        note \"The package should be labeled \u003cb\u003e#{this_package}\u003c/b\u003e.\"\n        note 'On the next step you will retry scanning in the package.'\n      end\n    end\n    operations.each do |op|\n      op.error(:package_problem, 'Package id is wrong and could not be resolved')\n    end\n    raise 'Package id is wrong and could not be resolved. Speak to a Lab manager.'\n  end\n\n  def validate_samples(expected_object_ids, svgs, ids_override: nil)\n    show_ids = expected_object_ids\n    expected_object_ids = ids_override if ids_override\n    resp = show do\n      title 'Validate Incoming Samples'\n\n      note \"To ensure we are working with the right samples, scan in the IDs of the retrieved inputs #{show_ids.to_sentence}.\"\n      expected_object_ids.size.times do |i|\n        default = AUTOFILL ? expected_object_ids[i] : ''\n        get 'text', var: i.to_s.to_sym, label: '', default: default\n      end\n    end\n\n    expected_object_ids.size.times do |i|\n      if resp[i.to_s.to_sym]\n        found = expected_object_ids.delete(resp[i.to_s.to_sym])\n      end\n      return false unless found\n    end\n    true\n  end\n\n  def pre_transfer_validate(expected_object_ids, svgs, ids_override: nil, content_override: nil)\n    show_ids = expected_object_ids\n    expected_object_ids = ids_override if ids_override\n    grid = SVGGrid.new(svgs.size, 1, 150, 100)\n    svgs.each_with_index do |svg, i|\n      grid.add(svg, i, 0)\n    end\n    img = SVGElement.new(children: [grid], boundx: 1000, boundy: 300).translate(100, 0)\n\n    resp = show do\n      if content_override\n        raw content_override\n      else\n        title 'Prepare Samples for transfer'\n\n        check \"In preparation for liquid transfer, set aside tubes #{show_ids.to_sentence}.\"\n        note 'Scan in tube IDs for confirmation.'\n      end\n      note display_svg(img, 0.75)\n      expected_object_ids.size.times do |i|\n        default = AUTOFILL ? expected_object_ids[i] : ''\n        get 'text', var: i.to_s.to_sym, label: '', default: default \n      end\n    end\n\n    expected_object_ids.size.times do |i|\n      if resp[i.to_s.to_sym]\n        found = expected_object_ids.delete(resp[i.to_s.to_sym])\n      end\n      return false unless found\n    end\n    true\n  end\n\n  def pre_transfer_validation_with_multiple_tries(from_name, to_name, from_svg=nil, to_svg=nil, content_override: nil)\n    from_id = from_name.dup.sub(\"-\", \"\")\n    to_id = to_name.dup.sub(\"-\", \"\")\n    5.times do\n      result = pre_transfer_validate([from_name, to_name], [from_svg, to_svg], ids_override: [from_id, to_id], content_override: content_override)\n      return true if result || debug\n\n      show do\n        title 'Wrong tubes'\n        note 'Ensure that you have the correct tubes before continuing.'\n        note 'On the next step you will retry scanning in the samples.'\n      end\n    end\n    operations.each do |op|\n      op.error(:wrong_items, 'Objects for transfer are wrong and could not be resolved')\n    end\n    raise 'Objects for transfer are wrong and could not be resolved. Speak to a lab manager.'\n  end\n\n  def sample_validation_with_multiple_tries(expected_object_ids, expected_svgs=nil)\n    expected_object_ids = expected_object_ids.map { |id| id.dup.sub(\"-\", \"\") }\n    5.times do\n      result = validate_samples(expected_object_ids, expected_svgs, ids_override: expected_object_ids)\n      return true if result || debug\n\n      show do\n        title 'Wrong Samples'\n        note 'Ensure that you have the correct samples before continuing.'\n        note 'On the next step you will retry scanning in the samples.'\n      end\n    end\n    operations.each do |op|\n      op.error(:sample_problem, 'Incoming samples are wrong and could not be resolved')\n    end\n    raise 'Incoming samples are wrong and could not be resolved. Speak to a Lab manager.'\n  end\n\n  def record_technician_id\n    resp = show do\n      title 'Scan your technician ID'\n      note 'Scan the technician ID barcode on your badge.'\n      note display_svg(technician_id_svg, 0.5)\n      default = AUTOFILL ? 'TECH634' : ''\n      get 'text', var: :id, label: 'ID', default: default\n    end\n    operations.each do |op|\n      op.associate(OLAConstants::TECH_KEY, resp[:id])\n    end\n  end\n\n  ################################################################################\n  ####  ID PROPOGATION\n  ################################################################################\n\n  def populate_temporary_kit_info_from_input_associations(ops, input_name)\n    if debug\n      ops.each_with_index do |op, i|\n        op.temporary[\"input_#{OLAConstants::KIT_KEY}\"] = kit_num_to_id(1)\n        op.temporary[\"input_#{OLAConstants::SAMPLE_KEY}\"] = sample_num_to_id(i + 1)\n        op.temporary[\"input_#{OLAConstants::PATIENT_KEY}\"] = rand(1..30).to_s\n        op.temporary[\"output_#{OLAConstants::KIT_KEY}\"] = op.temporary[\"input_#{OLAConstants::KIT_KEY}\"]\n        op.temporary[\"output_#{OLAConstants::SAMPLE_KEY}\"] = op.temporary[\"input_#{OLAConstants::SAMPLE_KEY}\"]\n        op.temporary[\"output_#{OLAConstants::PATIENT_KEY}\"] = op.temporary[\"input_#{OLAConstants::PATIENT_KEY}\"]\n      end\n    else\n      # grab all data associations from inputs and place into temporary\n      populate_temporary_values_from_input_associations(ops, input_name, ALL_KIT_KEYS, PROPOGATION_KEYS)\n    end\n  end\n\n  def populate_temporary_values_from_input_associations(ops, input_name, keys, propogated_keys)\n    ops.each do |op|\n      from = op.input(input_name).item\n      from_das = DataAssociation.where(parent_id: from.id, parent_class: from.class.to_s, key: keys)\n      from_das.each do |da|\n        op.temporary[\"input_#{da.key}\".to_sym] = da.value\n        op.temporary[\"output_#{da.key}\".to_sym] = da.value if PROPOGATION_KEYS.include?(da.key)\n      end\n    end\n  end\n\n  # Sends forward kit num, sample num, and patient id from the input item to the output item\n  # for all operations\n  def propogate_kit_info_forward(ops, input_name, output_name)\n    das = []\n    ops.each do |op|\n      new_das = propogate_information_lazy(\n        op.input(input_name).item,\n        op.output(output_name).item,\n        PROPOGATION_KEYS\n      )\n      das.concat(new_das)\n    end\n    DataAssociation.import das, on_duplicate_key_update: [:object]\n  end\n\n  # helper for propogate_kit_information_forward\n  def propogate_information_lazy(from, to, keys = [])\n    from_das = DataAssociation.where(parent_id: from.id, parent_class: from.class.to_s, key: keys)\n    from_das.map { |da| to.lazy_associate(da.key, da.value) }\n  end\n\n  # Assumes only one output item\n  # Sets the output items (and operation temporay values) to the given component and unit\n  def set_output_components_and_units(ops, output_name, component, unit)\n    data_associations = []\n    ops.each do |op|\n      it = op.output(output_name).item\n      data_associations \u003c\u003c it.lazy_associate(OLAConstants::COMPONENT_KEY, component)\n      data_associations \u003c\u003c it.lazy_associate(OLAConstants::UNIT_KEY, unit)\n      op.temporary[OLAConstants::COMPONENT_KEY] = component\n      op.temporary[OLAConstants::UNIT_KEY] = unit\n    end\n    DataAssociation.import data_associations, on_duplicate_key_update: [:object]\n  end\n\n  def technician_id_svg\n    child = icon_from_html(\n      '\u003csvg\u003e\u003cdefs\u003e\u003cclipPath id=\"clip-path\" transform=\"translate(-117.03 -68.5)\"\u003e\u003cpolygon points=\"190.6 172.5 205.9 144.6 167.7 121.4 91.1 232.7 131.2 285.2 194 237.4 278.2 229.1 279.1 196.4 190.6 196.4 190.6 172.5\" fill=\"none\"/\u003e\u003c/clipPath\u003e\u003c/defs\u003e\u003ctitle\u003e2_TechnicianIDcard\u003c/title\u003e\u003crect x=\"73.57\" y=\"0.5\" width=\"197.8\" height=\"127.4\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003cg clip-path=\"url(#clip-path)\"\u003e\u003cpath d=\"M139.2,210.9c2.1-1.9,8.4-9.2,10.1-14.6s9.1-22.9,13.4-25.7,12.9-10.2,15.8-14.9a143.5,143.5,0,0,1,8.2-11.8s3-6.2,5.6-3.6,4.2,10.4.4,16-10.2,12.8-12,17.4c0,0,23-2,26.7-4.3s26.1-10.7,27.3-11.6,19.7-8.4,24.1-7.1,6.5,2.1,6.1,4.2a14.94,14.94,0,0,1-2.8,4.8s11.3-4.9,12.8-3.3c0,0,6.6,1.4,3.7,6.4a20.15,20.15,0,0,1-8.4,7.4l-10.3,6.3c5.3-2.3,12.4-5.2,13.4-4.1,1.5,1.6,8.7,3.7.2,8.6-7.6,4.5-20.4,11.4-23,12.8h0c5.6-2.3,8-1.3,12,.3s-8.2,9.6-9.7,11-18.6,9.7-26.4,16.3-26.7,14.6-32.6,15.5-32.8,10.4-37.7,12.3-14.5,15.6-21.2,17.1-17.3-38.2-17.3-38.2S137.2,212.8,139.2,210.9Z\" transform=\"translate(-117.03 -68.5)\" fill=\"#b4b9de\"/\u003e\u003cpath d=\"M179.1,185.3a42.36,42.36,0,0,1,1.9-11.1c1.8-4.6,8.2-11.8,12-17.4s2.2-13.5-.4-16-5.6,3.6-5.6,3.6-5.3,7.1-8.2,11.8-11.5,12-15.8,14.9-11.6,20.2-13.4,25.7-8,12.7-10.1,14.6-21.9,17.2-21.9,17.2,10.5,39.6,17.3,38.2,16.2-15.2,21.2-17.1,31.9-11.5,37.7-12.3,24.8-8.8,32.6-15.5,24.9-15,26.4-16.3,13.7-9.4,9.7-11-6.5-2.7-12.5-.1-15.6,9.9-19.1,11.2-7.1,4.8-7.1,4.8\" transform=\"translate(-117.03 -68.5)\" fill=\"none\" stroke=\"#2e3192\" stroke-miterlimit=\"10\"/\u003e\u003cpath d=\"M181.1,174.2s23-2,26.7-4.3,26.1-10.7,27.3-11.6,19.7-8.4,24.1-7.1,6.5,2.1,6.1,4.2a15.65,15.65,0,0,1-9.5,9.4c-5.1,1.4-26.9,10.1-31.4,13-4.7,2.9-7.4,4.7-7.4,4.7\" transform=\"translate(-117.03 -68.5)\" fill=\"none\" stroke=\"#2e3192\" stroke-miterlimit=\"10\"/\u003e\u003cpath d=\"M223.5,193.4s28.7-13.7,31.3-14.3,17.6-8,19.1-6.4,8.7,3.7.2,8.6c-8.5,5.1-23.5,13.1-23.5,13.1\" transform=\"translate(-117.03 -68.5)\" fill=\"none\" stroke=\"#2e3192\" stroke-miterlimit=\"10\"/\u003e\u003cpath d=\"M262.6,160s11.3-4.9,12.8-3.3c0,0,6.6,1.4,3.7,6.4a20.15,20.15,0,0,1-8.4,7.4l-10.3,6.3\" transform=\"translate(-117.03 -68.5)\" fill=\"none\" stroke=\"#2e3192\" stroke-miterlimit=\"10\"/\u003e\u003c/g\u003e\u003cg style=\"isolation:isolate\"\u003e\u003ctext transform=\"translate(110.02 52.91)\" font-size=\"21.42\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003eOLA-Simple\u003c/text\u003e\u003ctext transform=\"translate(110.02 78.61)\" font-size=\"21.42\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003e\u003ctspan letter-spacing=\"-0.11em\"\u003eT\u003c/tspan\u003e\u003ctspan x=\"10.71\" y=\"0\"\u003eechnician ID\u003c/tspan\u003e\u003c/text\u003e\u003c/g\u003e\u003crect x=\"73.57\" y=\"0.5\" width=\"197.8\" height=\"23.3\" fill=\"#0d537c\"/\u003e\u003ctext transform=\"translate(114.25 19.7)\" font-size=\"21.67\" fill=\"#16f70b\" font-family=\"Arial-BoldMT, Arial\" font-weight=\"700\" style=\"isolation:isolate\"\u003eAQUARIUM\u003c/text\u003e\u003crect x=\"104.47\" y=\"89\" width=\"3.2\" height=\"30.4\"/\u003e\u003crect x=\"109.37\" y=\"89\" width=\"1.9\" height=\"30.4\"/\u003e\u003crect x=\"114.27\" y=\"89\" width=\"1.8\" height=\"30.4\"/\u003e\u003crect x=\"122.97\" y=\"89\" width=\"3.1\" height=\"30.4\"/\u003e\u003crect x=\"127.67\" y=\"89\" width=\"5.1\" height=\"30.4\"/\u003e\u003crect x=\"138.07\" y=\"89\" width=\"1.5\" height=\"30.4\"/\u003e\u003crect x=\"140.97\" y=\"89\" width=\"2.1\" height=\"30.4\"/\u003e\u003crect x=\"146.17\" y=\"89\" width=\"5.2\" height=\"30.4\"/\u003e\u003crect x=\"152.87\" y=\"89\" width=\"3.4\" height=\"30.4\"/\u003e\u003crect x=\"159.47\" y=\"89\" width=\"2\" height=\"30.4\"/\u003e\u003crect x=\"213.75\" y=\"88.9\" width=\"2.9\" height=\"30.4\"/\u003e\u003crect x=\"210.47\" y=\"88.9\" width=\"1.7\" height=\"30.4\"/\u003e\u003crect x=\"205.96\" y=\"88.9\" width=\"1.7\" height=\"30.4\"/\u003e\u003crect x=\"196.81\" y=\"88.9\" width=\"2.9\" height=\"30.4\"/\u003e\u003crect x=\"190.63\" y=\"88.9\" width=\"4.7\" height=\"30.4\"/\u003e\u003crect x=\"184.43\" y=\"88.9\" width=\"1.4\" height=\"30.4\"/\u003e\u003crect x=\"181.26\" y=\"88.9\" width=\"1.9\" height=\"30.4\"/\u003e\u003crect x=\"173.56\" y=\"88.9\" width=\"4.8\" height=\"30.4\"/\u003e\u003crect x=\"168.98\" y=\"88.9\" width=\"3.1\" height=\"30.4\"/\u003e\u003crect x=\"164.19\" y=\"88.9\" width=\"1.8\" height=\"30.4\"/\u003e\u003crect x=\"221.97\" y=\"89\" width=\"3.2\" height=\"30.4\"/\u003e\u003crect x=\"226.77\" y=\"89\" width=\"1.9\" height=\"30.4\"/\u003e\u003crect x=\"231.77\" y=\"89\" width=\"1.8\" height=\"30.4\"/\u003e\u003crect x=\"240.37\" y=\"89\" width=\"3.1\" height=\"30.4\"/\u003e\u003crect x=\"246.77\" y=\"89\" width=\"1.5\" height=\"30.4\"/\u003e\u003c/svg\u003e'\n    )\n    SVGElement.new(children: [child], boundx: 400, boundy: 200)\n  end\nend\n"}},{"library":{"name":"OLAKits","category":"OLASimple","code_source":"module OLAKits\n  def self.rt_pcr()\n    {\n        \"name\" =\u003e \"rt pcr kit\",\n        \"sample prep\" =\u003e {\n            \"Unit Name\" =\u003e \"S\",\n            \"Components\" =\u003e {\n                \"sample tube\" =\u003e \"\"\n            }\n        },\n        \"extraction\" =\u003e {\n            \"Unit Name\" =\u003e \"E\",\n            \"Components\" =\u003e {\n                \"dtt\" =\u003e \"0\",\n                \"lysis buffer\" =\u003e \"1\",\n                \"wash buffer 1\" =\u003e \"2\",\n                \"wash buffer 2\" =\u003e \"3\",\n                \"sodium azide water\" =\u003e \"4\",\n                \"sample column\" =\u003e \"5\",\n                \"rna extract tube\" =\u003e \"6\",\n            },\n            \"Number of Samples\" =\u003e 2,\n        },\n        \"pcr\" =\u003e {\n            \"Unit Name\" =\u003e \"A\",\n            \"Components\" =\u003e {\n                \"sample tube\" =\u003e \"2\",\n                \"diluent A\" =\u003e \"1\"\n            },\n            \"PCR Rehydration Volume\" =\u003e 40,\n            \"Number of Samples\" =\u003e 2,\n            \"Number of Sub Packages\" =\u003e 2,\n        },\n\n        \"ligation\" =\u003e {\n            \"Unit Name\" =\u003e \"L\",\n            \"Components\" =\u003e {\n                \"sample tubes\" =\u003e [\n                    \"1\",\n                    \"2\",\n                    \"3\",\n                    \"4\",\n                    \"5\",\n                    \"6\",\n                    \"7\"\n                ],\n                \"diluent A\" =\u003e \"0\"\n            },\n            \"PCR to Ligation Mix Volume\" =\u003e 1.2,\n            \"Ligation Mix Rehydration Volume\" =\u003e 24,\n            \"Number of Samples\" =\u003e 2,\n            \"Number of Sub Packages\" =\u003e 2\n        },\n\n        \"detection\" =\u003e {\n            \"Unit Name\" =\u003e \"D\",\n            \"Components\" =\u003e {\n                \"strips\" =\u003e [\n                    \"1\",\n                    \"2\",\n                    \"3\",\n                    \"4\",\n                    \"5\",\n                    \"6\",\n                    \"7\"\n                ],\n                \"diluent A\" =\u003e \"0\",\n                \"stop\" =\u003e \"1\",\n                \"gold\" =\u003e \"2\"\n            },\n            \"Number of Samples\" =\u003e 2,\n            \"Number of Sub Packages\" =\u003e 4,\n            \"Stop Rehydration Volume\" =\u003e 36,\n            \"Gold Rehydration Volume\" =\u003e 600,\n            \"Gold to Strip Volume\" =\u003e 40,\n            \"Sample to Strip Volume\" =\u003e 24,\n            \"Stop to Sample Volume\" =\u003e 2.4,\n            \"Sample Volume\" =\u003e 2.4,\n            \"Mutation Labels\" =\u003e [\n                \"K65R\",\n                \"70E\",\n                \"K103N\",\n                \"V106M\",\n                \"Y181C\",\n                \"M184V\",\n                \"G190A\",\n            ],\n            \"Mutation Colors\" =\u003e [\"red\", \"green\",\"yellow\", \"blue\", \"purple\", \"white\", \"gray\"]\n\n        }\n\n    }\n  end\nend"}},{"library":{"name":"OLALib","category":"OLASimple","code_source":"# frozen_string_literal: true\n\n# Library code here\n# category = \"Tissue Culture Libs\"\n# needs \"#{category}/TissueCulture\"\nneeds 'OLASimple/OLAConstants'\nneeds 'OLASimple/OLAGraphics'\nneeds 'OLASimple/NetworkRequests'\n\nmodule TextExtension\n  include ActionView::Helpers::TagHelper\n\n  def bold\n    content_tag(:b, to_s)\n  end\n\n  def ital\n    content_tag(:i, to_s)\n  end\n\n  def strong\n    content_tag(:strong, to_s)\n  end\n\n  def color(which_color)\n    content_tag(:font, to_s, color: which_color)\n  end\n\n  def cap\n    remaining = ''\n    remaining = self[1..-1] if length \u003e 1\n    self[0].capitalize + remaining\n  end\n\n  def quote\n    \"\\\"#{self}\\\"\"\n  end\nend\n\nmodule RefExtension\n  include OLAConstants\n  # this requires :output_kit, :output_unit, :output_sample, and :pack_hash temporary values\n  # references require :kit, :unit, :component, and :sample keys\n\n  def sort_by(\u0026block)\n    super(\u0026block).extend(OperationList)\n  end\n\n  def component(name)\n    temporary[:pack_hash][COMPONENTS_FIELD_VALUE][name]\n  end\n\n  def input_component(name)\n    get_input_item_helper(name).get(COMPONENT_KEY)\n  end\n\n  def output_component(name)\n    get_output_item_helper(name).get(COMPONENT_KEY)\n  end\n\n  def ref(name, with_sample = false)\n    # returns the label for a temporary item by name\n    t = temporary\n    c = component(name)\n    kit = t[:output_kit]\n    unit = t[:output_unit]\n    # samp = t[:output_sample]\n    samp = ''\n    samp = t[:output_sample] if with_sample\n    alias_helper(kit, unit, c, samp)\n  end\n\n  def tube_label(name, with_sample = false)\n    label_helper(*ref_tokens(name, with_sample))\n  end\n\n  def label_helper(_k, u, c, s)\n    [\"#{u}#{c}\", s.to_s]\n  end\n\n  def input_tube_label(name)\n    label_helper(*input_tokens(name))\n  end\n\n  def output_tube_label(name)\n    label_helper(*output_tokens(name))\n  end\n\n  # TOKENS\n  def ref_tokens(name, with_sample = false)\n    # return array for kit-unit and component-sample, usually for labeling purposes\n    t = temporary\n    c = component(name)\n    kit = t[:output_kit]\n    unit = t[:output_unit]\n    samp = '' # t[:output_sample]\n    samp = t[:output_sample] if with_sample\n    [kit, unit, c, samp]\n  end\n\n  def ref_tokens_helper(item)\n    [item.get(KIT_KEY), item.get(UNIT_KEY), item.get(COMPONENT_KEY), item.get(SAMPLE_KEY)]\n  end\n\n  def input_tokens(name)\n    ref_tokens_helper(get_input_item_helper(name))\n  end\n\n  def output_tokens(name)\n    ref_tokens_helper(get_output_item_helper(name))\n  end\n\n  def alias_helper(_kit, unit, component, sample)\n    # returns the label given kit, unit, comp and sample\n    if !sample.blank?\n      \"#{unit}#{component}-#{sample}\"\n    else\n      \"#{unit}#{component}\"\n    end\n  end\n\n  def ref_helper(item)\n    # returns the label for an item\n    alias_helper(*ref_tokens_helper(item))\n  end\n\n  def refs_helper(item)\n    # returns an array of labels for a collection\n    components = item.get(COMPONENT_KEY)\n    raise 'Components must be an array to use refs_helper' unless components.is_a?(Array)\n\n    components.map do |c|\n      alias_helper(item.get(KIT_KEY), item.get(UNIT_KEY), c, item.get(SAMPLE_KEY))\n    end\n  end\n\n  def get_input_item_helper(name)\n    input = self.input(name)\n    raise \"Could not find input field_value #{name}\" if input.nil?\n\n    item = input(name).item\n    raise \"Input #{name} has no item\" if item.nil?\n\n    item\n  end\n\n  def get_output_item_helper(name)\n    output = self.output(name)\n    raise \"Could not find output field_value \\\"#{name}\\\"\" if output.nil?\n\n    item = output(name).item\n    raise \"Output \\\"#{name}\\\" has no item\" if item.nil?\n\n    item\n  end\n\n  def input_ref(name)\n    # return the label for an input\n    ref_helper(get_input_item_helper(name))\n  end\n\n  def input_ref_tokens(name)\n    # return the label for an input\n    ref_tokens_helper(get_input_item_helper(name))\n  end\n\n  def output_ref(name)\n    # return the label for an output\n    ref_helper(get_output_item_helper(name))\n  end\n\n  def output_ref_tokens(name)\n    # return the label for an input\n    ref_tokens_helper(get_output_item_helper(name))\n  end\n\n  def input_refs(name)\n    # return the array of labels for an input\n    refs_helper(get_input_item_helper(name))\n  end\n\n  def output_refs(name)\n    # return the array of labels for an output\n    refs_helper(get_output_item_helper(name))\n  end\n\n  def make_alias_from_pack_hash(output_item, package_name, from_item)\n    kit = temporary[:output_kit]\n    unit = temporary[:output_unit]\n    component = self.component(package_name)\n    sample = temporary[:output_sample]\n    patient = temporary[:patient]\n\n    raise 'Kit is nil' if kit.nil?\n    raise 'Unit is nil' if unit.nil?\n    raise 'Component is nil' if component.nil?\n    raise 'Sample is nil' if sample.nil?\n    raise 'Patient ID is nil' if patient.nil?\n\n    output_item.associate(KIT_KEY, kit)\n    output_item.associate(UNIT_KEY, unit)\n    output_item.associate(COMPONENT_KEY, component)\n    output_item.associate(SAMPLE_KEY, sample)\n    output_item.associate(PATIENT_KEY, patient)\n    output_item.associate(ALIAS_KEY, ref_helper(output_item))\n\n    # from associations\n    output_item.associate(:from, input(from_item).item.id)\n    output_item.associate(:fromref, input_ref(from_item))\n    output_item.associate(:from_pack, \"#{temporary[:input_unit]}#{temporary[:input_kit]}\")\n    output_item\n  end\n\n  def make_item_and_alias(name, package_name, from_item)\n    output(name).make\n    output_item = output(name).item\n    make_alias_from_pack_hash(output_item, package_name, from_item)\n  end\n\n  def make_collection_and_alias(name, package_name, from_item)\n    output_collection = output(name).make_collection\n    components = component(package_name)\n    components.each do |_c|\n      output_collection.add_one(output(name).sample)\n    end\n    output_item = output(name).item\n    make_alias_from_pack_hash(output_item, package_name, from_item)\n  end\nend\n\nmodule OLALib\n  include OLAConstants\n  include NetworkRequests\n  include OLAGraphics\n  include FunctionalSVG\n\n  String.prepend TextExtension\n  Integer.prepend TextExtension\n  Float.prepend TextExtension\n  Operation.prepend RefExtension\n  #   include TissueCulture\n\n  #######################################\n  # OLA image processing API\n  #######################################\n\n  # TODO: add error handling to this function, since function could fail if api service disconnected\n  def make_calls_from_image(image_upload)\n    response = post_file(OLA_IP_API_URL, 'file', image_upload)\n    results = JSON.parse(response.body)['results']\n    if results.blank?\n      raise 'Automatic Visual Call failed. Missing or unprocessible image.'\n    else\n      return results\n    end\n  end\n\n  #######################################\n  # Utilities\n  #######################################\n\n  def pluralizer(noun, num)\n    if num == 1\n      \"the #{noun.pluralize(num)}\"\n    elsif num == 2\n      \"both #{noun.pluralize(num)}\"\n    else\n      \"all #{num} #{noun.pluralize(num)}\"\n    end\n  end\n\n  def group_by_unit(ops)\n    ops.running.group_by { |op| op.temporary[:unit] }\n  end\n\n  def get_technician_name(job_id)\n    job = Job.find(job_id)\n    user_id = job.user_id\n    username = '\"unknown user\"'\n    username = User.find(job.user_id).name unless user_id.nil?\n    username\n  end\n\n  ####################################\n  # Item Alias\n  ####################################\n\n  def alias_helper(_kit, unit, component, sample)\n    # returns the label given kit, unit, comp and sample\n    if !sample.blank?\n      \"#{unit}#{component}-#{sample}\"\n    else\n      \"#{unit}#{component}\"\n    end\n  end\n\n  def make_alias(item, kit, unit, component, patient, sample = nil)\n    sample ||= ''\n    label = alias_helper(kit, unit, component, sample)\n    item.associate(ALIAS_KEY, label)\n    item.associate(KIT_KEY, kit)\n    item.associate(UNIT_KEY, unit)\n    item.associate(COMPONENT_KEY, component)\n    item.associate(SAMPLE_KEY, sample)\n    item.associate(PATIENT_KEY, patient)\n  end\n\n  def get_alias_array(item)\n    [item.get(KIT_KEY), item.get(UNIT_KEY), item.get(COMPONENT_KEY), item.get(SAMPLE_KEY), item.get(PATIENT_KEY)]\n  end\n\n  def ref(item)\n    \"#{item.get(UNIT_KEY)}#{item.get(COMPONENT_KEY)}-#{item.get(SAMPLE_KEY)}\"\n  end\n\n  def save_temporary_input_values(ops, input)\n    # get the aliases from the inputs\n    ops.each do |op|\n      kit, unit, component, sample, patient = get_alias_array(op.input(input).item)\n      op.temporary[:patient] = patient\n      op.temporary[:input_kit] = kit\n      op.temporary[:input_unit] = unit\n      op.temporary[:input_component] = component\n      op.temporary[:input_sample] = sample\n      op.temporary[:input_kit_and_unit] = [kit, unit].join('')\n    end\n  end\n\n  def save_pack_hash(ops, pack)\n    ops.running.each do |op|\n      op.temporary[:pack_hash] = get_pack_hash(op.input(pack).sample)\n    end\n  end\n\n  def save_temporary_output_values(myops)\n    myops.each do |op|\n      op.temporary[:output_kit] = op.temporary[:input_kit]\n      op.temporary[:output_unit] = op.temporary[:pack_hash][UNIT_NAME_FIELD_VALUE]\n      op.temporary[:output_sample] = op.temporary[:input_sample]\n      op.temporary[:output_kit_and_unit] = [op.temporary[:output_kit], op.temporary[:output_unit]].join('')\n      op.temporary[:output_number_of_samples] = op.temporary[:pack_hash][NUM_SAMPLES_FIELD_VALUE]\n    end\n  end\n\n  def group_packages(myops)\n    myops.group_by { |op| \"#{op.temporary[:output_kit]}#{op.temporary[:output_unit]}\" }\n  end\n\n  ####################################\n  # Collection Alias\n  ####################################\n\n  def make_array_association(item, label, data)\n    raise 'must be an item not a collection for array associations' unless item.is_a?(Item)\n\n    data.each.with_index do |d, i|\n      item.associate(\"#{label}#{i}\".to_sym, d)\n    end\n  end\n\n  def get_array_association(item, label, i)\n    item.get(\"#{label}#{i}\".to_sym)\n  end\n\n  ####################################\n  # Kit and Package Parser\n  ####################################\n\n  def parse_component(component_string)\n    # parses the component value for a OLASimple Package sample\n    # values are formatted as \"key: value\" or \"key: [val1, val2, val3]\"\n    val = nil\n    tokens = component_string.split(/\\s*\\:\\s*/)\n    m = /\\[(.+)\\]/.match(tokens[1])\n    if !m.nil?\n      arr_str = m[1]\n      val = arr_str.split(/\\s*,\\s*/).map(\u0026:strip)\n    else\n      val = tokens[1]\n    end\n    [tokens[0], val]\n  end\n\n  def get_component_dictionary(package_sample)\n    # parses all of the components in a OLASimple Package\n    components = package_sample.properties[COMPONENTS_FIELD_VALUE]\n    components.map { |v| [*parse_component(v)] }.to_h\n  end\n\n  def get_pack_hash(sample)\n    pack_hash = {}\n    # get the properties for the output pack sample\n    pack_hash = sample.properties\n\n    # parse the component values, formatted as \"key: value\" or \"key: [val1, val2, val3]\"\n    pack_hash[COMPONENTS_FIELD_VALUE] = get_component_dictionary(sample)\n    pack_hash\n  end\n\n  def get_kit_hash(op)\n    kit_hash = {}\n    # validates that input and output kits sample definitions are formatted correctly\n    [SAMPLE_PREP_FIELD_VALUE, PCR_FIELD_VALUE, LIGATION_FIELD_VALUE, DETECTION_FIELD_VALUE].each do |x|\n      # validate that the input kit is the same as the expected output kits\n      output_sample = op.output(x).sample\n      kit_hash[x] = get_pack_hash(output_sample)\n    end\n\n    kit_hash\n  end\n\n  def kit_hash_to_json(kit_hash)\n    h = kit_hash.map { |k, v| [k, v.reject { |key, _val| key == KIT_FIELD_VALUE }] }.to_h\n    JSON.pretty_generate(h)\n  end\n\n  def validate_kit_hash(op, kit_hash)\n    # validates the kit hash\n    errors = []\n\n    kit_hash.each do |pack_name, pack_properties|\n      if pack_properties.empty?\n        errors.push([\"components_empty_for_#{pack_name}\".to_sym, 'Package components are empty!'])\n      end\n\n      if pack_properties[KIT_FIELD_VALUE] != op.input(KIT_FIELD_VALUE).sample\n        errors.push([\"kit_not_found_in_input_for_#{pack_name}\".to_sym, 'Input kit does not match output package definition.'])\n      end\n    end\n\n    kit_sample = op.input(KIT_FIELD_VALUE).sample\n    kit_sample_props = kit_sample.properties\n    num_codons = kit_sample_props[CODONS_FIELD_VALUE].length\n    num_codon_colors = kit_sample_props[CODON_COLORS_FIELD_VALUE].length\n    num_ligation_tubes = kit_hash[LIGATION_FIELD_VALUE][COMPONENTS_FIELD_VALUE]['sample tubes'].length\n    num_strips = kit_hash[DETECTION_FIELD_VALUE][COMPONENTS_FIELD_VALUE]['strips'].length\n\n    if debug\n      show do\n        title 'DEBUG: Kit Hash Errors'\n        errors.each do |k, v|\n          note \"#{k}: #{v}\"\n        end\n      end\n    end\n\n    errors.each do |k, v|\n      op.error(k, v)\n    end\n\n    if debug\n      show do\n        title 'DEBUG: Kit Hash'\n        note kit_hash_to_json(kit_hash).to_s\n        # note \"#{kit_hash}\"\n      end\n    end\n  end\n\n  ####################################\n  # Step Utilities\n  ####################################\n\n  def ask_if_expert\n    resp = show do\n      title 'Expert Mode?'\n      note 'Are you an expert at this protocol? If you do not know what this means, then continue without enabling expert mode.'\n      select ['Continue in normal mode', 'Enable expert mode'], var: :choice, label: 'Expert Mode?', default: 0\n    end\n    resp[:choice] == 'Enable expert mode'\n  end\n\n  def wash_self\n    show do\n      title 'Discard gloves and wash hands'\n      check \"After clicking #{'OK'.quote.bold}, discard your gloves and wash your hands with soap.\"\n    end\n  end\n\n  def check_for_tube_defects(_myops)\n    # show do\n    defects = show do\n      title 'Check for cracked or damaged tubes.'\n      select %w[No Yes], var: 'cracked', label: 'If there are cracks or defects in the tube, select \"Yes\" from the dropdown menu below.', default: 0\n      note \"If yes, #{SUPERVISOR} will replace the samples or tubes for you.\"\n    end\n\n    if defects['cracked'] == 'Yes'\n      show do\n        title \"Contact #{SUPERVISOR} about missing or damaged tubes.\"\n\n        note 'You said there are some problems with the samples.'\n        check \"Contact #{SUPERVISOR} about this issue.\"\n        note 'We will simply replace these samples for you.'\n      end\n    end\n  end\n\n  def area_preparation(which_area, materials, other_area)\n    show do\n      title \"#{which_area.cap} preparation\"\n\n      note \"You will be doing the protocol in the #{which_area.bold} area\"\n      warning \"Keep all materials in the #{which_area.bold} area separate from the #{other_area.bold} area\"\n      note \"Before continuing, make sure you have the following items in the #{which_area.bold} area:\"\n      materials.each do |i|\n        check i\n      end\n    end\n  end\n\n  def put_on_ppe(which_area)\n    show do\n      title 'Put on Lab Coat and Gloves'\n\n      check 'Put on a lab coat'\n      warning \"make sure lab coat is from the #{which_area.bold}\"\n      check 'Put on a pair of latex gloves.'\n    end\n  end\n\n  def transfer_title_proc(vol, from, to)\n    p = proc do\n      title \"Add #{vol}uL from #{from.bold} to #{to.bold}\"\n    end\n    ShowBlock.new(self).run(\u0026p)\n  end\n\n  def show_open_package(kit, unit, num_sub_packages)\n    show do\n      title \"Tear open #{kit.bold}#{unit.bold}\"\n      note 'Tear open all smaller packages.' if num_sub_packages \u003e 0\n      run(\u0026Proc.new) if block_given?\n      check 'Discard the packaging material.'\n    end\n  end\n\n  def disinfect\n    show do\n      title 'Disinfect Items'\n      check 'Spray and wipe down all reagent and sample tubes with 10% bleach.'\n      check 'Spray and wipe down all reagent and sample tubes with 70% ethanol.'\n    end\n  end\n\n  def centrifuge_proc(sample_identifier, sample_labels, time, reason, area, balance = false)\n    if area == PRE_PCR\n      centrifuge = CENTRIFUGE_PRE\n    elsif area == POST_PCR\n      centrifuge = CENTRIFUGE_POST\n    else\n      raise 'Invalid Area'\n    end\n    p = proc do\n      check \"Place #{sample_identifier.pluralize(sample_labels.length)} #{sample_labels.join(', ').bold} in the #{centrifuge}\"\n      check \"#{CENTRIFUGE_VERB.cap} #{pluralizer(sample_identifier, sample_labels.length)} for #{time} #{reason}\"\n      if balance\n        if num.even?\n          warning \"Balance tubes in the #{centrifuge} by placing #{num / 2} #{sample_identifier.pluralize(num / 2)} on each side.\"\n        else\n          warning \"Use a spare tube to balance #{sample_identifier.pluralize(num)}.\"\n        end\n      end\n    end\n    ShowBlock.new(self).run(\u0026p)\n  end\n\n  def vortex_proc(sample_identifier, sample_labels, time, reason)\n    p = proc do\n      # check \"Vortex #{pluralizer(sample_identifier, num)} for #{time} #{reason}\"\n      check \"Vortex #{sample_identifier.pluralize(sample_labels.length)} #{sample_labels.join(', ').bold} for #{time} #{reason}\"\n      # check \"Vortex #{sample_identifier.pluralize(sample_labels.length)} #{sample_labels.map { |label| label.bold })}\n    end\n    ShowBlock.new(self).run(\u0026p)\n  end\n\n  def centrifuge_helper(sample_identifier, sample_labels, time, reason, area, mynote = nil)\n    sample_labels = sample_labels.uniq\n    show do\n      title \"#{CENTRIFUGE_VERB.cap} #{sample_identifier.pluralize(sample_labels.length)} for #{time}\"\n      note mynote unless mynote.nil?\n      warning \"Ensure #{pluralizer('tube cap', sample_labels.length)} are closed before centrifuging.\"\n      raw centrifuge_proc(sample_identifier, sample_labels, time, reason, area)\n    end\n  end\n\n  def vortex_helper(sample_identifier,\n                    sample_labels,\n                    vortex_time,\n                    vortex_reason, mynote = nil)\n    num = sample_labels.length\n    show do\n      title \"Vortex #{sample_identifier.pluralize(num)}\"\n      note mynote unless mynote.nil?\n      warning \"Close #{pluralizer('tube cap', sample_labels.length)}.\"\n      raw vortex_proc(sample_identifier, sample_labels, vortex_time, vortex_reason)\n    end\n  end\n\n  def vortex_and_centrifuge_helper(sample_identifier,\n                                   sample_labels,\n                                   vortex_time, spin_time,\n                                   vortex_reason, spin_reason, area, mynote = nil)\n    num = sample_labels.length\n    show do\n      title \"Vortex and #{CENTRIFUGE_VERB} #{sample_identifier.pluralize(num)}\"\n      note mynote unless mynote.nil?\n      warning \"Close tube caps.\"\n      # note \"Using #{sample_identifier.pluralize(num)} #{sample_labels.join(', ').bold}:\"\n      raw vortex_proc(sample_identifier, sample_labels, vortex_time, vortex_reason)\n      raw centrifuge_proc(sample_identifier, sample_labels, spin_time, spin_reason, area)\n      check 'Place the tubes back on rack'\n    end\n  end\n\n  def add_to_thermocycler(sample_identifier, sample_labels, program_name, program_table, name)\n    len = if sample_labels.is_a?(Array)\n            sample_labels.length\n          else\n            sample_labels\n          end\n\n    show do\n      title \"Run #{name}\"\n      check \"Add #{pluralizer(sample_identifier, len)} to #{THERMOCYCLER}\"\n      check 'Close and tighten the lid.'\n      check \"Select the program named #{program_name.bold} under the \u003cb\u003eOS\u003c/b\u003e\"\n      check 'Hit \u003cb\u003e\"Run\"\u003c/b\u003e and click \u003cb\u003e\"OK\"\u003c/b\u003e'\n      table program_table\n    end\n  end\n\n  def clean_area(area)\n    show do\n      disinfectant = '10% bleach'\n      title \"Wipe down #{area} with #{disinfectant.bold}.\"\n      note \"Now you will wipe down your #{area} space and equipment with #{disinfectant.bold}.\"\n      check \"Spray #{disinfectant.bold} onto a #{WIPE} and clean off pipettes and pipette tip boxes.\"\n      check \"Spray #{disinfectant.bold} onto a #{WIPE} and wipe down the bench surface.\"\n      # check \"Spray some #{disinfectant.bold} on a #{WIPE}, gently wipe down keyboard and mouse of this computer/tablet.\"\n      warning \"Do not spray 10% bleach directly onto tablet, computer, barcode scanner or centrifuge!\"\n      # check \"Finally, spray outside of gloves with #{disinfectant.bold}.\"\n    end\n\n    show do\n      disinfectant = '70% ethanol'\n      title \"Wipe down #{area} with #{disinfectant.bold}.\"\n      note \"Now you will wipe down your #{area} space and equipment with #{disinfectant.bold}.\"\n      check \"Spray #{disinfectant.bold} onto a #{WIPE} and clean off pipettes and pipette tip boxes.\"\n      check \"Spray #{disinfectant.bold} onto a #{WIPE} and wipe down the bench surface.\"\n      note \"Bleach residues can inhibit the assay. Make sure to completely wipe all surface with 70% ethanol spray\"\n      warning \"Do not spray #{disinfectant.bold} onto tablet or computer!\"\n      # check \"Finally, spray outside of gloves with #{disinfectant.bold}.\"\n    end\n  end\n\n  def simple_clean(protocol)\n    show do\n      title 'Ensure Workspace is Clean'\n      note \"#{protocol} is prone to contamination. False positives can occur when the area is not clean.\"\n      check \"If area is not clean, or you aren't sure, wipe down space with 10% bleach and 70% ethanol.\"\n      note 'Spray disinfectants onto wipes, not directly onto surfaces.'\n      warning 'Only spray bleach and ethanol when all tubes are closed. Bleach can inhibit the reactions.'\n    end\n  end\n\n  def area_setup(area, materials, other_area = nil)\n    area_preparation area, materials, other_area\n    put_on_ppe area\n    clean_area area\n  end\n\n  def safety_warning(area = nil)\n    grid = SVGGrid.new(3, 1, 200, 100)\n    grid.add(gloves_svg, 0, 0)\n    grid.add(coat_svg, 1, 0)\n    img2 = SVGElement.new(children: [grid], boundx: 1000, boundy: 200)\n    show do\n      title 'Review Safety Warnings'\n      note '\u003cb\u003eAlways\u003c/b\u003e pay attention to orange warning blocks throughout the protocol.'\n      if area \u0026\u0026 area == PRE_PCR\n        img1 = SVGElement.new(children: [bsc_svg], boundx: 200, boundy: 200)\n        warning '\u003cb\u003eINFECTIOUS MATERIALS\u003c/b\u003e'\n        note 'You will be working with infectious materials.'\n        note 'Do \u003cb\u003eALL\u003c/b\u003e work in a biosafety cabinet (BSC).'\n        note display_svg(img1, 0.2)\n      end\n      note '\u003cb\u003ePPE is required\u003c/b\u003e'\n      note display_svg(img2, 0.2)\n      check 'Put on lab coat.'\n      check \"Put on #{(area \u0026\u0026 area == PRE_PCR) ? 'layers of ' : ''}gloves.\"\n      bullet 'Make sure to use tight gloves. Tight gloves reduce the chance of the gloves getting caught on the tubes when closing their lids.'\n      if area \u0026\u0026 area == PRE_PCR\n        bullet 'Change outer layer of gloves after handling infectious sample and before touching surfaces outside of the BSC (such as a refrigerator door handle).'\n      end\n    end\n  end\n\n  def gloves_svg\n    icon_from_html(\n      '\u003csvg\u003e\u003ctitle\u003e3_gloveson\u003c/title\u003e\u003cpath d=\"M413,353c0-2.8-1.1-12.4-4-17.3s-10.8-22.1-10-27.2,1.2-16.4-.4-21.7-3.2-14-3.2-14-2.5-6.4,1.1-6.6,10.5,3.9,12.1,10.5,2.6,16.2,4.8,20.6c0,0,14-18.4,14.8-22.7s9.7-26.5,9.8-28,7.1-20.2,11-22.6,5.9-3.4,7.2-1.7a13.26,13.26,0,0,1,1.6,5.3s4-11.7,6.2-11.7c0,0,5.5-3.9,7.2,1.6a20.58,20.58,0,0,1-.2,11.2l-2.3,11.9c1.9-5.5,4.5-12.7,6-12.7,2.2,0,8.6-4,6.5,5.7-1.8,8.7-5.3,22.8-6,25.6h0c2.1-5.7,4.4-6.8,8.3-8.7s1.6,12.5,1.6,14.6-5.4,20.3-5.7,30.5-7.2,29.6-10.5,34.5-14.4,31.2-16.3,36.2,1.8,21.2-1.6,27.2-39.9-12.9-39.9-12.9S413,355.8,413,353Z\" transform=\"translate(-305.22 -213.96)\" fill=\"#b4b9de\"/\u003e\u003cpath d=\"M420.9,306.2s-4.7-4.5-6.9-8.9-3.2-14-4.8-20.6-8.5-10.7-12.1-10.5-1.1,6.6-1.1,6.6,1.7,8.7,3.2,14,1.1,16.6.4,21.7,7.1,22.2,10,27.2,4,14.5,4,17.3-2,27.8-2,27.8,36.4,18.9,39.9,12.9-.3-22.2,1.6-27.2,13-31.3,16.3-36.2,10.2-24.3,10.5-34.5,5.7-28.5,5.7-30.5,2.3-16.5-1.6-14.6-6.4,3-8.5,9.2-3.2,18.2-4.6,21.7-1.2,8.5-1.2,8.5\" transform=\"translate(-305.22 -213.96)\" fill=\"none\" stroke=\"#2e3192\" stroke-miterlimit=\"10\"/\u003e\u003cpath d=\"M414,297.3s14-18.4,14.8-22.7,9.7-26.5,9.8-28,7.1-20.2,11-22.6,5.9-3.4,7.2-1.7a13.26,13.26,0,0,1,1.6,5.3,14.65,14.65,0,0,1-1.1,8c-2.4,4.7-10.6,26.7-11.5,32s-1.5,8.6-1.5,8.6\" transform=\"translate(-305.22 -213.96)\" fill=\"none\" stroke=\"#2e3192\" stroke-miterlimit=\"10\"/\u003e\u003cpath d=\"M456.8,278.9s9.2-30.5,10.5-32.8,5.9-18.4,8.1-18.4,8.6-4,6.5,5.7-6.2,26.2-6.2,26.2\" transform=\"translate(-305.22 -213.96)\" fill=\"none\" stroke=\"#2e3192\" stroke-miterlimit=\"10\"/\u003e\u003cpath d=\"M458.4,227.5s4-11.7,6.2-11.7c0,0,5.5-3.9,7.2,1.6a20.58,20.58,0,0,1-.2,11.2l-2.3,11.9\" transform=\"translate(-305.22 -213.96)\" fill=\"none\" stroke=\"#2e3192\" stroke-miterlimit=\"10\"/\u003e\u003cpath d=\"M384.9,353.1c0-2.6,1.1-11.6,4.3-16s11.5-20,10.7-24.8-1.4-15.5.3-20.3a129.68,129.68,0,0,0,3.4-12.9s2.6-5.9-1.2-6.2-11.3,2.9-13,9-2.7,15.1-5.1,19c0,0-15.2-18.2-16-22.3s-10.6-25.5-10.6-27-7.7-19.5-11.9-22-6.3-3.6-7.7-2.1a10.09,10.09,0,0,0-1.7,4.8s-4.3-11.3-6.7-11.4c0,0-5.9-4-7.7,1s.3,10.5.3,10.5l2.5,11.3c-2.1-5.3-4.9-12.3-6.5-12.4-2.4-.2-9.2-4.4-7,4.9,2,8.3,5.8,21.8,6.6,24.5h0c-2.2-5.5-4.8-6.7-8.9-8.7-4.3-2.1-1.7,11.6-1.7,13.6s5.9,19.5,6.2,29.1,7.9,28.3,11.4,33.2,15.6,30.3,17.6,35.2-1.9,19.8,1.8,25.7,42.9-9.3,42.9-9.3S384.9,355.7,384.9,353.1Z\" transform=\"translate(-305.22 -213.96)\" fill=\"#b4b9de\"/\u003e\u003cpath d=\"M376.2,308.6s5-3.9,7.4-7.9,3.5-12.9,5.1-19,9.1-9.4,13-9,1.2,6.2,1.2,6.2-1.8,8.1-3.4,12.9-1.1,15.5-.3,20.3-7.6,20.4-10.7,24.8-4.2,13.4-4.3,16,2.2,26.3,2.2,26.3-39.2,15.2-42.9,9.3.3-20.8-1.8-25.7-14.1-30.4-17.6-35.2-11.1-23.5-11.4-33.2-6.3-27.1-6.2-29.1-2.6-15.7,1.7-13.6,6.9,3.3,9.1,9.2,3.5,17.4,5,20.7,1.3,8.1,1.3,8.1\" transform=\"translate(-305.22 -213.96)\" fill=\"none\" stroke=\"#2e3192\" stroke-miterlimit=\"10\"/\u003e\u003cpath d=\"M383.6,300.7s-15.2-18.2-16-22.3-10.6-25.5-10.6-27-7.7-19.5-11.9-22-6.3-3.6-7.7-2.1a10.09,10.09,0,0,0-1.7,4.8,12.13,12.13,0,0,0,1.3,7.6c2.6,4.6,11.5,25.8,12.5,30.9s1.7,8.2,1.7,8.2\" transform=\"translate(-305.22 -213.96)\" fill=\"none\" stroke=\"#2e3192\" stroke-miterlimit=\"10\"/\u003e\u003cpath d=\"M337.5,280.5s-10-29.3-11.4-31.6-6.4-17.7-8.8-17.8-9.2-4.4-7,4.9,6.7,25,6.7,25\" transform=\"translate(-305.22 -213.96)\" fill=\"none\" stroke=\"#2e3192\" stroke-miterlimit=\"10\"/\u003e\u003cpath d=\"M335.6,232.1s-4.3-11.3-6.7-11.4c0,0-5.9-4-7.7,1s.3,10.5.3,10.5l2.5,11.3\" transform=\"translate(-305.22 -213.96)\" fill=\"none\" stroke=\"#2e3192\" stroke-miterlimit=\"10\"/\u003e\u003c/svg\u003e'\n    )\n  end\n\n  def coat_svg\n    icon_from_html(\n      '\u003csvg\u003e\u003ctitle\u003e3_labcoaton\u003c/title\u003e\u003cpath d=\"M365.7,206.7l-33.6,12.8s-10.5,4.2-10.5,12.6V349h27.9l.6,52.7H440V349.6l28.8-.7V235.1s-5.4-17.4-20.4-19.2L425,206.7H365.7Z\" transform=\"translate(-320.6 -205.7)\" fill=\"#abb2da\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cpath d=\"M458.5,246.8a94.68,94.68,0,0,0-5-30.2,20.07,20.07,0,0,0-5.1-1.3L425,206.1H365.7l-33.6,12.8s-10.5,4.2-10.5,12.6V335.6a102.22,102.22,0,0,0,37.3,7C413.9,342.5,458.5,299.6,458.5,246.8Z\" transform=\"translate(-320.6 -205.7)\" fill=\"#d8def0\"/\u003e\u003cpolyline points=\"45.1 1 74.6 45.5 104.4 1\" fill=\"#919195\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cpolyline points=\"34.4 5.1 36.4 28.5 53.1 31.4 53.1 43.2 74.7 71.1 94.8 45.5 94.8 31.4 110.5 25.5 112.5 5.1\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cline x1=\"28.9\" y1=\"143.2\" x2=\"28.9\" y2=\"51.9\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cline x1=\"119.4\" y1=\"143.8\" x2=\"119.4\" y2=\"51.9\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cpath d=\"M365.7,206.7l-33.6,12.8s-10.5,4.2-10.5,12.6V349h27.9l.6,52.7H440V349.6l28.8-.7V235.1s-5.4-17.4-20.4-19.2L425,206.7H365.7Z\" transform=\"translate(-320.6 -205.7)\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cline x1=\"74.6\" y1=\"45.5\" x2=\"74.6\" y2=\"197.6\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cline x1=\"40.3\" y1=\"125.9\" x2=\"60.3\" y2=\"125.9\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cline x1=\"88.8\" y1=\"125.9\" x2=\"109.4\" y2=\"125.9\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cline x1=\"40.3\" y1=\"71.4\" x2=\"60.3\" y2=\"71.4\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cpath d=\"M376.8,223.4\" transform=\"translate(-320.6 -205.7)\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cpolygon points=\"93.2 17.7 74.6 45.5 56.2 17.7 93.2 17.7\" fill=\"#abb2da\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003c/svg\u003e'\n    )\n  end\n\n  def bsc_svg\n    icon_from_html(\n      '\u003csvg\u003e\u003ctitle\u003e3_bsccabinet\u003c/title\u003e\u003cpath d=\"M481.7,319.3H309.3a7.17,7.17,0,0,1-7.2-7.2V222.6a7.17,7.17,0,0,1,7.2-7.2H481.7a7.17,7.17,0,0,1,7.2,7.2v89.5A7.3,7.3,0,0,1,481.7,319.3Z\" transform=\"translate(-302.1 -215.4)\" fill=\"#d8def0\"/\u003e\u003cpath d=\"M462.7,233.3H331a7.17,7.17,0,0,1-7.2-7.2v-2.2a7.17,7.17,0,0,1,7.2-7.2H462.8a7.17,7.17,0,0,1,7.2,7.2v2.2A7.32,7.32,0,0,1,462.7,233.3Z\" transform=\"translate(-302.1 -215.4)\" fill=\"#262261\" stroke=\"#2e3191\" stroke-miterlimit=\"10\"/\u003e\u003cpath d=\"M481.6,216.9H463.2c8,7.6,12.7,16.7,12.7,26.4,0,26.9-35.5,48.7-79.3,48.7s-79.3-21.8-79.3-48.7c0-9.7,4.7-18.8,12.7-26.4H309.3a7.17,7.17,0,0,0-7.2,7.2v89.5a7.17,7.17,0,0,0,7.2,7.2H481.7a7.17,7.17,0,0,0,7.2-7.2V224.1A7.39,7.39,0,0,0,481.6,216.9Z\" transform=\"translate(-302.1 -215.4)\" fill=\"#abb2da\"/\u003e\u003crect x=\"10.2\" y=\"103.9\" width=\"7.5\" height=\"76.1\" fill=\"#abb2da\"/\u003e\u003crect x=\"167.8\" y=\"103.9\" width=\"7.5\" height=\"76.1\" fill=\"#abb2da\"/\u003e\u003cpolyline points=\"7.1 1.5 7.1 79.9 179.3 80.8 179.5 1.5\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cline x1=\"40.4\" y1=\"20.4\" x2=\"27.8\" y2=\"34.2\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cline x1=\"69.8\" y1=\"20.4\" x2=\"64.4\" y2=\"34.2\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cline x1=\"117.9\" y1=\"20.4\" x2=\"122.1\" y2=\"34.2\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003cline x1=\"160.4\" y1=\"20.4\" x2=\"171.6\" y2=\"30.9\" fill=\"none\" stroke=\"#2e3191\" stroke-miterlimit=\"10\" stroke-width=\"2\"/\u003e\u003c/svg\u003e'\n    )\n  end\n\n  ####################################\n  # Displaying Images\n  ######################################\n  def extract_basename(filename)\n    ext = File.extname(filename)\n    basename = File.basename(filename, ext)\n    basename\n  end\n\n  def show_with_expected_uploads(op, filename, save_key = nil, num_tries = 5)\n    upload_hashes = []\n    warning_msg = nil\n    num_tries.times.each do |i|\n      next unless upload_hashes.empty?\n\n      # ask for uploads\n      result = show do\n        warning warning_msg unless warning_msg.nil?\n        run(\u0026Proc.new) if block_given?\n        upload var: :files\n      end\n      upload_hashes = result[:files] || []\n\n      if debug \u0026\u0026 (i \u003e= 1)\n        n = 'default_filename.txt'\n        n = filename if i \u003e= 2\n        upload_hashes.push({ id: 12_345, name: n })\n      end\n\n      # try again if not files were uploaded\n      warning_msg = 'You did not upload any files! Please try again.' if upload_hashes.empty?\n\n      next if upload_hashes.empty?\n\n      # get name to id hash\n      name_to_id_hash = upload_hashes.map { |u| [extract_basename(u[:name]), u[:id]] }.to_h\n\n      # get the file even if technician uploaded multiple files\n      if name_to_id_hash.keys.include?(extract_basename(filename))\n        upload_hashes = [{ name: filename, id: name_to_id_hash[filename] }]\n      else\n        warning_msg = \"File #{filename} not uploaded. Please find file \u003cb\u003e\\\"#{filename}\\\"\u003c/b\u003e. You uploaded files #{name_to_id_hash.keys.join(', ')}\"\n        upload_hashes = []\n      end\n    end\n    raise 'Expected file uploads, but there were none!' if upload_hashes.empty?\n\n    upload_ids = upload_hashes.map { |uhash| uhash[:id] }\n    uploads = []\n    if debug\n      random_uploads = Upload.includes(:job)\n      uploads = upload_ids.map { |_u| random_uploads.sample }\n    else\n      uploads = upload_ids.map { |u_id| Upload.find(u_id) }\n    end\n    upload = uploads.first\n    raise 'Expected file uploads, but there were none!' if upload.nil?\n    op.temporary[save_key] = upload unless save_key.nil?\n    op.temporary[\"#{save_key}_id\".to_sym] = upload.id unless save_key.nil?\n    upload\n  end\n\n  def display_upload(upload, size = '100%')\n    p = proc do\n      note \"\u003cimg src=\\\"#{upload.expiring_url}\\\" width=\\\"#{size}\\\"\u003e\u003c/img\u003e\"\n    end\n    ShowBlock.new(self).run(\u0026p)\n  end\n\n  def display_strip_section(upload, display_section, num_sections, size)\n    p = proc do\n      x = 100.0 / num_sections\n      styles = []\n      num_sections.times.each do |section|\n        x1 = 100 - (x * (section + 1)).to_i\n        x2 = (x * section).to_i\n        styles.push(\".clipimg#{section} { clip-path: inset(0% #{x1}% 0% #{x2}%); }\")\n      end\n      style = \"\u003chead\u003e\u003cstyle\u003e#{styles.join(' ')}\u003c/style\u003e\u003c/head\u003e\"\n      note style\n      note \"\u003cimg class=\\\"clipimg#{display_section}\\\" src=\\\"#{upload.expiring_url}\\\" width=\\\"#{size}\\\"\u003e\u003c/img\u003e\"\n    end\n    ShowBlock.new(self).run(\u0026p)\nend\nend\n"}},{"library":{"name":"OLAScheduling","category":"OLASimple","code_source":"module OLAScheduling\n  \n  SCHEDULER_USER = User.first\n  \n  # redundant definitions from OLAConstants required to get around precondition limitations\n  BATCH_SIZE = 2\n  KIT_KEY = :kit\n  KIT_PARAMETER = \"Kit Identifier\"\n  \n  # retrieve kit id from first input's associations if avialable,\n  # also try to retrieve kit id from a kit input parameter if it is available.\n  # returns nil if no kit could be found\n  def get_kit_id(op)\n    op.inputs[0].retrieve\n    op.inputs[0].item\u0026.get(KIT_KEY) || op.input(KIT_PARAMETER)\u0026.value\n  end\n  \n  # return if this protocol is being run in developer testing mode \n  def testing_mode?(op)\n    op.plan.nil?\n  end\n  \n  # used in place of returning true in precondition\n  # gathers together all the other ops with the same kit\n  # and schedules them together if they are all ready\n  # looks at this_op.inputs[0].item.get(KIT_KEY) to decide what kit an op belongs\n  # \n  def schedule_same_kit_ops(this_op)\n    return true if testing_mode?(this_op)\n\n    kit_id = get_kit_id(this_op)\n    if kit_id.nil?\n      this_op.error(:no_kit, \"This operation did not have an associated kit id in its input and so couldn't be batched\")\n      exit\n    end\n    \n    operations = Operation.where({operation_type_id: this_op.operation_type_id, status: [\"pending\"]})\n    this_op.status = \"pending\"\n    this_op.save\n    operations \u003c\u003c this_op\n    operations = operations.to_a.uniq\n    operations = operations.select { |op| get_kit_id(op) == kit_id }\n    if operations.length == BATCH_SIZE\n      Job.schedule(\n        operations: operations,\n        user: SCHEDULER_USER\n      )\n    elsif operations.length \u003e BATCH_SIZE\n      operations.each do |op|\n        op.error(:batch_too_big, \"There are too many samples being run with kit #{kit_id}. The Batch size is set to #{BATCH_SIZE}, but there are #{operations.length} operations which list #{kit_id} as their kit association.\")\n        op.save\n        op.plan.error(\"There are too many samples being run with kit #{kit_id}. The Batch size is set to #{BATCH_SIZE}, but there are #{operations.length} operations which list #{kit_id} as their kit association.\", :batch_too_big)\n        op.plan.save\n      end\n    end\n    exit\n  end\nend"}},{"library":{"name":"RNAExtractionResources","category":"OLASimple","code_source":"needs 'OLASimple/OLAGraphics'\nneeds 'OLASimple/OLALib'\n\nmodule RNAExtractionResources\n  include OLALib\n  include OLAGraphics\n  include FunctionalSVG\n\n  def display_and_wrap_with_new_bounds_and_size(html, bx, by, scale)\n    svg = icon_from_html(html)\n    result = SVGElement.new(children: [svg], boundx: bx, boundy: by)\n    display_svg(result, scale)\n  end\n\n  def display_ethanol_question_svg\n    html = '\u003csvg\u003e\u003ctitle\u003e1_Ethanol_questions\u003c/title\u003e\u003crect x=\"270.62\" y=\"215.13\" width=\"54.1\" height=\"54.1\" transform=\"translate(-167.09 177.27) rotate(-45)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003cline x1=\"195.58\" y1=\"118.85\" x2=\"233.78\" y2=\"157.15\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003cline x1=\"233.78\" y1=\"118.85\" x2=\"195.58\" y2=\"157.15\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"265.28\" y=\"228.72\" width=\"26.8\" height=\"26.8\" transform=\"translate(-172.61 163.82) rotate(-45)\" fill=\"#3b53a4\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"284.26\" y=\"209.72\" width=\"26.8\" height=\"26.8\" transform=\"translate(-153.61 171.68) rotate(-45)\" fill=\"#ed1c24\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"303.57\" y=\"228.71\" width=\"26.8\" height=\"26.8\" transform=\"translate(-161.38 190.9) rotate(-45)\" fill=\"#fff200\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003ctext transform=\"translate(208.58 127.95)\" font-size=\"25.86\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e3\u003c/text\u003e\u003ctext transform=\"translate(189.26 144.42)\" font-size=\"25.86\" fill=\"#fff\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e2\u003c/text\u003e\u003ctext transform=\"translate(227.54 144.42)\" font-size=\"25.86\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e1\u003c/text\u003e\u003cg style=\"isolation:isolate\"\u003e\u003ctext transform=\"translate(182.73 193.95)\" font-size=\"17.15\" font-family=\"Arial-BoldMT, Arial\" font-weight=\"700\" style=\"isolation:isolate\"\u003eEthanol\u003c/text\u003e\u003ctext transform=\"translate(178.93 214.55)\" font-size=\"17.15\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003econtainer\u003c/text\u003e\u003c/g\u003e\u003ccircle cx=\"68.58\" cy=\"68.35\" r=\"58.1\" fill=\"#f7941d\" stroke=\"#be1e2d\" stroke-miterlimit=\"10\"/\u003e\u003ctext transform=\"translate(51.87 110.88)\" font-size=\"120.58\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003e!\u003c/text\u003e\u003cpath d=\"M248.8,244.7\" transform=\"translate(-83.02 -104.15)\" fill=\"none\"/\u003e\u003cpath d=\"M341.4,322.9H254a8.66,8.66,0,0,1-8.6-8.6V189.8a8.66,8.66,0,0,1,8.6-8.6h87.3a8.66,8.66,0,0,1,8.6,8.6V314.3A8.51,8.51,0,0,1,341.4,322.9Z\" transform=\"translate(-83.02 -104.15)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M297.7,104.4c-28.9,0-52.3,6.3-52.3,14.2V178c0,7.8,23.4,14.2,52.3,14.2S350,185.9,350,178V118.7C350,110.8,326.6,104.4,297.7,104.4Z\" transform=\"translate(-83.02 -104.15)\" fill=\"#c4e4f1\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cellipse cx=\"214.68\" cy=\"14.25\" rx=\"40.4\" ry=\"8.4\" fill=\"#c4e4f1\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"171.68\" y1=\"25.45\" x2=\"171.68\" y2=\"74.05\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"216.58\" y1=\"33.45\" x2=\"216.58\" y2=\"82.05\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"260.88\" y1=\"22.65\" x2=\"260.88\" y2=\"71.25\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"239.98\" y1=\"31.05\" x2=\"239.98\" y2=\"79.65\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"193.18\" y1=\"31.05\" x2=\"193.18\" y2=\"79.65\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cg style=\"isolation:isolate\"\u003e\u003ctext transform=\"translate(0.8 165.64)\" font-size=\"29.41\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003eMolecular \u003c/text\u003e\u003ctext transform=\"translate(0 200.94)\" font-size=\"29.41\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003egrade only\u003c/text\u003e\u003c/g\u003e\u003c/svg\u003e'\n    display_and_wrap_with_new_bounds_and_size(html, 400, 250, 0.4)\n  end\n\n  def display_guscn_waste_svg\n    html = '\u003csvg\u003e\u003ctitle\u003e1.2_GuSCNwaste_reminder\u003c/title\u003e\u003cpolygon points=\"241.98 240.68 241.98 442.88 189.58 462.48 141.98 442.88 141.98 240.68 141.98 147.68 241.98 147.68 241.98 240.68\" fill=\"#e2ecf7\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M332.5,261.9V387a15.51,15.51,0,0,1-1.1,5.6l-30.6,75.5a15,15,0,0,1-13.8,9.3h0a15,15,0,0,1-14.1-9.9l-26.8-75.2a14.26,14.26,0,0,1-.9-5V168.9h87.3Z\" transform=\"translate(-97.12 -21.22)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"262.32\" y=\"234.91\" width=\"54.1\" height=\"54.1\" transform=\"translate(-197.6 260.12) rotate(-45)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003cline x1=\"173.08\" y1=\"221.58\" x2=\"211.38\" y2=\"259.88\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003cline x1=\"211.38\" y1=\"221.58\" x2=\"173.08\" y2=\"259.88\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"256.97\" y=\"248.5\" width=\"26.8\" height=\"26.8\" transform=\"translate(-203.12 246.67) rotate(-45)\" fill=\"#3b53a4\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"275.95\" y=\"229.5\" width=\"26.8\" height=\"26.8\" transform=\"translate(-184.13 254.53) rotate(-45)\" fill=\"#ed1c24\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"295.27\" y=\"248.49\" width=\"26.8\" height=\"26.8\" transform=\"translate(-191.9 273.75) rotate(-45)\" fill=\"#fff200\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003ctext transform=\"translate(186.16 230.68)\" font-size=\"25.86\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e1\u003c/text\u003e\u003ctext transform=\"translate(166.84 247.14)\" font-size=\"25.86\" fill=\"#fff\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e2\u003c/text\u003e\u003ctext transform=\"translate(205.12 247.14)\" font-size=\"25.86\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e2\u003c/text\u003e\u003cpath d=\"M116.4,48S147.7,78,159,68.6s22.6-44,22.6-44-1.3,56.2,12.5,53.6c0,0,5,6.5,48.9-9.3,0,0-35.1,13.4-30.1,23.2s36.3,25.3,52.6,28.2c0,0-51.4-7.7-58.9,5.1s0,51.7,0,51.7-16.3-41.1-25.1-40-46.3,31.2-47.6,40,12.5-30.6,8.8-46S97.2,109,97.2,109s40.5,2,40.5-7.6S131.4,60.5,116.4,48Z\" transform=\"translate(-97.12 -21.22)\" fill=\"#e41c42\" stroke=\"#be1e2d\" stroke-miterlimit=\"10\"/\u003e\u003ctext transform=\"translate(62.69 113.49)\" font-size=\"96.86\" fill=\"#fff\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e!\u003c/text\u003e\u003cpath d=\"M233.6,139.3v37.2c0,6.6,24.7,11.9,55.2,11.9s55.2-5.3,55.2-11.9V139.3Z\" transform=\"translate(-97.12 -21.22)\" fill=\"#e2ecf7\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cellipse cx=\"191.78\" cy=\"118.08\" rx=\"55.2\" ry=\"11.9\" fill=\"#e2ecf7\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cg style=\"isolation:isolate\"\u003e\u003ctext transform=\"translate(162.2 314.24)\" font-size=\"17.15\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003eGuSCN\u003c/text\u003e\u003ctext transform=\"translate(167.4 334.84)\" font-size=\"17.15\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003e\u003ctspan letter-spacing=\"-0.04em\"\u003eW\u003c/tspan\u003e\u003ctspan x=\"15.55\" y=\"0\"\u003easte\u003c/tspan\u003e\u003c/text\u003e\u003ctext transform=\"translate(154.6 355.44)\" font-size=\"17.15\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003eContainer\u003c/text\u003e\u003c/g\u003e\u003c/svg\u003e'\n    display_and_wrap_with_new_bounds_and_size(html, 400, 450, 0.3)\n  end\n\n  def display_balance_tubes_svg\n    html = '\u003csvg\u003e\u003cdefs\u003e\u003cradialGradient id=\"radial-gradient\" cx=\"180.58\" cy=\"270.85\" r=\"117.85\" gradientUnits=\"userSpaceOnUse\"\u003e\u003cstop offset=\"0\" stop-color=\"#fff\"/\u003e\u003cstop offset=\"0.86\" stop-color=\"#4a4a4c\"/\u003e\u003cstop offset=\"1\"/\u003e\u003c/radialGradient\u003e\u003c/defs\u003e\u003ctitle\u003e27_balance_tubes\u003c/title\u003e\u003ccircle cx=\"180.58\" cy=\"270.85\" r=\"117.85\" stroke=\"#231f20\" stroke-miterlimit=\"10\" fill=\"url(#radial-gradient)\"/\u003e\u003ccircle cx=\"180.58\" cy=\"270.85\" r=\"75.29\" fill=\"#101112\" stroke=\"#231f20\" stroke-miterlimit=\"10\"/\u003e\u003ccircle cx=\"180.58\" cy=\"270.85\" r=\"50.55\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\"/\u003e\u003cline x1=\"154.55\" y1=\"282.71\" x2=\"203.07\" y2=\"255.13\" fill=\"none\" stroke=\"#b7bde0\" stroke-miterlimit=\"10\" stroke-width=\"6\"/\u003e\u003cpolygon points=\"161.27 289.22 143.32 289.1 152.4 273.61 161.27 289.22\" fill=\"#b7bde0\"/\u003e\u003cpolygon points=\"205.22 264.24 214.3 248.75 196.35 248.63 205.22 264.24\" fill=\"#b7bde0\"/\u003e\u003ccircle cx=\"265.49\" cy=\"227.03\" r=\"17.7\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\"/\u003e\u003ccircle cx=\"95.36\" cy=\"318.03\" r=\"17.7\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\"/\u003e\u003ccircle cx=\"287.34\" cy=\"328.2\" r=\"17.7\" transform=\"translate(-164.55 258.98) rotate(-42.09)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"3\"/\u003e\u003ccircle cx=\"105.78\" cy=\"262.96\" r=\"17.7\" transform=\"translate(-167.64 120.44) rotate(-42.09)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"3\"/\u003e\u003ccircle cx=\"208.73\" cy=\"385.14\" r=\"17.7\" transform=\"translate(-245.63 412.34) rotate(-67.5)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"3\"/\u003e\u003ccircle cx=\"189.75\" cy=\"193.14\" r=\"17.7\" transform=\"translate(-79.96 276.27) rotate(-67.5)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"3\"/\u003e\u003ccircle cx=\"95.36\" cy=\"318.03\" r=\"14.57\" fill=\"#3950a3\" stroke=\"#231f20\" stroke-miterlimit=\"10\"/\u003e\u003ccircle cx=\"265.49\" cy=\"227.03\" r=\"14.57\" fill=\"#3950a3\" stroke=\"#231f20\" stroke-miterlimit=\"10\"/\u003e\u003ctext transform=\"translate(84.23 324.51)\" font-size=\"21.17\" fill=\"#fff\" font-family=\"MyriadPro-Regular, Myriad Pro\"\u003eE5\u003c/text\u003e\u003ctext transform=\"translate(255.87 234)\" font-size=\"21.17\" fill=\"#fff\" font-family=\"MyriadPro-Regular, Myriad Pro\"\u003eE5\u003c/text\u003e\u003ctext transform=\"translate(124.41 132.67)\" font-size=\"20.72\" fill=\"#231f20\" font-family=\"ArialMT, Arial\"\u003eBalance tubes\u003c/text\u003e\u003cpath d=\"M37.94,45.07s31.3,30,42.6,20.6,22.6-44,22.6-44-1.3,56.2,12.5,53.6c0,0,5,6.5,48.9-9.3,0,0-35.1,13.4-30.1,23.2s36.3,25.3,52.6,28.2c0,0-51.4-7.7-58.9,5.1s0,51.7,0,51.7-16.3-41.1-25.1-40-46.3,31.2-47.6,40,12.5-30.6,8.8-46-45.5-22.1-45.5-22.1,40.5,2,40.5-7.6S52.94,57.57,37.94,45.07Z\" transform=\"translate(-18.66 -18.29)\" fill=\"#e22043\" stroke=\"#be202e\" stroke-miterlimit=\"10\"/\u003e\u003ctext transform=\"translate(62.69 113.49)\" font-size=\"96.86\" fill=\"#fff\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e!\u003c/text\u003e\u003c/svg\u003e'\n    display_and_wrap_with_new_bounds_and_size(html, 400, 450, 0.4)\n  end\n\n  def display_elution_addition\n    html = '\u003csvg\u003e\u003ctitle\u003eelute1\u003c/title\u003e\u003cpath d=\"M395.71,259.27a3.88,3.88,0,0,0,3.29-2.79,4.85,4.85,0,0,0-.42-4.28\" transform=\"translate(-350.77 -211.88)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M395.71,261.1a6,6,0,0,0,6.16-4.86,5.79,5.79,0,0,0-3.17-7\" transform=\"translate(-350.77 -211.88)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"366.77\" y=\"233.47\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(-48.1 -417.64) rotate(47.83)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M360.94,261.62v51.26a1.65,1.65,0,0,0,.85,1.44l5.56,3.06a1.65,1.65,0,0,1,.85,1.44v7.3a1.65,1.65,0,0,0,1.65,1.65H384.4a1.65,1.65,0,0,0,1.65-1.65v-7.25a1.65,1.65,0,0,1,.91-1.48l6.18-3.09a1.65,1.65,0,0,0,.91-1.48V261.62\" transform=\"translate(-350.77 -211.88)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"18.83\" y=\"105.98\" width=\"15.06\" height=\"6.09\" rx=\"0.98\" ry=\"0.98\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"364.23\" y=\"232.06\" width=\"42.88\" height=\"7.39\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(-49.27 -420.24) rotate(47.83)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M399.82,257.14\" transform=\"translate(-350.77 -211.88)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M395.1,257.7\" transform=\"translate(-350.77 -211.88)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M395.1,262.45\" transform=\"translate(-350.77 -211.88)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M398.05,265.53s2,1.4,4.66-.54a6.78,6.78,0,0,0,2.9-4.26\" transform=\"translate(-350.77 -211.88)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M396.9,267s3.52,3.41,8.63-.88,3.07-8.85,3.07-8.85\" transform=\"translate(-350.77 -211.88)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M359.13,267.85v55.23l11.32,68c.8,4.79,4.61,5.75,7.86,5.09s4.39-5.33,4.39-5.33l13.16-67.79V267.85Z\" transform=\"translate(-350.77 -211.88)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"403.07\" y=\"239.96\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(549.92 -35.01) rotate(141.69)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"400.64\" y=\"243.69\" width=\"42.88\" height=\"7.39\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(555.87 -32.04) rotate(141.69)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpolyline points=\"0.24 1.97 25.01 78.78 12.91 0.04\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"5.2\" y=\"51.18\" width=\"42.32\" height=\"4.79\" rx=\"2.4\" ry=\"2.4\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"8.18\" y=\"46.14\" width=\"36.77\" height=\"4.72\" rx=\"1.19\" ry=\"1.19\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M380.86,312.25l-3.73-16.67-3.73,16.67h0a3.57,3.57,0,0,0,0,.47,3.78,3.78,0,0,0,7.56,0,3.57,3.57,0,0,0,0-.47Z\" transform=\"translate(-350.77 -211.88)\" fill=\"#27aae1\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    display_and_wrap_with_new_bounds_and_size(html, 100, 200, 1)\n  end\n\n  def display_pre_elution_warning\n    html = '\u003csvg\u003e\u003ctitle\u003e30_last_Stepspinningbefore_eluatewarning\u003c/title\u003e\u003cpath d=\"M446.53,283.69v77.8c.1,1.9,4.5,35.4,19.9,31.8,0,0,12.6,4.6,17.4-30.9V362l-.6-78.3a2.48,2.48,0,0,0-2.5-2.5H449A2.48,2.48,0,0,0,446.53,283.69Z\" transform=\"translate(-301.04 -215.1)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M479.63,240.09h-28.4a2.43,2.43,0,0,1-2.4-2.4v-5.1a2.43,2.43,0,0,1,2.4-2.4h28.4a2.43,2.43,0,0,1,2.4,2.4v5.1A2.43,2.43,0,0,1,479.63,240.09Z\" transform=\"translate(-301.04 -215.1)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M482.43,242.49H448a1.16,1.16,0,0,1-1.2-1.2V239a1.16,1.16,0,0,1,1.2-1.2h34.4a1.16,1.16,0,0,1,1.2,1.2v2.3A1.22,1.22,0,0,1,482.43,242.49Z\" transform=\"translate(-301.04 -215.1)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M448.83,242.49v51.3a1.42,1.42,0,0,0,.9,1.4l5.6,3.1a1.69,1.69,0,0,1,.9,1.4V307a1.58,1.58,0,0,0,1.6,1.6h14.5a1.58,1.58,0,0,0,1.6-1.6v-7.2a1.86,1.86,0,0,1,.9-1.5l6.2-3.1a1.65,1.65,0,0,0,.9-1.5v-51.2\" transform=\"translate(-301.04 -215.1)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M471.53,304.79h-13.1a1,1,0,0,1-1-1v-4.1a1,1,0,0,1,1-1h13.1a1,1,0,0,1,1,1v4.1A.94.94,0,0,1,471.53,304.79Z\" transform=\"translate(-301.04 -215.1)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M484.13,235.39h-38.2a2.43,2.43,0,0,1-2.4-2.4v-2.7a2.43,2.43,0,0,1,2.4-2.4h38.2a2.43,2.43,0,0,1,2.4,2.4V233A2.43,2.43,0,0,1,484.13,235.39Z\" transform=\"translate(-301.04 -215.1)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M487.73,238\" transform=\"translate(-301.04 -215.1)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M483,238.59\" transform=\"translate(-301.04 -215.1)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M483.63,240.09a4,4,0,0,0,3.3-2.8,5.13,5.13,0,0,0-.4-4.3\" transform=\"translate(-301.04 -215.1)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M483.63,242a6,6,0,0,0,6.2-4.9,5.77,5.77,0,0,0-3.2-7\" transform=\"translate(-301.04 -215.1)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M482.73,283.59h-37.5a2.43,2.43,0,0,1-2.4-2.4h0a2.43,2.43,0,0,1,2.4-2.4h37.5a2.43,2.43,0,0,1,2.4,2.4h0A2.37,2.37,0,0,1,482.73,283.59Z\" transform=\"translate(-301.04 -215.1)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M415.33,275s14.9-2.1,21-6.3,10.6-18.2,15.9-20.5,15.7-11.7,13.9-14,.5-5.1-5.6-3.3-13.8,12.1-19.7,14a84.32,84.32,0,0,1-12.9,2.8l6.3-1.1s.3-7-1.1-9.4l1.1,4.6c3.9-1.1,5.6-10.1,5.6-10.1l15-8s19,5.6,22.6,2.3-4.2-5.6-4.2-5.6l-13.6-3.8c-6.1-1.7-16.9.8-21.8,3.8s-13.6,5.5-13.6,5.5l-8.9,2.1\" transform=\"translate(-301.04 -215.1)\" fill=\"#bfbfe0\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M483.93,358v-3.4c-7.5-.4-13.8,4.3-18.6,9.2-1.9,2-3.6,4-5.1,5.7-2.8,3.4-7.4,4-11.4,3.7,2.7,10,8,22.3,17.7,20,0,0,12.6,4.6,17.4-30.9V358Z\" transform=\"translate(-301.04 -215.1)\" fill=\"#29afe5\"/\u003e\u003cpath d=\"M332.3,283v77.8c.1,1.9,4.5,35.4,19.9,31.8,0,0,12.6,4.6,17.4-30.9v-.4L369,283a2.48,2.48,0,0,0-2.5-2.5H334.8A2.47,2.47,0,0,0,332.3,283Z\" transform=\"translate(-301.04 -215.1)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M365.4,239.4H337a2.43,2.43,0,0,1-2.4-2.4v-5.1a2.43,2.43,0,0,1,2.4-2.4h28.4a2.43,2.43,0,0,1,2.4,2.4V237A2.43,2.43,0,0,1,365.4,239.4Z\" transform=\"translate(-301.04 -215.1)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M368.2,241.7H333.8a1.16,1.16,0,0,1-1.2-1.2v-2.3a1.16,1.16,0,0,1,1.2-1.2h34.4a1.16,1.16,0,0,1,1.2,1.2v2.3A1.16,1.16,0,0,1,368.2,241.7Z\" transform=\"translate(-301.04 -215.1)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M334.6,241.7V293a1.42,1.42,0,0,0,.9,1.4l5.6,3.1a1.69,1.69,0,0,1,.9,1.4v7.3a1.58,1.58,0,0,0,1.6,1.6h14.5a1.58,1.58,0,0,0,1.6-1.6V299a1.86,1.86,0,0,1,.9-1.5l6.2-3.1a1.65,1.65,0,0,0,.9-1.5V241.7\" transform=\"translate(-301.04 -215.1)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M357.4,304.1H344.3a1,1,0,0,1-1-1V299a1,1,0,0,1,1-1h13.1a1,1,0,0,1,1,1v4.1A1.08,1.08,0,0,1,357.4,304.1Z\" transform=\"translate(-301.04 -215.1)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M369.9,234.7H331.7a2.43,2.43,0,0,1-2.4-2.4v-2.7a2.43,2.43,0,0,1,2.4-2.4h38.2a2.43,2.43,0,0,1,2.4,2.4v2.7A2.43,2.43,0,0,1,369.9,234.7Z\" transform=\"translate(-301.04 -215.1)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M373.5,237.3\" transform=\"translate(-301.04 -215.1)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M368.8,237.8\" transform=\"translate(-301.04 -215.1)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M369.4,239.4a4,4,0,0,0,3.3-2.8,5.13,5.13,0,0,0-.4-4.3\" transform=\"translate(-301.04 -215.1)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M369.4,241.2a6,6,0,0,0,6.2-4.9,5.77,5.77,0,0,0-3.2-7\" transform=\"translate(-301.04 -215.1)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M368.6,282.8H331a2.43,2.43,0,0,1-2.4-2.4h0A2.43,2.43,0,0,1,331,278h37.5a2.43,2.43,0,0,1,2.4,2.4h0A2.29,2.29,0,0,1,368.6,282.8Z\" transform=\"translate(-301.04 -215.1)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M301.1,274.3s14.9-2.1,21-6.3,10.6-18.2,15.9-20.5,15.7-11.7,13.9-14,.5-5.1-5.6-3.3-13.8,12.1-19.7,14a84.32,84.32,0,0,1-12.9,2.8l6.3-1.1s.3-7-1.1-9.4l1.1,4.6c3.9-1.1,5.6-10.1,5.6-10.1l15-8s19,5.6,22.6,2.3-4.2-5.6-4.2-5.6l-13.6-3.8c-6.1-1.7-16.9.8-21.8,3.8s-13.6,5.5-13.6,5.5l-8.9,2.1\" transform=\"translate(-301.04 -215.1)\" fill=\"#bfbfe0\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M369.7,357.2v-3.4l-.3-15.1V320.8s-1.9-3.8-5.2-4.1-6.1-8.8-6.1-8.8h-3.9c-3.9,0,0,8.5,0,8.5s8.4,12.1,10,20.2-4,19.4-4,19.4a39.37,39.37,0,0,0-9.1,7c-1.9,2-3.6,4-5.1,5.7-2.8,3.4-7.4,4-11.4,3.7,2.7,10,8,22.3,17.7,20,0,0,12.6,4.6,17.4-30.9v-4.3Z\" transform=\"translate(-301.04 -215.1)\" fill=\"#29afe5\"/\u003e\u003ctext transform=\"translate(37.48 95.73)\" font-size=\"38.32\" fill=\"#010101\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003eX\u003c/text\u003e\u003cpolyline points=\"114.29 87.79 121.49 97.59 136.29 69.59\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"3\"/\u003e\u003c/svg\u003e'\n    display_and_wrap_with_new_bounds_and_size(html, 300, 200, 1)\n  end\n\n  def ethanol_container\n    html = '\u003csvg\u003e\u003ctitle\u003e12_etohcontainer\u003c/title\u003e\u003crect x=\"412.62\" y=\"215.13\" width=\"54.1\" height=\"54.1\" transform=\"translate(-429.62 277.68) rotate(-45)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003cline x1=\"33.45\" y1=\"118.85\" x2=\"71.65\" y2=\"157.15\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003cline x1=\"71.65\" y1=\"118.85\" x2=\"33.45\" y2=\"157.15\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"407.28\" y=\"228.72\" width=\"26.8\" height=\"26.8\" transform=\"translate(-435.14 264.23) rotate(-45)\" fill=\"#3b53a4\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"426.26\" y=\"209.72\" width=\"26.8\" height=\"26.8\" transform=\"translate(-416.14 272.09) rotate(-45)\" fill=\"#ed1c24\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"445.57\" y=\"228.71\" width=\"26.8\" height=\"26.8\" transform=\"translate(-423.92 291.31) rotate(-45)\" fill=\"#fff200\" stroke=\"#000\" stroke-miterlimit=\"10\"/\u003e\u003ctext transform=\"translate(46.46 127.95)\" font-size=\"25.86\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e3\u003c/text\u003e\u003ctext transform=\"translate(27.14 144.42)\" font-size=\"25.86\" fill=\"#fff\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e2\u003c/text\u003e\u003ctext transform=\"translate(65.41 144.42)\" font-size=\"25.86\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e1\u003c/text\u003e\u003cg style=\"isolation:isolate\"\u003e\u003ctext transform=\"translate(20.6 193.95)\" font-size=\"17.15\" font-family=\"Arial-BoldMT, Arial\" font-weight=\"700\" style=\"isolation:isolate\"\u003eEthanol\u003c/text\u003e\u003ctext transform=\"translate(16.8 214.55)\" font-size=\"17.15\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003econtainer\u003c/text\u003e\u003c/g\u003e\u003cpath d=\"M390.8,244.7\" transform=\"translate(-387.15 -104.15)\" fill=\"none\"/\u003e\u003cpath d=\"M483.4,322.9H396a8.66,8.66,0,0,1-8.6-8.6V189.8a8.66,8.66,0,0,1,8.6-8.6h87.3a8.66,8.66,0,0,1,8.6,8.6V314.3A8.51,8.51,0,0,1,483.4,322.9Z\" transform=\"translate(-387.15 -104.15)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M439.7,104.4c-28.9,0-52.3,6.3-52.3,14.2V178c0,7.8,23.4,14.2,52.3,14.2S492,185.9,492,178V118.7C492,110.8,468.6,104.4,439.7,104.4Z\" transform=\"translate(-387.15 -104.15)\" fill=\"#c4e4f1\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cellipse cx=\"52.55\" cy=\"14.25\" rx=\"40.4\" ry=\"8.4\" fill=\"#c4e4f1\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"9.55\" y1=\"25.45\" x2=\"9.55\" y2=\"74.05\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"54.45\" y1=\"33.45\" x2=\"54.45\" y2=\"82.05\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"98.75\" y1=\"22.65\" x2=\"98.75\" y2=\"71.25\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"77.85\" y1=\"31.05\" x2=\"77.85\" y2=\"79.65\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"31.05\" y1=\"31.05\" x2=\"31.05\" y2=\"79.65\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70).scale!(0.6)\n  end\n\n  def ethanol_container_open\n    html = '\u003csvg\u003e\u003ctitle\u003e12_etohcontainer_open\u003c/title\u003e\u003cpath d=\"M439.15,273H427.58a12.07,12.07,0,0,0,1.25-5.4h0a13.31,13.31,0,0,0-9.77-12.78c-3.06-1.45-13-2.52-24.87-2.52-12.27,0-22.53,1.14-25.18,2.68a13.32,13.32,0,0,0-9.2,12.62h0a14.44,14.44,0,0,0,1.09,5.4h-9a8.66,8.66,0,0,0-8.6,8.6v124.5a8.66,8.66,0,0,0,8.6,8.6h87.48a8.51,8.51,0,0,0,8.42-8.6V281.65A8.66,8.66,0,0,0,439.15,273Z\" transform=\"translate(-343 -252.1)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"368.47\" y=\"306.98\" width=\"54.1\" height=\"54.1\" transform=\"translate(-463.35 125.41) rotate(-45)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\"/\u003e\u003cline x1=\"33.45\" y1=\"62.75\" x2=\"71.65\" y2=\"101.05\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\"/\u003e\u003cline x1=\"71.65\" y1=\"62.75\" x2=\"33.45\" y2=\"101.05\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"363.13\" y=\"320.57\" width=\"26.8\" height=\"26.8\" transform=\"translate(-468.87 111.96) rotate(-45)\" fill=\"#3c54a5\" stroke=\"#010101\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"382.12\" y=\"301.57\" width=\"26.8\" height=\"26.8\" transform=\"translate(-449.88 119.82) rotate(-45)\" fill=\"#ec2227\" stroke=\"#010101\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"401.42\" y=\"320.57\" width=\"26.8\" height=\"26.8\" transform=\"translate(-457.65 139.04) rotate(-45)\" fill=\"#fcee23\" stroke=\"#010101\" stroke-miterlimit=\"10\"/\u003e\u003ctext transform=\"translate(46.46 71.85)\" font-size=\"25.86\" fill=\"#010101\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e3\u003c/text\u003e\u003ctext transform=\"translate(27.14 88.32)\" font-size=\"25.86\" fill=\"#fff\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e2\u003c/text\u003e\u003ctext transform=\"translate(65.41 88.32)\" font-size=\"25.86\" fill=\"#010101\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e1\u003c/text\u003e\u003ctext transform=\"translate(20.6 137.85)\" font-size=\"17.15\" fill=\"#010101\" font-family=\"Arial-BoldMT, Arial\" font-weight=\"700\" style=\"isolation:isolate\"\u003eEthanol\u003c/text\u003e\u003ctext transform=\"translate(16.8 158.45)\" font-size=\"17.15\" fill=\"#010101\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003econtainer\u003c/text\u003e\u003cpath d=\"M346.65,336.55\" transform=\"translate(-343 -252.1)\" fill=\"none\"/\u003e\u003cpath d=\"M517.53,333.92c-28.9,0-52.3,6.3-52.3,14.2v59.4c0,7.8,23.4,14.2,52.3,14.2s52.3-6.3,52.3-14.2v-59.3C569.83,340.32,546.43,333.92,517.53,333.92Z\" transform=\"translate(-343 -252.1)\" fill=\"#c4e4f0\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cellipse cx=\"174.53\" cy=\"95.82\" rx=\"40.4\" ry=\"8.4\" fill=\"#c4e4f0\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"131.53\" y1=\"107.02\" x2=\"131.53\" y2=\"155.62\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"176.43\" y1=\"115.02\" x2=\"176.43\" y2=\"163.62\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"220.73\" y1=\"104.22\" x2=\"220.73\" y2=\"152.82\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"199.83\" y1=\"112.62\" x2=\"199.83\" y2=\"161.22\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"153.03\" y1=\"112.62\" x2=\"153.03\" y2=\"161.22\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cellipse cx=\"52.47\" cy=\"8.51\" rx=\"25.33\" ry=\"5.33\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html, 200, 150).translate!(0, 70).scale!(0.6)\n  end\n\n  def guscn_container\n    html = '\u003csvg\u003e\u003ctitle\u003e12_GuSCNwastecontainer\u003c/title\u003e\u003cpolygon points=\"105.75 134.75 105.75 336.95 53.35 356.55 5.75 336.95 5.75 134.75 5.75 41.75 105.75 41.75 105.75 134.75\" fill=\"#e2ebf7\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M606.5,260.9V386a15.51,15.51,0,0,1-1.1,5.6l-30.6,75.5a15,15,0,0,1-13.8,9.3h0a15,15,0,0,1-14.1-9.9l-26.8-75.2a14.26,14.26,0,0,1-.9-5V167.9h87.3v93Z\" transform=\"translate(-507.35 -126.15)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"536.29\" y=\"233.92\" width=\"54.1\" height=\"54.1\" transform=\"translate(-526.88 348.63) rotate(-45)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\"/\u003e\u003cline x1=\"36.85\" y1=\"115.65\" x2=\"75.15\" y2=\"153.95\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\"/\u003e\u003cline x1=\"75.15\" y1=\"115.65\" x2=\"36.85\" y2=\"153.95\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"530.98\" y=\"247.48\" width=\"26.8\" height=\"26.8\" transform=\"translate(-532.38 335.2) rotate(-45)\" fill=\"#3c54a5\" stroke=\"#010101\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"549.98\" y=\"228.47\" width=\"26.8\" height=\"26.8\" transform=\"translate(-513.37 343.06) rotate(-45)\" fill=\"#ec2227\" stroke=\"#010101\" stroke-miterlimit=\"10\"/\u003e\u003crect x=\"569.29\" y=\"247.48\" width=\"26.8\" height=\"26.8\" transform=\"translate(-521.15 362.28) rotate(-45)\" fill=\"#fcee23\" stroke=\"#010101\" stroke-miterlimit=\"10\"/\u003e\u003ctext transform=\"translate(49.93 124.75)\" font-size=\"25.86\" fill=\"#010101\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e1\u003c/text\u003e\u003ctext transform=\"translate(30.61 141.21)\" font-size=\"25.86\" fill=\"#fff\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e2\u003c/text\u003e\u003ctext transform=\"translate(68.89 141.21)\" font-size=\"25.86\" fill=\"#010101\" font-family=\"MyriadPro-Regular, Myriad Pro\" style=\"isolation:isolate\"\u003e2\u003c/text\u003e\u003cpath d=\"M507.6,138.3v37.2c0,6.6,24.7,11.9,55.2,11.9s55.2-5.3,55.2-11.9V138.3Z\" transform=\"translate(-507.35 -126.15)\" fill=\"#e2ebf7\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cellipse cx=\"55.55\" cy=\"12.15\" rx=\"55.2\" ry=\"11.9\" fill=\"#e2ebf7\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003ctext transform=\"translate(25.97 208.31)\" font-size=\"17.15\" fill=\"#010101\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003eGuSCN\u003c/text\u003e\u003ctext transform=\"translate(31.17 228.91)\" font-size=\"17.15\" fill=\"#010101\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003e\u003ctspan letter-spacing=\"-0.04em\"\u003eW\u003c/tspan\u003e\u003ctspan x=\"15.55\" y=\"0\"\u003easte\u003c/tspan\u003e\u003c/text\u003e\u003ctext transform=\"translate(18.37 249.51)\" font-size=\"17.15\" fill=\"#010101\" font-family=\"ArialMT, Arial\" style=\"isolation:isolate\"\u003eContainer\u003c/text\u003e\u003c/svg\u003e'\n    svg_from_html(html, 50, 450).translate!(0, 70).scale!(0.6)\n  end\n\n  def collection_tube\n    html = '\u003csvg\u003e\u003ctitle\u003e12_collectiontubes\u003c/title\u003e\u003cpath d=\"M377.7,251.6v77.8c.1,1.9,4.5,35.4,19.9,31.8,0,0,12.6,4.6,17.4-30.9v-.4l-.6-78.3a2.48,2.48,0,0,0-2.5-2.5H380.2A2.48,2.48,0,0,0,377.7,251.6Z\" transform=\"translate(-374.95 -246.45)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M415.1,251.5H377.6a2.43,2.43,0,0,1-2.4-2.4h0a2.43,2.43,0,0,1,2.4-2.4h37.5a2.43,2.43,0,0,1,2.4,2.4h0A2.37,2.37,0,0,1,415.1,251.5Z\" transform=\"translate(-374.95 -246.45)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def many_collection_tubes(num)\n    tubes = []\n    num.times do |i|\n      tubes \u003c\u003c collection_tube.translate!(i * 5, i * 10)\n    end\n    SVGElement.new(children: tubes, boundx: 200, boundy: 200)\n  end\n\n  def E0_closed_dry\n    html = '\u003csvg\u003e\u003ctitle\u003e12_E0\u003c/title\u003e\u003cpath d=\"M408.1,246.4H379.7a2.43,2.43,0,0,1-2.4-2.4v-5.1a2.43,2.43,0,0,1,2.4-2.4h28.4a2.43,2.43,0,0,1,2.4,2.4V244A2.5,2.5,0,0,1,408.1,246.4Z\" transform=\"translate(-371.75 -233.95)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.6,241.7H374.4a2.43,2.43,0,0,1-2.4-2.4v-2.7a2.43,2.43,0,0,1,2.4-2.4h38.2a2.43,2.43,0,0,1,2.4,2.4v2.7A2.5,2.5,0,0,1,412.6,241.7Z\" transform=\"translate(-371.75 -233.95)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M411.5,244.8\" transform=\"translate(-371.75 -233.95)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.1,246.4a4,4,0,0,0,3.3-2.8,5.13,5.13,0,0,0-.4-4.3\" transform=\"translate(-371.75 -233.95)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.1,248.2a6,6,0,0,0,6.2-4.9,5.77,5.77,0,0,0-3.2-7\" transform=\"translate(-371.75 -233.95)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.3,250.2H374.8a2.43,2.43,0,0,1-2.4-2.4h0a2.43,2.43,0,0,1,2.4-2.4h37.5a2.43,2.43,0,0,1,2.4,2.4h0A2.37,2.37,0,0,1,412.3,250.2Z\" transform=\"translate(-371.75 -233.95)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M374.7,250.2v55.2l11.3,68c.8,4.8,4.6,5.8,7.9,5.1s4.4-5.3,4.4-5.3l13.2-67.8V250.2H374.7Z\" transform=\"translate(-371.75 -233.95)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003ccircle cx=\"21.35\" cy=\"109.25\" r=\"9.2\" fill=\"#bec0e1\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def E0_open_dry\n    html = '\u003csvg\u003e\u003ctitle\u003e13_E0_dry_open\u003c/title\u003e\u003cpath d=\"M454.7,171.3\" transform=\"translate(-415.35 -124.04)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M455.3,172.9a4,4,0,0,0,3.3-2.8,5.13,5.13,0,0,0-.4-4.3\" transform=\"translate(-415.35 -124.04)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M455.3,174.7a6,6,0,0,0,6.2-4.9,5.77,5.77,0,0,0-3.2-7\" transform=\"translate(-415.35 -124.04)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M455.5,176.7H418a2.43,2.43,0,0,1-2.4-2.4h0a2.43,2.43,0,0,1,2.4-2.4h37.5a2.43,2.43,0,0,1,2.4,2.4h0A2.43,2.43,0,0,1,455.5,176.7Z\" transform=\"translate(-415.35 -124.04)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M417.9,176.7v55.2l11.3,68c.8,4.8,4.6,5.8,7.9,5.1s4.4-5.3,4.4-5.3l13.2-67.8V176.7H417.9Z\" transform=\"translate(-415.35 -124.04)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003ccircle cx=\"21.15\" cy=\"145.06\" r=\"9.2\" fill=\"#bec0e1\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M452.3,161.2l-2.9-28.3a2.37,2.37,0,0,1,2.1-2.6l5.1-.5a2.37,2.37,0,0,1,2.6,2.1l2.9,28.3a2.37,2.37,0,0,1-2.1,2.6l-5.1.5A2.38,2.38,0,0,1,452.3,161.2Z\" transform=\"translate(-415.35 -124.04)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M457.4,165.2l-3.8-38a2.37,2.37,0,0,1,2.1-2.6l2.7-.3a2.37,2.37,0,0,1,2.6,2.1l3.8,38a2.37,2.37,0,0,1-2.1,2.6l-2.7.3A2.37,2.37,0,0,1,457.4,165.2Z\" transform=\"translate(-415.35 -124.04)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def E0_open_wet\n    html = '\u003csvg\u003e\u003ctitle\u003e14_E0_wetopen\u003c/title\u003e\u003cpath d=\"M458.2,321.9\" transform=\"translate(-418.85 -274.64)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M458.9,323.5a4,4,0,0,0,3.3-2.8,5.13,5.13,0,0,0-.4-4.3\" transform=\"translate(-418.85 -274.64)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M458.9,325.3a6,6,0,0,0,6.2-4.9,5.77,5.77,0,0,0-3.2-7\" transform=\"translate(-418.85 -274.64)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M459,327.3H421.5a2.43,2.43,0,0,1-2.4-2.4h0a2.43,2.43,0,0,1,2.4-2.4H459a2.43,2.43,0,0,1,2.4,2.4h0A2.37,2.37,0,0,1,459,327.3Z\" transform=\"translate(-418.85 -274.64)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M421.5,327.3v55.2l11.3,68c.8,4.8,4.6,5.8,7.9,5.1s4.4-5.3,4.4-5.3l13.2-67.8V327.3Z\" transform=\"translate(-418.85 -274.64)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M455.8,311.7l-2.9-28.3a2.37,2.37,0,0,1,2.1-2.6l5.1-.5a2.37,2.37,0,0,1,2.6,2.1l2.9,28.3a2.37,2.37,0,0,1-2.1,2.6l-5.1.5A2.35,2.35,0,0,1,455.8,311.7Z\" transform=\"translate(-418.85 -274.64)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M461,315.8l-3.8-38a2.37,2.37,0,0,1,2.1-2.6l2.7-.3a2.37,2.37,0,0,1,2.6,2.1l3.8,38a2.37,2.37,0,0,1-2.1,2.6l-2.7.3A2.37,2.37,0,0,1,461,315.8Z\" transform=\"translate(-418.85 -274.64)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M440.7,415.4c-.3-.2-.5-.3-.8-.5a16.7,16.7,0,0,0-13.4-2.8l.5,3.3,5.9,35.2c.8,4.8,4.6,5.8,7.9,5.1s4.4-5.3,4.4-5.3l6.2-32.1.6-2.9H440.7Z\" transform=\"translate(-418.85 -274.64)\" fill=\"#bec0e1\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def E1_closed\n    html = '\u003csvg\u003e\u003ctitle\u003e12_E1xxx\u003c/title\u003e\u003cpath d=\"M378,342.1c-4.2-1-8.5.3-11.9,2v15.1a8.71,8.71,0,0,0,8.7,8.7h41.7a8.71,8.71,0,0,0,8.7-8.7V344.6c-9.2.2-7.9,3.5-19.4,7.6C394.2,356.5,387.8,344.4,378,342.1Z\" transform=\"translate(-365.85 -243.55)\" fill=\"#26afe5\"/\u003e\u003cpath d=\"M369.1,280.1\" transform=\"translate(-365.85 -243.55)\" fill=\"none\"/\u003e\u003cpath d=\"M416.6,367.3H374.7a8.66,8.66,0,0,1-8.6-8.6V295.8a8.66,8.66,0,0,1,8.6-8.6h41.9a8.66,8.66,0,0,1,8.6,8.6v62.9A8.6,8.6,0,0,1,416.6,367.3Z\" transform=\"translate(-365.85 -243.55)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M395.7,243.8c-16.3,0-29.5,3.6-29.5,8v33.5c0,4.4,13.2,8,29.5,8s29.5-3.6,29.5-8V251.8C425.2,247.4,412,243.8,395.7,243.8Z\" transform=\"translate(-365.85 -243.55)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cellipse cx=\"29.85\" cy=\"8.15\" rx=\"22.9\" ry=\"4.8\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"5.55\" y1=\"14.45\" x2=\"5.55\" y2=\"41.95\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"30.95\" y1=\"19.05\" x2=\"30.95\" y2=\"46.45\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"55.95\" y1=\"12.95\" x2=\"55.95\" y2=\"40.35\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"44.15\" y1=\"17.65\" x2=\"44.15\" y2=\"45.15\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"17.65\" y1=\"17.65\" x2=\"17.65\" y2=\"45.15\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def E1_open\n    html = '\u003csvg \u003e\u003ctitle\u003e14_E1_open\u003c/title\u003e\u003cpath d=\"M302.9,247.4\" transform=\"translate(-299.55 -234.15)\" fill=\"none\"/\u003e\u003cellipse cx=\"30.05\" cy=\"6.95\" rx=\"18.7\" ry=\"3.9\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M311.8,308.8c-4.2-1-8.5.3-11.9,2V326a8.71,8.71,0,0,0,8.7,8.7h41.7A8.71,8.71,0,0,0,359,326V311.4c-9.2.2-7.9,3.5-19.4,7.6S321.5,311.1,311.8,308.8Z\" transform=\"translate(-299.55 -234.15)\" fill=\"#26afe5\"/\u003e\u003cpath d=\"M395.1,287.9c-16.3,0-29.5,3.6-29.5,8v33.5c0,4.4,13.2,8,29.5,8s29.5-3.6,29.5-8V295.9C424.6,291.5,411.4,287.9,395.1,287.9Z\" transform=\"translate(-299.55 -234.15)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cellipse cx=\"95.55\" cy=\"61.55\" rx=\"22.9\" ry=\"4.8\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"71.15\" y1=\"67.95\" x2=\"71.15\" y2=\"95.45\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"96.55\" y1=\"72.45\" x2=\"96.55\" y2=\"99.95\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"121.65\" y1=\"66.35\" x2=\"121.65\" y2=\"93.85\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"109.85\" y1=\"71.15\" x2=\"109.85\" y2=\"98.65\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cline x1=\"83.35\" y1=\"71.15\" x2=\"83.35\" y2=\"98.65\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M352.3,254.8V243c0-4.7-10.2-8.6-22.9-8.6s-22.9,3.8-22.9,8.6v11.8a8.68,8.68,0,0,0-6.7,8.4v62.9a8.66,8.66,0,0,0,8.6,8.6h41.9a8.66,8.66,0,0,0,8.6-8.6V263.2A8.49,8.49,0,0,0,352.3,254.8Z\" transform=\"translate(-299.55 -234.15)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    s = svg_from_html(html, 80,90).translate!(0, 70)\n  end\n\n  def E4_closed\n    html = '\u003csvg\u003e\u003ctitle\u003e12_E4\u003c/title\u003e\u003cpath d=\"M408.8,245.5H380.4a2.43,2.43,0,0,1-2.4-2.4V238a2.43,2.43,0,0,1,2.4-2.4h28.4a2.43,2.43,0,0,1,2.4,2.4v5.1A2.5,2.5,0,0,1,408.8,245.5Z\" transform=\"translate(-372.45 -233.05)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M413.3,240.8H375.1a2.43,2.43,0,0,1-2.4-2.4v-2.7a2.43,2.43,0,0,1,2.4-2.4h38.2a2.43,2.43,0,0,1,2.4,2.4v2.7A2.5,2.5,0,0,1,413.3,240.8Z\" transform=\"translate(-372.45 -233.05)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.2,243.9\" transform=\"translate(-372.45 -233.05)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.8,245.5a4,4,0,0,0,3.3-2.8,5.13,5.13,0,0,0-.4-4.3\" transform=\"translate(-372.45 -233.05)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.8,247.3a6,6,0,0,0,6.2-4.9,5.77,5.77,0,0,0-3.2-7\" transform=\"translate(-372.45 -233.05)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M413,249.3H375.5a2.43,2.43,0,0,1-2.4-2.4h0a2.43,2.43,0,0,1,2.4-2.4H413a2.43,2.43,0,0,1,2.4,2.4h0A2.37,2.37,0,0,1,413,249.3Z\" transform=\"translate(-372.45 -233.05)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M375.4,249.3v55.2l11.3,68c.8,4.8,4.6,5.8,7.9,5.1s4.4-5.3,4.4-5.3l13.2-67.8V249.3Z\" transform=\"translate(-372.45 -233.05)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M394.6,337.3c-.3-.2-.5-.3-.8-.5a16.7,16.7,0,0,0-13.4-2.8l.5,3.3,5.9,35.2c.8,4.8,4.6,5.8,7.9,5.1s4.4-5.3,4.4-5.3l6.2-32.1.6-2.9H394.6Z\" transform=\"translate(-372.45 -233.05)\" fill=\"#26afe5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def E4_open\n    html = '\u003csvg\u003e\u003ctitle\u003eE4_opened\u003c/title\u003e\u003cpath d=\"M604.51,369.07\" transform=\"translate(-565.13 -321.85)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M605.12,370.64a3.88,3.88,0,0,0,3.29-2.79,4.85,4.85,0,0,0-.42-4.28\" transform=\"translate(-565.13 -321.85)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M605.12,372.47a6,6,0,0,0,6.16-4.86,5.79,5.79,0,0,0-3.17-7\" transform=\"translate(-565.13 -321.85)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"0.25\" y=\"47.83\" width=\"42.32\" height=\"4.79\" rx=\"2.4\" ry=\"2.4\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M567.78,374.47V429.7l11.32,68c.8,4.79,4.61,5.75,7.86,5.09s4.39-5.33,4.39-5.33l13.16-67.79V374.47Z\" transform=\"translate(-565.13 -321.85)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"588.99\" y=\"339.39\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(321.94 -614.71) rotate(84.22)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"587.55\" y=\"339.89\" width=\"42.88\" height=\"7.39\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(324.32 -618.79) rotate(84.22)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M586.95,462.55c-.27-.17-.53-.34-.8-.53a16.45,16.45,0,0,0-13.45-2.76l.55,3.29,5.86,35.18c.8,4.79,4.61,5.75,7.86,5.09s4.39-5.33,4.39-5.33l6.23-32.06.56-2.88Z\" transform=\"translate(-565.13 -321.85)\" fill=\"#26afe5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def E2_closed\n    html = '\u003csvg\u003e\u003ctitle\u003e12_E2\u003c/title\u003e\u003cpath d=\"M414.8,285.6c-8.8,5.8-17.9,3.6-26.5.9l-10.5,3v45.6c.1,1.9,4.5,35.4,19.9,31.8,0,0,12.6,4.6,17.4-30.9v-.4Z\" transform=\"translate(-374.35 -241.15)\" fill=\"#26afe5\"/\u003e\u003cpath d=\"M385.9,285.7a15.75,15.75,0,0,0-8.1-.7v4.4l10.5-3A16.82,16.82,0,0,1,385.9,285.7Z\" transform=\"translate(-374.35 -241.15)\" fill=\"#26afe5\"/\u003e\u003cpath d=\"M410.7,253.6H382.3a2.43,2.43,0,0,1-2.4-2.4v-5.1a2.43,2.43,0,0,1,2.4-2.4h28.4a2.43,2.43,0,0,1,2.4,2.4v5.1A2.58,2.58,0,0,1,410.7,253.6Z\" transform=\"translate(-374.35 -241.15)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M415.2,248.9H377a2.43,2.43,0,0,1-2.4-2.4v-2.7a2.43,2.43,0,0,1,2.4-2.4h38.2a2.43,2.43,0,0,1,2.4,2.4v2.7A2.5,2.5,0,0,1,415.2,248.9Z\" transform=\"translate(-374.35 -241.15)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M377.4,257.6v77.8c.1,1.9,4.5,35.4,19.9,31.8,0,0,12.6,4.6,17.4-30.9v-.4l-.6-78.3a2.48,2.48,0,0,0-2.5-2.5H379.9A2.42,2.42,0,0,0,377.4,257.6Z\" transform=\"translate(-374.35 -241.15)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M414.8,257.4H377.3a2.43,2.43,0,0,1-2.4-2.4h0a2.43,2.43,0,0,1,2.4-2.4h37.5a2.43,2.43,0,0,1,2.4,2.4h0A2.31,2.31,0,0,1,414.8,257.4Z\" transform=\"translate(-374.35 -241.15)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def E2_open\n    html = '\u003csvg\u003e\u003ctitle\u003eE2_opened\u003c/title\u003e\u003cpath d=\"M383.89,254.35a3.88,3.88,0,0,0,3.29-2.79,4.85,4.85,0,0,0-.42-4.28\" transform=\"translate(-343.9 -212.92)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M383.89,256.19a6,6,0,0,0,6.16-4.86,5.79,5.79,0,0,0-3.17-7\" transform=\"translate(-343.9 -212.92)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M384,286.37c-8.82,5.75-17.91,3.62-26.54.87l-10.47,3v45.4c0,.05,0,.1,0,.15.12,1.91,4.52,35.39,19.95,31.76,0,0,12.62,4.63,17.42-30.86a2.67,2.67,0,0,0,0-.37Z\" transform=\"translate(-343.9 -212.92)\" fill=\"#26afe5\"/\u003e\u003cpath d=\"M355.11,286.47a15.52,15.52,0,0,0-8.13-.66v4.44l10.47-3Z\" transform=\"translate(-343.9 -212.92)\" fill=\"#26afe5\"/\u003e\u003crect x=\"379.52\" y=\"225.03\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(471.66 -166.81) rotate(126.2)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"377.68\" y=\"228.02\" width=\"42.88\" height=\"7.39\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(477.92 -166.44) rotate(126.2)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M383.28,252.78\" transform=\"translate(-343.9 -212.92)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M346.61,258.32v77.6c0,.05,0,.1,0,.15.12,1.91,4.52,35.39,19.95,31.76,0,0,12.62,4.63,17.42-30.86a2.66,2.66,0,0,0,0-.37l-.61-78.29a2.52,2.52,0,0,0-2.52-2.5H349.13A2.52,2.52,0,0,0,346.61,258.32Z\" transform=\"translate(-343.9 -212.92)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"0.25\" y=\"40.48\" width=\"42.32\" height=\"4.79\" rx=\"2.4\" ry=\"2.4\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def E3_closed\n    html = '\u003csvg\u003e\u003ctitle\u003e12_E3\u003c/title\u003e\u003cpath d=\"M413.1,427.1v-3.4c-7.5-.4-13.8,4.3-18.6,9.2-1.9,2-3.6,4-5.1,5.7-2.8,3.4-7.4,4-11.4,3.7,2.7,10,8,22.3,17.7,20,0,0,12.6,4.6,17.4-30.9v-4.3Z\" transform=\"translate(-372.45 -336.45)\" fill=\"#26afe5\"/\u003e\u003cpath d=\"M408.8,348.9H380.4a2.43,2.43,0,0,1-2.4-2.4v-5.1a2.43,2.43,0,0,1,2.4-2.4h28.4a2.43,2.43,0,0,1,2.4,2.4v5.1A2.43,2.43,0,0,1,408.8,348.9Z\" transform=\"translate(-372.45 -336.45)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M413.3,344.2H375.1a2.43,2.43,0,0,1-2.4-2.4v-2.7a2.43,2.43,0,0,1,2.4-2.4h38.2a2.43,2.43,0,0,1,2.4,2.4v2.7A2.43,2.43,0,0,1,413.3,344.2Z\" transform=\"translate(-372.45 -336.45)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.2,347.3\" transform=\"translate(-372.45 -336.45)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.8,348.9a4,4,0,0,0,3.3-2.8,5.13,5.13,0,0,0-.4-4.3\" transform=\"translate(-372.45 -336.45)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.8,350.7a6,6,0,0,0,6.2-4.9,5.77,5.77,0,0,0-3.2-7\" transform=\"translate(-372.45 -336.45)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M375.5,352.8v77.8c.1,1.9,4.5,35.4,19.9,31.8,0,0,12.6,4.6,17.4-30.9v-.4l-.6-78.3a2.48,2.48,0,0,0-2.5-2.5H378A2.54,2.54,0,0,0,375.5,352.8Z\" transform=\"translate(-372.45 -336.45)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M413,352.7H375.5a2.43,2.43,0,0,1-2.4-2.4h0a2.43,2.43,0,0,1,2.4-2.4H413a2.43,2.43,0,0,1,2.4,2.4h0A2.43,2.43,0,0,1,413,352.7Z\" transform=\"translate(-372.45 -336.45)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def E3_open\n    html = '\u003csvg\u003e\u003ctitle\u003eE3_opened\u003c/title\u003e\u003cpath d=\"M476.1,406.36l0-3.43c-7.47-.37-13.8,4.31-18.61,9.22-1.94,2-3.63,4-5.06,5.73-2.81,3.43-7.38,4-11.39,3.72,2.67,10,8,22.27,17.67,20,0,0,12.62,4.63,17.42-30.86a2.66,2.66,0,0,0,0-.37Z\" transform=\"translate(-435.8 -279.98)\" fill=\"#26afe5\"/\u003e\u003crect x=\"467.28\" y=\"296.62\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(415.66 -414.19) rotate(98.22)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M475.18,326.55\" transform=\"translate(-435.8 -279.98)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M478.75,328.86a3.88,3.88,0,0,0,4-1.66,4.85,4.85,0,0,0,.9-4.21\" transform=\"translate(-435.8 -279.98)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M478.19,330.61a6,6,0,0,0,7.35-2.74,5.79,5.79,0,0,0-.88-7.65\" transform=\"translate(-435.8 -279.98)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M438.51,332.08v77.6c0,.05,0,.1,0,.15.12,1.91,4.52,35.39,19.95,31.76,0,0,12.62,4.63,17.42-30.86a2.66,2.66,0,0,0,0-.37l-.61-78.29a2.52,2.52,0,0,0-2.52-2.5H441A2.52,2.52,0,0,0,438.51,332.08Z\" transform=\"translate(-435.8 -279.98)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"0.25\" y=\"47.19\" width=\"42.32\" height=\"4.79\" rx=\"2.4\" ry=\"2.4\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"465.91\" y=\"297.97\" width=\"42.88\" height=\"7.39\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(419.81 -417.52) rotate(98.22)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def E5_empty_closed_w_empty_collector\n    html = '\u003csvg\u003e\u003ctitle\u003e12_E5xxx\u003c/title\u003e\u003cpath d=\"M375.2,260.4v77.8c.1,1.9,4.5,35.4,19.9,31.8,0,0,12.6,4.6,17.4-30.9v-.4l-.6-78.3a2.48,2.48,0,0,0-2.5-2.5H377.7A2.54,2.54,0,0,0,375.2,260.4Z\" transform=\"translate(-371.65 -237.65)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M408,250.1H379.6a2.43,2.43,0,0,1-2.4-2.4v-5.1a2.43,2.43,0,0,1,2.4-2.4H408a2.43,2.43,0,0,1,2.4,2.4v5.1A2.5,2.5,0,0,1,408,250.1Z\" transform=\"translate(-371.65 -237.65)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M410.8,252.4H376.4a1.16,1.16,0,0,1-1.2-1.2v-2.3a1.16,1.16,0,0,1,1.2-1.2h34.4a1.16,1.16,0,0,1,1.2,1.2v2.3A1.16,1.16,0,0,1,410.8,252.4Z\" transform=\"translate(-371.65 -237.65)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M377.2,252.4v51.3a1.42,1.42,0,0,0,.9,1.4l5.6,3.1a1.69,1.69,0,0,1,.9,1.4v7.3a1.58,1.58,0,0,0,1.6,1.6h14.5a1.58,1.58,0,0,0,1.6-1.6v-7.3a1.86,1.86,0,0,1,.9-1.5l6.2-3.1a1.65,1.65,0,0,0,.9-1.5V252.3\" transform=\"translate(-371.65 -237.65)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M400,314.8H386.9a1,1,0,0,1-1-1v-4.1a1,1,0,0,1,1-1H400a1,1,0,0,1,1,1v4.1A1.17,1.17,0,0,1,400,314.8Z\" transform=\"translate(-371.65 -237.65)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.5,245.4H374.3a2.43,2.43,0,0,1-2.4-2.4v-2.7a2.43,2.43,0,0,1,2.4-2.4h38.2a2.43,2.43,0,0,1,2.4,2.4V243A2.43,2.43,0,0,1,412.5,245.4Z\" transform=\"translate(-371.65 -237.65)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M416.1,248\" transform=\"translate(-371.65 -237.65)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M411.4,248.5\" transform=\"translate(-371.65 -237.65)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412,250.1a4,4,0,0,0,3.3-2.8,5.13,5.13,0,0,0-.4-4.3\" transform=\"translate(-371.65 -237.65)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412,251.9a6,6,0,0,0,6.2-4.9,5.77,5.77,0,0,0-3.2-7\" transform=\"translate(-371.65 -237.65)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.7,260.3H375.2a2.43,2.43,0,0,1-2.4-2.4h0a2.43,2.43,0,0,1,2.4-2.4h37.5a2.43,2.43,0,0,1,2.4,2.4h0A2.43,2.43,0,0,1,412.7,260.3Z\" transform=\"translate(-371.65 -237.65)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def E5_full_open_w_empty_collector\n    html = '\u003csvg\u003e\u003ctitle\u003e27_loaded_E5\u003c/title\u003e\u003cpath d=\"M298.56,180.55v77.6c0,.05,0,.1,0,.15.12,1.91,4.52,35.39,19.95,31.76,0,0,12.62,4.63,17.42-30.86a2.66,2.66,0,0,0,0-.37l-.61-78.29a2.52,2.52,0,0,0-2.52-2.5H301.08A2.52,2.52,0,0,0,298.56,180.55Z\" transform=\"translate(-295.85 -127.07)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"0.25\" y=\"48.56\" width=\"42.32\" height=\"4.79\" rx=\"2.4\" ry=\"2.4\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M300.7,176.75V228a1.65,1.65,0,0,0,.85,1.44l5.56,3.06A1.65,1.65,0,0,1,308,234v7.3a1.65,1.65,0,0,0,1.65,1.65h14.54a1.65,1.65,0,0,0,1.65-1.65V234a1.65,1.65,0,0,1,.91-1.48l6.18-3.09a1.65,1.65,0,0,0,.91-1.48V176.75\" transform=\"translate(-295.85 -127.07)\" fill=\"#f7fcfe\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M332.44,195.7c-4.78,2.8-6.52,9.41-14.41,11.9-6.3,2-13,0-17.32-2V228a1.65,1.65,0,0,0,.85,1.44l5.56,3.06A1.65,1.65,0,0,1,308,234v7.3a1.65,1.65,0,0,0,1.65,1.65h14.54a1.65,1.65,0,0,0,1.65-1.65V234a1.65,1.65,0,0,1,.91-1.48l6.18-3.09a1.65,1.65,0,0,0,.91-1.48V195.43Z\" transform=\"translate(-295.85 -127.07)\" fill=\"#26afe5\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M333.81,195.43V195a9.11,9.11,0,0,0-1.38.66Z\" transform=\"translate(-295.85 -127.07)\" fill=\"#26afe5\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"2.86\" y=\"44.96\" width=\"36.77\" height=\"4.72\" rx=\"1.19\" ry=\"1.19\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"13.51\" y=\"105.92\" width=\"15.06\" height=\"6.09\" rx=\"0.98\" ry=\"0.98\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M334.86,172.82\" transform=\"translate(-295.85 -127.07)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M335.47,174.39a3.88,3.88,0,0,0,3.29-2.79,4.85,4.85,0,0,0-.42-4.28\" transform=\"translate(-295.85 -127.07)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M335.47,176.23a6,6,0,0,0,6.16-4.86,5.79,5.79,0,0,0-3.17-7\" transform=\"translate(-295.85 -127.07)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"317.6\" y=\"144.54\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(161.16 -322.44) rotate(85.51)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"316.17\" y=\"145.11\" width=\"42.88\" height=\"7.39\" rx=\"2.36\" ry=\"2.36\" transform=\"translate(163.71 -326.48) rotate(85.51)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def E5_empty_closed_w_full_collector\n    html = '\u003csvg\u003e\u003ctitle\u003e27.1_loaded_E5_close-filtrated\u003c/title\u003e\u003cpath d=\"M335.92,239.59l0-3.43c-7.47-.37-13.8,4.31-18.61,9.22-1.94,2-3.63,4-5.06,5.73-2.81,3.43-7.38,4-11.39,3.72,2.67,10,8,22.27,17.67,20,0,0,12.62,4.63,17.42-30.86a2.66,2.66,0,0,0,0-.37Z\" transform=\"translate(-295.33 -142.61)\" fill=\"#26afe5\"/\u003e\u003cpath d=\"M298.84,165.31v77.6c0,.05,0,.1,0,.15.12,1.91,4.52,35.39,19.95,31.76,0,0,12.62,4.63,17.42-30.86a2.66,2.66,0,0,0,0-.37l-.61-78.29a2.52,2.52,0,0,0-2.52-2.5H301.36A2.52,2.52,0,0,0,298.84,165.31Z\" transform=\"translate(-295.33 -142.61)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"5.5\" y=\"2.53\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"3.51\" y=\"9.99\" width=\"36.77\" height=\"4.72\" rx=\"1.19\" ry=\"1.19\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M300.83,157.32v51.26a1.65,1.65,0,0,0,.85,1.44l5.56,3.06a1.65,1.65,0,0,1,.85,1.44v7.3a1.65,1.65,0,0,0,1.65,1.65h14.54a1.65,1.65,0,0,0,1.65-1.65v-7.25a1.65,1.65,0,0,1,.91-1.48L333,210a1.65,1.65,0,0,0,.91-1.48V157.32\" transform=\"translate(-295.33 -142.61)\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"14.16\" y=\"70.95\" width=\"15.06\" height=\"6.09\" rx=\"0.98\" ry=\"0.98\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"0.25\" y=\"0.25\" width=\"42.88\" height=\"7.39\" rx=\"2.36\" ry=\"2.36\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M339.71,152.85\" transform=\"translate(-295.33 -142.61)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M335,153.4\" transform=\"translate(-295.33 -142.61)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M335.6,155a3.88,3.88,0,0,0,3.29-2.79,4.85,4.85,0,0,0-.42-4.28\" transform=\"translate(-295.33 -142.61)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M335.6,156.8a6,6,0,0,0,6.16-4.86,5.79,5.79,0,0,0-3.17-7\" transform=\"translate(-295.33 -142.61)\" fill=\"none\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003crect x=\"1.05\" y=\"17.78\" width=\"42.32\" height=\"4.79\" rx=\"2.4\" ry=\"2.4\" fill=\"#fff\" stroke=\"#231f20\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def E6_closed\n    html = '\u003csvg\u003e\u003ctitle\u003e12_E6xxx\u003c/title\u003e\u003cpath d=\"M408,245.4H379.6a2.43,2.43,0,0,1-2.4-2.4v-5a2.43,2.43,0,0,1,2.4-2.4H408a2.43,2.43,0,0,1,2.4,2.4v5.1A2.41,2.41,0,0,1,408,245.4Z\" transform=\"translate(-371.65 -232.95)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.5,240.7H374.3a2.43,2.43,0,0,1-2.4-2.4v-2.7a2.43,2.43,0,0,1,2.4-2.4h38.2a2.43,2.43,0,0,1,2.4,2.4v2.7A2.43,2.43,0,0,1,412.5,240.7Z\" transform=\"translate(-371.65 -232.95)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M411.4,243.9\" transform=\"translate(-371.65 -232.95)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412,245.4a4,4,0,0,0,3.3-2.8,5.13,5.13,0,0,0-.4-4.3\" transform=\"translate(-371.65 -232.95)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412,247.3a6,6,0,0,0,6.2-4.9,5.77,5.77,0,0,0-3.2-7\" transform=\"translate(-371.65 -232.95)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M412.2,249.3H374.7a2.43,2.43,0,0,1-2.4-2.4h0a2.43,2.43,0,0,1,2.4-2.4h37.5a2.43,2.43,0,0,1,2.4,2.4h0A2.5,2.5,0,0,1,412.2,249.3Z\" transform=\"translate(-371.65 -232.95)\" fill=\"#fff\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M374.6,249.3v55.2l11.3,68c.8,4.8,4.6,5.8,7.9,5.1s4.4-5.3,4.4-5.3l13.2-67.8V249.3Z\" transform=\"translate(-371.65 -232.95)\" fill=\"none\" stroke=\"#000\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def sXXX_closed\n    html = '\u003csvg\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1{fill:#efe7a3;}.cls-2{fill:#fff;}.cls-2,.cls-3{stroke:#000;stroke-miterlimit:10;stroke-width:0.5px;}.cls-3{fill:none;}\u003c/style\u003e\u003c/defs\u003e\u003ctitle\u003eSxxx_withplasma_close\u003c/title\u003e\u003cpath class=\"cls-1\" d=\"M392.7,355.9c-.3-.2-.5-.3-.8-.5a16.7,16.7,0,0,0-13.4-2.8l.5,3.3,5.9,35.2c.8,4.8,4.6,5.8,7.9,5.1s4.4-5.3,4.4-5.3l6.2-32.1.6-2.9H392.7Z\" transform=\"translate(-370.35 -251.55)\"/\u003e\u003cpath class=\"cls-2\" d=\"M406.6,264H378.2a2.43,2.43,0,0,1-2.4-2.4v-5.1a2.43,2.43,0,0,1,2.4-2.4h28.4a2.43,2.43,0,0,1,2.4,2.4v5.1A2.43,2.43,0,0,1,406.6,264Z\" transform=\"translate(-370.35 -251.55)\"/\u003e\u003cpath class=\"cls-2\" d=\"M411.2,259.3H373a2.43,2.43,0,0,1-2.4-2.4v-2.7a2.43,2.43,0,0,1,2.4-2.4h38.2a2.43,2.43,0,0,1,2.4,2.4v2.7A2.58,2.58,0,0,1,411.2,259.3Z\" transform=\"translate(-370.35 -251.55)\"/\u003e\u003cpath class=\"cls-3\" d=\"M410,262.4\" transform=\"translate(-370.35 -251.55)\"/\u003e\u003cpath class=\"cls-3\" d=\"M410.6,264a4,4,0,0,0,3.3-2.8,5.13,5.13,0,0,0-.4-4.3\" transform=\"translate(-370.35 -251.55)\"/\u003e\u003cpath class=\"cls-3\" d=\"M410.6,265.8a6,6,0,0,0,6.2-4.9,5.77,5.77,0,0,0-3.2-7\" transform=\"translate(-370.35 -251.55)\"/\u003e\u003cpath class=\"cls-2\" d=\"M410.8,267.8H373.3a2.43,2.43,0,0,1-2.4-2.4h0a2.43,2.43,0,0,1,2.4-2.4h37.5a2.43,2.43,0,0,1,2.4,2.4h0A2.37,2.37,0,0,1,410.8,267.8Z\" transform=\"translate(-370.35 -251.55)\"/\u003e\u003cpath class=\"cls-3\" d=\"M373.3,267.8V323l11.3,68c.8,4.8,4.6,5.8,7.9,5.1s4.4-5.3,4.4-5.3L410.1,323V267.8Z\" transform=\"translate(-370.35 -251.55)\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\n\n  def sXXX_open\n    html = '\u003csvg\u003e\u003ctitle\u003e17_Sxx_open\u003c/title\u003e\u003cpath d=\"M449.7,343.9c-.3-.2-.5-.3-.8-.5a16.7,16.7,0,0,0-13.4-2.8l.5,3.3,5.9,35.2c.8,4.8,4.6,5.8,7.9,5.1s4.4-5.3,4.4-5.3l6.2-32.1.6-2.9Z\" transform=\"translate(-427.95 -203.14)\" fill=\"#efe7a3\"/\u003e\u003cpath d=\"M467.3,250.4\" transform=\"translate(-427.95 -203.14)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M467.9,252a4,4,0,0,0,3.3-2.8,5.13,5.13,0,0,0-.4-4.3\" transform=\"translate(-427.95 -203.14)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M467.9,253.8a6,6,0,0,0,6.2-4.9,5.77,5.77,0,0,0-3.2-7\" transform=\"translate(-427.95 -203.14)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M468.1,255.8H430.6a2.43,2.43,0,0,1-2.4-2.4h0a2.43,2.43,0,0,1,2.4-2.4h37.5a2.43,2.43,0,0,1,2.4,2.4h0A2.37,2.37,0,0,1,468.1,255.8Z\" transform=\"translate(-427.95 -203.14)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M430.5,255.8V311l11.3,68c.8,4.8,4.6,5.8,7.9,5.1s4.4-5.3,4.4-5.3L467.3,311V255.8Z\" transform=\"translate(-427.95 -203.14)\" fill=\"none\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M464.8,240.3,462,212a2.37,2.37,0,0,1,2.1-2.6l5.1-.5a2.37,2.37,0,0,1,2.6,2.1l2.9,28.3a2.37,2.37,0,0,1-2.1,2.6l-5.1.5A2.46,2.46,0,0,1,464.8,240.3Z\" transform=\"translate(-427.95 -203.14)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003cpath d=\"M470,244.3l-3.8-38a2.37,2.37,0,0,1,2.1-2.6l2.7-.3a2.37,2.37,0,0,1,2.6,2.1l3.8,38a2.37,2.37,0,0,1-2.1,2.6l-2.7.3A2.37,2.37,0,0,1,470,244.3Z\" transform=\"translate(-427.95 -203.14)\" fill=\"#fff\" stroke=\"#010101\" stroke-miterlimit=\"10\" stroke-width=\"0.5\"/\u003e\u003c/svg\u003e'\n    svg_from_html(html).translate!(0, 70)\n  end\nend"}},{"library":{"name":"SVGGraphics","category":"OLASimple","code_source":"############################################\n#\n# Generic SVG Graphics for lab work\n#\n############################################\n\nrequire 'matrix'\n\nmodule Graphics\n\n  class Tag\n    # an HTML/XML like tag\n    #\n    def initialize(tag_name, value: nil, properties: nil)\n      if properties.nil?\n        properties = {}\n      end\n      if value.nil?\n        value = \"\"\n      end\n      @tag_name = tag_name\n      @properties = properties\n      @value = value\n    end\n\n    def Tag.property(label, value)\n      return \"#{label}=\\\"#{value}\\\"\"\n    end\n\n    def value\n      @value\n    end\n\n    def update(props)\n      @properties = @properties.merge(props)\n    end\n\n    def properties\n      @properties.select {|_, v|\n        !v.nil? and v != \"\"}.map {|k, v|\n        Tag.property(k, v)\n      }.join(' ')\n    end\n\n    def formatter\n      REXML::Formatters::Pretty.new\n    end\n\n    def to_str\n      props = self.properties\n      if props != \"\"\n        props = \" \" + props\n      end\n      if self.value == \"\"\n        return \"\u003c#{@tag_name}#{props} /\u003e\"\n      end\n\n      mystr = \"\u003c#{@tag_name}#{props}\u003e#{self.value}\u003c/#{@tag_name}\u003e\"\n      return mystr\n      mydoc = REXML::Document.new(mystr)\n      self.formatter.write(mydoc.root, \"\")\n    end\n\n    def dump\n      {\n          properties: @properties,\n          value: @value,\n          tag_name: @tag_name\n      }\n    end\n\n    def self.load(props)\n      print(\"loading #{self}\")\n      return self.new(props[:tag_name], value: props[:value], properties: props[:properties])\n    end\n\n    def inst\n      self.class.load(self.dump)\n    end\n\n    # def inst\n    #   Marshal.load(Marshal.dump(self))\n    # end\n\n    def to_s\n      self.to_str\n    end\n  end\n\n  # A vector image, like an icon\n  class SVGElement \u003c Tag\n    attr_accessor :alignment, :value, :boundx, :boundy\n    attr_reader :x, :y, :yscale, :rot, :xposrot, :yposrot, :xscale, :yscale, :name, :classname, :transformations\n\n    @@debug = false\n\n    # A SVG element to display in an image\n    #\n    def initialize(children: nil,\n                   name: nil,\n                   classname: nil,\n                   x: 0,\n                   y: 0,\n                   boundx: 0,\n                   boundy: 0,\n                   alignment: 'top-left',\n                   xscale: 1,\n                   yscale: 1,\n                   rot: 0,\n                   xposrot: 0,\n                   yposrot: 0,\n                   properties: nil,\n                   transformations: nil,\n                   style: nil)\n      properties = properties || {}\n      classname = classname || \"\"\n      children = [children] unless children.is_a?(Array)\n      super(\"g\", properties: properties)\n      @name = name\n      @classname = classname\n      @boundx = boundx\n      @boundy = boundy\n      @children = children\n      @alignment = alignment\n      @style = style || \"\"\n      @transformations = transformations || []\n      self.update_coordinates!(x, y)\n      @xscale = xscale\n      @yscale = yscale\n      if @transformations.empty?\n        self.transform!(x: x, y: y, xscale: xscale, yscale: yscale, rot: rot, xposrot: xposrot, yposrot: yposrot)\n      end\n    end\n\n    def update_coordinates!(x, y)\n      @x = x\n      @y = y\n    end\n\n    def dump\n      tag_props = super\n      tag_props.reject! {|k, v| [\"tag_name\", \"value\"].include?(k.to_s)}\n      props = {\n          x: @x,\n          y: @y,\n          xscale: @xscale,\n          yscale: @yscale,\n          name: @name,\n          classname: @classname,\n          alignment: @alignment,\n          style: @style,\n          transformations: @transformations.dup.compact,\n          children: @children.dup.compact,\n          boundx: @boundx,\n          boundy: @boundy\n      }\n      props.merge(tag_props)\n    end\n\n    def self.load(props)\n      self.new(**props)\n    end\n\n    # sets the debug mode on or off\n    # debug mode will display bounding boxes and anchors\n    def self.debug onoroff\n      @@debug = onoroff\n    end\n\n    def value\n      # override the Tag value for converting SVGElement to a string\n      @value = \"\\n#{self.display}\"\n      super\n    end\n\n    def new_class(myclass)\n      inst = self.inst\n      inst.new_class!(myclass)\n    end\n\n    def new_name(myname)\n      inst = self.inst\n      inst.new_name!(myname)\n    end\n\n    def new_class!(myclass)\n      @classname = myclass\n      self\n    end\n\n    def new_name!(myname)\n      @name = myname\n      self\n    end\n\n    def svg_properties\n      # additional svg properties\n      props = {}\n      if @name != \"\"\n        props[\"id\"] = @name\n      end\n      if @classname != \"\"\n        props[\"class\"] = @classname\n      end\n      props[\"transform\"] = self.get_transform_attribute\n      props\n    end\n\n    def properties\n      # override the Tab properties to add additional svg-specific properties\n      # such as id=\"\" and transform\n      @properties = @properties.merge(self.svg_properties)\n      super\n    end\n\n    def origin\n      self.get_anchor(\"upper-left\")\n    end\n\n    def bounds\n      self.bounds_helper(0, 0)\n      # use min?\n    end\n\n    def align_with(other, other_anchor)\n      self.translate!(-@x, -@y)\n      v = other.get_abs_anchor(other_anchor)\n      v = v - other.abs_anchor_vector\n      # v = other.get_abs_anchor_vector(other_anchor)\n      #\n      self.translate!(*v)\n    end\n\n    def g id: nil, classname: nil\n      # return a external new group with svg element as a child\n      new_g = SVGElement.new(name: id, properties: {\"class\" =\u003e classname}, x: 0, y: 0)\n      new_g.update_coordinates!(@x, @y)\n      new_g.boundx = @boundx * @xscale\n      new_g.boundy = @boundy * @yscale\n      new_g.add_child(self)\n    end\n\n    # Sets the children array\n    def children=(g)\n      @children = g\n    end\n\n    # Returns the children array\n    def children\n      @children\n    end\n\n    def display\n      inst = self\n      if @@debug\n        inst = inst.display_with_anchors.bb\n      end\n      if inst.children.is_a?(Array)\n        inst.children.map do |child|\n          if child.is_a?(SVGElement)\n            \"#{child}\"\n          else\n            child\n          end\n        end.join(\"\\n\")\n      else\n        \"#{inst.children}\"\n      end\n    end\n\n    def add_child(child)\n      if child.is_a?(String)\n        @children.push(child)\n      else\n        @children.push(child.inst)\n      end\n      self\n    end\n\n    def group_children id: nil, classname: nil\n      # make an internal grouping of this elements children. Return that grouping\n      child_group = SVGElement.new(name: id, classname: classname)\n      child_group.children = self.children\n      self.children = [child_group]\n      return child_group\n    end\n\n    def cx\n      return (@x + @boundx) / 2.0\n    end\n\n    def cy\n      return (@y + @boundy) / 2.0\n    end\n\n    # ########################################################\n    # Transformation\n    # ########################################################\n\n    # scaling always happens last in SVG transform attribute to avoid unusual SVG behavior\n    def get_transform_attribute\n      # transformations = [self.apply_scale, self.apply_translate, self.apply_rotate]\n      transformations = []\n      transformations += @transformations.dup\n      transformations.push(\"scale(#{@xscale} #{@yscale})\")\n      transformations.push(self.anchor_translate)\n      attr = transformations.join(' ')\n      zero = \"(-){0,1}0(\\.0){0,1}\"\n      attr.gsub!(/translate\\((-){0,1}0(\\.0){0,1} (-){0,1}0(\\.0){0,1}\\)/, '')\n      attr.gsub!(/translate\\((-){0,1}0(\\.0){0,1}\\)/, '')\n      attr.gsub!(/rotate\\((-){0,1}0(\\.0){0,1} (-){0,1}0(\\.0){0,1} (-){0,1}0(\\.0){0,1}\\)\\s+/, \"\")\n      attr.gsub!(/scale\\(1\\)\\s+/, \"\")\n      attr.gsub!(/scale\\(1 1\\)\\s+/, \"\")\n      attr.strip.gsub(/\\s+/, \" \")\n    end\n\n    def align!(alignment)\n      self.alignment = alignment\n      self\n    end\n\n    def mirror_horizontal\n      child_group = self.group_children(id: \"mirror_horizontal\")\n      child_group.scale!(-1, 1).translate!(@boundx, 0)\n      return self\n    end\n\n    def mirror_vertical\n      child_group = self.group_children(id: \"mirror_vertical\")\n      child_group.scale!(1, -1).translate!(0, @boundy)\n      return self\n    end\n\n    def translate!(x, y = 0)\n      @x += x\n      y = y || 0\n      @y += y\n      if x != 0 or y != 0\n        @transformations.push self.translate_helper(x, y)\n      end\n      self\n    end\n\n    def rotate!(a, x = 0, y = 0)\n      if a != 0\n        @transformations.push self.rotate_helper(a, x, y)\n      end\n      self\n    end\n\n    # Scalings must always happen last to avoid unusual SVG behaviors\n    def scale!(x, y = nil)\n      if y.nil?\n        y = x\n      end\n      @xscale = x\n      @yscale = y\n      # if x != 1 and y != 1\n      #   @transformations.push self.scale_helper(x, y)\n      # end\n      self\n    end\n\n    def transform!(x: 0, y: 0, xscale: 1, yscale: 1, rot: 0, xposrot: 0, yposrot: 0)\n      # update the tranform values\n      self.translate!(x, y)\n          .rotate!(rot, xposrot, yposrot)\n          .scale!(xscale, yscale)\n    end\n\n    def translate(x, y = nil)\n      i = self.inst\n      i.translate!(x, y)\n    end\n\n    def rotate(a, x = 0, y = 0)\n      i = self.inst\n      i.rotate!(a, x, y)\n    end\n\n    def scale(x, y = nil)\n      i = self.inst\n      i.scale!(x, y)\n    end\n\n    def align(alignment)\n      inst = self.inst\n      inst.align!(alignment)\n    end\n\n    def transform(x: 0, y: 0, xscale: 1, yscale: 1, rot: 0, xposrot: 0, yposrot: 0)\n      # update the tranform values\n      inst = self.inst\n      inst.transform!(x: x, y: y, xscale: xscale, yscale: yscale, rot: rot, xposrot: xposrot, yposrot: yposrot)\n    end\n\n    def translate_helper(x, y = 0)\n      \"translate(#{x} #{y})\"\n    end\n\n    def rotate_helper(a, x = 0, y = 0)\n      # a: degrees\n      # x: rotate point\n      # y: rotate point\n      \"rotate(#{a} #{x} #{y})\"\n    end\n\n\n    def scale_helper(x, y = 1)\n      # a: degrees\n      # x: rotate point\n      # y: rotate point\n      \"scale(#{x} #{y})\"\n    end\n\n    def anchor_translate\n      x = self.anchor_vector\n      self.translate_helper(-x[-0], -x[1])\n    end\n\n    def apply_rotate\n      self.rotate_helper(@rot, @xposrot, @yposrot)\n    end\n\n    def apply_scale\n      self.scale_helper(@xscale, @yscale)\n    end\n\n    # ########################################################\n    # Anchors\n    # ########################################################\n\n    def get_anchor_vector(alignment)\n      anchor_matrix = self.parse_alignment alignment\n      cw = @boundx / 2.0\n      cy = @boundy / 2.0\n      Vector[(anchor_matrix[0] + 1) * cw, (anchor_matrix[1] + 1) * cy]\n    end\n\n    def anchor_vector\n      self.get_anchor_vector @alignment\n    end\n\n    def get_anchor alignment\n      p = Vector[@x, @y]\n      p + self.get_anchor_vector(alignment)\n    end\n\n    def anchor\n      p = Vector[@x, @y]\n      p + self.get_anchor_vector(@alignment)\n    end\n\n    def get_abs_anchor alignment\n      p = Vector[@x, @y]\n      p + self.get_abs_anchor_vector(alignment)\n    end\n\n    def abs_anchor\n      self.get_abs_anchor(@alignment)\n    end\n\n    # multiple the anchor vector by the scaling vector\n    def abs_anchor_vector\n      return self.get_abs_anchor_vector(@alignment)\n    end\n\n    def get_abs_anchor_vector alignment\n      a = self.get_anchor_vector(alignment)\n      return Vector[@xscale * a[0], @yscale * a[1]]\n    end\n\n    def display_with_anchors\n      if @name == 'debuganchor'\n        return self\n      end\n      cross = SVGElement.new(name: \"debuganchor\", boundx: 10, boundy: 10)\n      cross.add_child Tag.new('line', properties: {x1: 0, y1: 0, x2: 10, y2: 10, stroke: 'red', 'stroke-width' =\u003e 0.5})\n      cross.add_child Tag.new('line', properties: {x2: 0, y1: 0, x1: 10, y2: 10, stroke: 'red', 'stroke-width' =\u003e 0.5})\n      cross.add_child Tag.new('rect', properties: {x: 0, y: 0, width: 10, height: 10, stroke: 'red', fill: 'none', 'stroke-width' =\u003e 0.5})\n      cross.scale!(0.75)\n      cross.align!('center-center')\n      inst = self.inst\n      halign = ['left', 'center', 'right']\n      valign = ['top', 'center', 'bottom']\n      halign.each do |h|\n        valign.each do |v|\n          inst.add_child(cross.translate(*inst.get_anchor_vector(\"#{h}-#{v}\")))\n        end\n      end\n      inst\n    end\n\n    def bb\n      if @name == \"debuganchor\"\n        return self\n      end\n      inst = self.inst\n      ax, ay = self.anchor\n      bounding_box = Tag.new('rect', properties: {\n          x: 0,\n          y: 0,\n          width: @boundx,\n          height: @boundy,\n          \"stroke-width\" =\u003e 0.5,\n          stroke: 'red',\n          fill: 'none'\n      })\n      inst.add_child(bounding_box)\n    end\n\n    def parse_alignment(alignment)\n      # parses an alignment string like 'center-left'\n\n      tokens = alignment.split('-')\n      if tokens.length != 2\n        raise \"Property 'alignment=#{alignment}' is improperly formatted (e.g. use 'alignment=\\\"center-left\\\"')\"\n      end\n\n      if ['left', 'right'].include?(tokens[1])\n        tokens[0], tokens[1] = tokens[1], tokens[0]\n      end\n\n      if ['upper', 'bottom', 'top'].include?(tokens[0])\n        tokens[0], tokens[1] = tokens[1], tokens[0]\n      end\n\n      if ['left', 'right'].include?(tokens[1])\n        raise \"Property 'alignment' not understood. Cannot be aligned to both left and right. Found '#{alignment}'\"\n      end\n\n      if ['top', 'upper', 'bottom'].include?(tokens[0])\n        raise \"Property 'alignment' not understood. Cannot be aligned to both top and bottom. Found '#{alignment}'\"\n      end\n\n      anchor_dict = {\n          left: -1,\n          center: 0,\n          right: 1,\n          upper: -1,\n          top: -1,\n          bottom: 1\n      }\n      tokens.map {|t| anchor_dict[t.to_sym]}\n    end\n\n    # change relative coordinates to absolute coordinates\n    def v(x, y)\n      return Vector[x, y]\n    end\n\n    def abs_v(x, y)\n      return Vector[@xscale * x, @yscale * y]\n    end\n\n    def style(mystyle)\n      inst = self.inst\n      inst.style!(mystyle)\n    end\n\n    def style!(mystyle)\n      @style = Tag.new(\"style\", value: mystyle)\n    end\n\n    def svg(width=nil, height=nil, scale = 1.0)\n      width = width || @boundx * @xscale\n      height = height || @boundy * @yscale\n      Tag.new('svg',\n              value: [@style, self.g(id: \"svg\").to_str].join(''), properties: {\n              width: \"#{width * scale}px\",\n              height: \"#{height * scale}px\",\n              viewBox: \"0 0 #{width} #{height}\",\n              version: \"1.1\",\n              xmlns: \"http://www.w3.org/2000/svg\"\n          })\n    end\n  end\n\n  class Shape \u003c SVGElement\n    def initialize(x, y, shape, stroke = 'black', stroke_width = 1, shapevalue = nil, *args)\n\n      super(*args)\n      if @shape_properties.nil?\n        @shape_properties = {}\n      end\n      @shape = shape\n      @shapevalue = shapevalue\n      self.update({stroke: stroke, \"stroke-width\" =\u003e stroke_width})\n    end\n\n    def dump\n      elements_props = super\n      {\n          shape_properties: @shape_properties,\n          shape: @shape,\n          shapevalue: @shapevalue,\n          element_props: elements_props\n      }\n    end\n\n    def self.load(props)\n      new = self.new(0, 0, props[:shape], 'black', 1, props[:shapevalue], **props[:element_props])\n      new.update(props[:shape_properties])\n    end\n\n    def inst\n      self.class.load(self.dump)\n    end\n\n    # def inst\n    #   Marshal.load(Marshal.dump(self))\n    # end\n\n    def get_child\n      Tag.new(@shape, value: @shapevalue, properties: @shape_properties)\n    end\n\n    def update new_hash\n      @shape_properties.merge!(new_hash)\n      @children[0] = self.get_child\n      self\n    end\n  end\n\n  class Rect \u003c Shape\n    def initialize(x, y, width, height, *args)\n      @shape_properties = {width: width, height: height}\n      super(x, y, 'rect', *args)\n      @boundx = width\n      @boundy = height\n    end\n  end\n\n  class Circle \u003c Shape\n    def initialize(x, y, r, *args)\n      @shape_properties = {r: r, cx: 0, cy: 0}\n      super(x, y, 'circle', *args)\n    end\n  end\n\n  class Line \u003c Shape\n    def initialize(x1, y1, x2, y2, *args)\n      @shape_properties = {\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2}\n      super(0, 0, 'line', *args)\n    end\n  end\n\n  class VectorLine \u003c Shape\n    def initialize(x, y, dx, dy, *args)\n      @shape_properties = {x1: 0, y1: 0, x2: dx, y2: dy}\n      super(x, y, 'line', *args)\n    end\n  end\n\n  def label(text, properties = nil)\n    properties = properties || {}\n    font_size = properties[:font_size] || 12\n    boundx = font_size * text.length * 0.5\n    boundy = font_size\n    mylabel = SVGElement.new(boundx: boundx, boundy: boundy)\n    a = mylabel.get_anchor_vector('center-center')\n    properties[:x] = a[0]\n    properties[:y] = a[1]\n    properties[\"alignment-baseline\".to_sym] = 'middle'\n    properties[\"text-anchor\".to_sym] = 'middle'\n    properties['font-family'.to_sym] = \"Verdana\"\n    mylabel.add_child(\n        Tag.new(\"text\", value: text, properties: properties)\n    )\n  end\n\n  # class Label \u003c Shape\n  #   def initialize(label, font_size, x = 0, y = 0, font_family = \"Arial\", stroke='black', stroke_width=0, *args)\n  #     @shape_properties = {\n  #         x: 0, y: 0,\n  #         \"font-size\" =\u003e font_size,\n  #         \"font-family\" =\u003e font_family,\n  #         'alignment-baseline' =\u003e 'middle',\n  #         'text-anchor' =\u003e 'middle'}\n  #     label = label || \"\"\n  #     super(x, y, 'text', stroke, stroke_width, @shapevalue, *args)\n  #     @shapevalue = label\n  #     @boundy = font_size\n  #     @boundx = @shapevalue.length * font_size\n  #     self.update({})\n  #   end\n  #\n  #   def self.load(props)\n  #     new = self.new(props[:shapevalue], 0, 0, 0, \"Arial\", \"black\", 0, props[:element_props])\n  #     new.update(props[:shape_properties])\n  #   end\n  #\n  #   # Override x, y position so that label aligns with anchor\n  #   def get_child\n  #     s = @shape_properties.dup\n  #     av = self.get_anchor_vector('center-center')\n  #     s[:x] = av[0]\n  #     s[:y] = av[1]\n  #     Tag.new(@shape, value: @shapevalue, properties: s)\n  #   end\n  #\n  #   # auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical | inherit\n  #   def vertical_alignment(alignment)\n  #     self.update('alignment-baseline' =\u003e alignment)\n  #   end\n  #\n  #   # start | middle | end | inherit\n  #   def text_anchor(alignment)\n  #     self.update('text-anchor' =\u003e alignment)\n  #   end\n  # end\n\n  # Organizes SVGElements on a grid of your choosing.\n  # Makes it easier to position elements\n  class SVGGrid \u003c SVGElement\n    attr_accessor :elements\n\n    def initialize(xnum, ynum, xspacing, yspacing, *args)\n      super(*args)\n      if @name == \"\"\n        @name = \"grid\"\n      end\n      @xnum = xnum\n      @ynum = ynum\n      @xspacing = xspacing\n      @yspacing = yspacing\n      @boundx = self.boundx\n      @boundy = self.boundy\n      @elements = Array.new(xnum) {Array.new(ynum) {[]}} # 3d array for displaying some elements on a 2D grid\n    end\n\n    def dump\n      element_props = super\n      {\n          xspacing: @xspacing,\n          yspacing: @yspacing,\n          xnum: @xnum,\n          ynum: @ynum,\n          element_props: element_props,\n          elements: @elements\n      }\n    end\n\n    def self.load(props)\n      newgrid = SVGGrid.new(props[:xnum], props[:ynum], props[:xspacing], props[:yspacing], props[:element_props])\n      newgrid.update_elements(props[:elements])\n      newgrid\n    end\n\n    def update_elements elements\n      if elements.length != @xnum\n        raise \"Cannot update_elements. Number of rows must equal #{xnum} but was #{elements.length}\"\n      end\n\n      col_lengths = elements.map {|row| row.length}.uniq\n\n      if col_lengths.length != 1\n        raise \"Cannot update_elements. Rows have different number of columns.\"\n      end\n\n      if elements[0].length != @ynum\n        raise \"Cannot update_elements. Number of columns must equal #{@ynum} but was #{elements[0].length}\"\n      end\n\n      @elements = elements\n    end\n\n    def inst\n      self.class.load(self.dump)\n    end\n\n    # def inst\n    #   Marshal.load(Marshal.dump(self))\n    # end\n\n\n    def pos(r, c)\n      return Vector[r * @xspacing, c * @yspacing]\n    end\n\n    def abs_pos_vector(r, c)\n      v = self.pos(r, c)\n      return Vector[@xscale * v[0], @yscale * v[1]]\n    end\n\n    def grid_coor(r, c, x, y)\n      px, py = self.pos(r, c)\n      return [px + x, py + y]\n    end\n\n    def grid_elements\n      @elements.map.with_index do |row, r|\n        x = self.pos(r, 0)[0]\n        row_element = SVGElement.new(name: \"gridrow#{r}\").translate(x, 0)\n        row.each.with_index do |element, c|\n          y = pos(0, c)[1]\n          col_element = SVGElement.new(name: \"gridcol#{c}\").translate(0, y)\n          col_element.children = element\n\n          # don't add empty columns\n          if not element.nil? and not element == \"\" and not element == []\n            row_element.add_child(col_element)\n          end\n        end\n\n        # don't add empty rows\n        row_element unless row_element.children.empty?\n      end.compact\n    end\n\n    def children\n      children = @children.dup\n      grid_elements = self.grid_elements\n      grid_elements + children\n    end\n\n    def group_children id: nil, classname: nil\n      raise \"Cannot group children of a SVGGrid. Group using '.g' before grouping children\"\n    end\n\n    def add(element, x, y)\n      xfloor = x.floor\n      xrem = (x - xfloor).round(1)\n      yfloor = y.floor\n      yrem = (y - yfloor).round(1)\n\n      if xrem \u003e 0 or yrem \u003e 0\n        element = element.g(id: \"gridshift\").translate(xrem * @xspacing, yrem * @yspacing)\n      end\n      ele = @elements[xfloor][yfloor]\n      if ele.nil?\n        ele = []\n      end\n      ele.push(element)\n      @elements[xfloor][yfloor] = ele\n    end\n\n    # TODO: maximum width from individual elements bounding boxes...\n    def boundx\n      @xnum * @xspacing\n    end\n\n    # TODO: maximum height from individual elements bounding boxes...\n    def boundy\n      @ynum * @yspacing\n    end\n\n    # Applies the block through each element in the grid\n    def each\n      raise \"#{self.class.name}.each needs a selection block\" unless block_given?\n      @elements.each.with_index do |row, r|\n        row.each.with_index do |col, c|\n          col.each do |element|\n            Proc.new.call(element)\n          end\n        end\n      end\n    end\n\n    # Applies the block through each row, col in the grid\n    def each_pos\n      raise \"#{self.class.name}.each_pos needs a selection block\" unless block_given?\n      @elements.each.with_index do |row, r|\n        row.each.with_index do |col, c|\n          Proc.new.call(r, c)\n        end\n      end\n    end\n\n    def elements_at(r, c)\n      @elements[r][c]\n    end\n\n    def select\n      raise \"#{self.class.name}.select needs a selection block\" unless block_given?\n      selected = []\n      @elements.each.with_index do |row, r|\n        row.each.with_index do |col, c|\n          if Proc.new.call(r, c)\n            selected.push(col)\n          end\n        end\n      end\n      return selected\n    end\n\n    # def add_each_pos\n    #   raise \"#{self.class.name}.add_each_pos needs a selection block\" unless block_given?\n    #   @elements.each.with_index do |row, r|\n    #     row.each.with_index do |col, c|\n    #       new_element = Proc.new.call(r, c)\n    #       self.add(new_element, r, c)\n    #     end\n    #   end\n    # end\n\n    # return a copy of this grid with grid dots\n    def griddots\n      dot = Tag.new('circle', properties: {r: 3})\n      inst = self.inst\n      inst.each_pos do |r, c|\n        inst.add(dot, r, c)\n      end\n      inst\n    end\n  end\n\n  module FunctionalSVG\n    def roundedtube(opened: false, contents: 'empty')\n      _roundedtube = SVGElement.new(boundx: 46.92, boundy: 140)\n      if contents == 'full'\n        _roundedtube.add_child(\n              '\u003csvg\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1{fill:#26afe5;}.cls-2{fill:#fff;}.cls-2,.cls-3{stroke:#231f20;stroke-miterlimit:10;stroke-width:0.5px;}.cls-3{fill:none;}\u003c/style\u003e\u003c/defs\u003e\u003ctitle\u003eUntitled-18\u003c/title\u003e\u003cpath class=\"cls-1\" d=\"M412.76,285.62c-8.82,5.75-17.91,3.62-26.54.87l-10.47,3v45.4c0,.05,0,.1,0,.15.12,1.91,4.52,35.39,19.95,31.76,0,0,12.62,4.63,17.42-30.86a2.67,2.67,0,0,0,0-.37Z\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003cpath class=\"cls-1\" d=\"M383.88,285.72a15.52,15.52,0,0,0-8.13-.66v4.44l10.47-3Z\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003crect class=\"cls-2\" x=\"5.5\" y=\"2.53\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\"/\u003e\u003crect class=\"cls-2\" x=\"0.25\" y=\"0.25\" width=\"42.88\" height=\"7.39\" rx=\"2.36\" ry=\"2.36\"/\u003e\u003cpath class=\"cls-3\" d=\"M412.06,252\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003cpath class=\"cls-3\" d=\"M412.67,253.6a3.88,3.88,0,0,0,3.29-2.79,4.85,4.85,0,0,0-.42-4.28\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003cpath class=\"cls-3\" d=\"M412.67,255.44a6,6,0,0,0,6.16-4.86,5.79,5.79,0,0,0-3.17-7\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003cpath class=\"cls-3\" d=\"M375.39,257.57v77.6c0,.05,0,.1,0,.15.12,1.91,4.52,35.39,19.95,31.76,0,0,12.62,4.63,17.42-30.86a2.66,2.66,0,0,0,0-.37l-.61-78.29a2.52,2.52,0,0,0-2.52-2.5H377.91A2.52,2.52,0,0,0,375.39,257.57Z\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003crect class=\"cls-2\" x=\"0.53\" y=\"11.4\" width=\"42.32\" height=\"4.79\" rx=\"2.4\" ry=\"2.4\"/\u003e\u003c/svg\u003e'\n              )\n      elsif contents == 'empty'\n        _roundedtube.add_child(\n                '\u003csvg\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1-emptytube{fill:#fff;}.cls-2{fill:#fff;}.cls-2,.cls-3{stroke:#231f20;stroke-miterlimit:10;stroke-width:0.5px;}.cls-3{fill:none;}\u003c/style\u003e\u003c/defs\u003e\u003ctitle\u003eUntitled-18\u003c/title\u003e\u003cpath class=\"cls-1-emptytube\" d=\"M412.76,285.62c-8.82,5.75-17.91,3.62-26.54.87l-10.47,3v45.4c0,.05,0,.1,0,.15.12,1.91,4.52,35.39,19.95,31.76,0,0,12.62,4.63,17.42-30.86a2.67,2.67,0,0,0,0-.37Z\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003cpath class=\"cls-1-emptytube\" d=\"M383.88,285.72a15.52,15.52,0,0,0-8.13-.66v4.44l10.47-3Z\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003crect class=\"cls-2\" x=\"5.5\" y=\"2.53\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\"/\u003e\u003crect class=\"cls-2\" x=\"0.25\" y=\"0.25\" width=\"42.88\" height=\"7.39\" rx=\"2.36\" ry=\"2.36\"/\u003e\u003cpath class=\"cls-3\" d=\"M412.06,252\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003cpath class=\"cls-3\" d=\"M412.67,253.6a3.88,3.88,0,0,0,3.29-2.79,4.85,4.85,0,0,0-.42-4.28\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003cpath class=\"cls-3\" d=\"M412.67,255.44a6,6,0,0,0,6.16-4.86,5.79,5.79,0,0,0-3.17-7\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003cpath class=\"cls-3\" d=\"M375.39,257.57v77.6c0,.05,0,.1,0,.15.12,1.91,4.52,35.39,19.95,31.76,0,0,12.62,4.63,17.42-30.86a2.66,2.66,0,0,0,0-.37l-.61-78.29a2.52,2.52,0,0,0-2.52-2.5H377.91A2.52,2.52,0,0,0,375.39,257.57Z\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003crect class=\"cls-2\" x=\"0.53\" y=\"11.4\" width=\"42.32\" height=\"4.79\" rx=\"2.4\" ry=\"2.4\"/\u003e\u003c/svg\u003e'\n              )\n      else\n        return roundedtube(opened: false, contents: 'empty')\n      end\n      _roundedtube.translate!(0,70)\n    end\n\n    def screwbottle(opened: false, contents: 'empty')\n      _screwbottle = SVGElement.new(boundx: 46.92, boundy: 140)\n      _screwbottle.add_child(\n          '\u003csvg\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1{fill:#26afe5;}.cls-2,.cls-3{fill:none;}.cls-3,.cls-4{stroke:#231f20;stroke-miterlimit:10;stroke-width:0.5px;}.cls-4{fill:#fff;}\u003c/style\u003e\u003c/defs\u003e\u003cpath class=\"cls-1\" d=\"M377.92,325.7c-4.23-1-8.46.27-11.89,2v31.86a8.73,8.73,0,0,0,8.71,8.71h41.68a8.73,8.73,0,0,0,8.71-8.71V328.25c-9.24.24-7.87,3.46-19.44,7.63S387.64,328,377.92,325.7Z\" transform=\"translate(-365.78 -243.8)\"/\u003e\u003cpath class=\"cls-2\" d=\"M369,280.29\" transform=\"translate(-365.78 -243.8)\"/\u003e\u003crect class=\"cls-3\" x=\"0.25\" y=\"43.66\" width=\"59.09\" height=\"80.08\" rx=\"8.6\" ry=\"8.6\"/\u003e\u003cpath class=\"cls-4\" d=\"M395.58,244c-16.32,0-29.55,3.59-29.55,8V285.6c0,4.42,13.23,8,29.55,8s29.55-3.59,29.55-8V252.05C425.12,247.63,411.89,244,395.58,244Z\" transform=\"translate(-365.78 -243.8)\"/\u003e\u003cellipse class=\"cls-4\" cx=\"29.8\" cy=\"8.12\" rx=\"22.86\" ry=\"4.76\"/\u003e\u003cline class=\"cls-3\" x1=\"5.46\" y1=\"14.46\" x2=\"5.46\" y2=\"41.93\"/\u003e\u003cline class=\"cls-3\" x1=\"30.86\" y1=\"18.98\" x2=\"30.86\" y2=\"46.45\"/\u003e\u003cline class=\"cls-3\" x1=\"55.9\" y1=\"12.89\" x2=\"55.9\" y2=\"40.36\"/\u003e\u003cline class=\"cls-3\" x1=\"44.1\" y1=\"17.66\" x2=\"44.1\" y2=\"45.13\"/\u003e\u003cline class=\"cls-3\" x1=\"17.63\" y1=\"17.66\" x2=\"17.63\" y2=\"45.13\"/\u003e\u003c/svg\u003e'\n          ).translate!(0, 70)\n    end\n    \n    def samplecolumn(opened: false, contents: 'empty')\n      column =  SVGElement.new(boundx: 46.92, boundy: 140)\n      if contents == 'empty' \u0026\u0026 !opened\n        column.add_child(\n          '\u003csvg\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1_sc{fill:#fff;}.cls-1_sc,.cls-2_sc{stroke:#231f20;stroke-miterlimit:10;stroke-width:0.5px;}.cls-2_sc{fill:none;}\u003c/style\u003e\u003c/defs\u003e\u003cpath class=\"cls-1_sc\" d=\"M375.23,260.43V338c0,.05,0,.1,0,.15.12,1.91,4.52,35.39,19.95,31.76,0,0,12.62,4.63,17.42-30.86a2.66,2.66,0,0,0,0-.37L412,260.41a2.52,2.52,0,0,0-2.52-2.5H377.75A2.52,2.52,0,0,0,375.23,260.43Z\" transform=\"translate(-371.72 -237.72)\"/\u003e\u003crect class=\"cls-1_sc\" x=\"5.5\" y=\"2.53\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\"/\u003e\u003crect class=\"cls-1_sc\" x=\"3.51\" y=\"9.99\" width=\"36.77\" height=\"4.72\" rx=\"1.19\" ry=\"1.19\"/\u003e\u003cpath class=\"cls-1_sc\" d=\"M377.22,252.44v51.26a1.65,1.65,0,0,0,.85,1.44l5.56,3.06a1.65,1.65,0,0,1,.85,1.44v7.3a1.65,1.65,0,0,0,1.65,1.65h14.54a1.65,1.65,0,0,0,1.65-1.65v-7.25a1.65,1.65,0,0,1,.91-1.48l6.18-3.09a1.65,1.65,0,0,0,.91-1.48V252.44\" transform=\"translate(-371.72 -237.72)\"/\u003e\u003crect class=\"cls-1_sc\" x=\"14.16\" y=\"70.95\" width=\"15.06\" height=\"6.09\" rx=\"0.98\" ry=\"0.98\"/\u003e\u003crect class=\"cls-1_sc\" x=\"0.25\" y=\"0.25\" width=\"42.88\" height=\"7.39\" rx=\"2.36\" ry=\"2.36\"/\u003e\u003cpath class=\"cls-2_sc\" d=\"M416.1,248\" transform=\"translate(-371.72 -237.72)\"/\u003e\u003cpath class=\"cls-2_sc\" d=\"M411.38,248.51\" transform=\"translate(-371.72 -237.72)\"/\u003e\u003cpath class=\"cls-2_sc\" d=\"M412,250.08a3.88,3.88,0,0,0,3.29-2.79,4.85,4.85,0,0,0-.42-4.28\" transform=\"translate(-371.72 -237.72)\"/\u003e\u003cpath class=\"cls-2_sc\" d=\"M412,251.91a6,6,0,0,0,6.16-4.86,5.79,5.79,0,0,0-3.17-7\" transform=\"translate(-371.72 -237.72)\"/\u003e\u003crect class=\"cls-1_sc\" x=\"1.05\" y=\"17.78\" width=\"42.32\" height=\"4.79\" rx=\"2.4\" ry=\"2.4\"/\u003e\u003c/svg\u003e'\n          )\n      elsif contents == 'no-collector' \u0026\u0026 closed\n        column.add_child(\n          '\u003csvg\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1_sc{fill:#fff;}.cls-1_sc,.cls-2_sc{stroke:#231f20;stroke-miterlimit:10;stroke-width:0.5px;}.cls-2_sc{fill:none;}\u003c/style\u003e\u003c/defs\u003e\u003crect class=\"cls-1_sc\" x=\"5.5\" y=\"2.53\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\"/\u003e\u003crect class=\"cls-1_sc\" x=\"3.51\" y=\"9.99\" width=\"36.77\" height=\"4.72\" rx=\"1.19\" ry=\"1.19\"/\u003e\u003cpath class=\"cls-1_sc\" d=\"M377.46,280.13v51.26a1.65,1.65,0,0,0,.85,1.44l5.56,3.06a1.65,1.65,0,0,1,.85,1.44v7.3a1.65,1.65,0,0,0,1.65,1.65h14.54a1.65,1.65,0,0,0,1.65-1.65v-7.25a1.65,1.65,0,0,1,.91-1.48l6.18-3.09a1.65,1.65,0,0,0,.91-1.48V280.13\" transform=\"translate(-371.95 -265.42)\"/\u003e\u003crect class=\"cls-1_sc\" x=\"14.16\" y=\"70.95\" width=\"15.06\" height=\"6.09\" rx=\"0.98\" ry=\"0.98\"/\u003e\u003crect class=\"cls-1_sc\" x=\"0.25\" y=\"0.25\" width=\"42.88\" height=\"7.39\" rx=\"2.36\" ry=\"2.36\"/\u003e\u003cpath class=\"cls-2_sc\" d=\"M416.34,275.65\" transform=\"translate(-371.95 -265.42)\"/\u003e\u003cpath class=\"cls-2_sc\" d=\"M411.62,276.2\" transform=\"translate(-371.95 -265.42)\"/\u003e\u003cpath class=\"cls-2_sc\" d=\"M412.23,277.77a3.88,3.88,0,0,0,3.29-2.79,4.85,4.85,0,0,0-.42-4.28\" transform=\"translate(-371.95 -265.42)\"/\u003e\u003cpath class=\"cls-2_sc\" d=\"M412.23,279.61a6,6,0,0,0,6.16-4.86,5.79,5.79,0,0,0-3.17-7\" transform=\"translate(-371.95 -265.42)\"/\u003e\u003c/svg\u003e'\n          )\n      else\n        column.add_child(samplecolumn.translate!(0,-70)) #default to closed and empty if options could not be matched\n      end\n      column.translate!(0,70)\n    end\n    \n    def collectiontube(contents: 'empty')\n      ctube = SVGElement.new(boundx: 46.92, boundy: 140)\n      if contents == 'empty'\n        ctube.add_child(\n          '\u003csvg\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1_collection_tube{fill:none;stroke:#231f20;stroke-miterlimit:10;stroke-width:0.5px;}\u003c/style\u003e\u003c/defs\u003e\u003cpath class=\"cls-1_collection_tube\" d=\"M377.69,251.62v77.6c0,.05,0,.1,0,.15.12,1.91,4.52,35.39,19.95,31.76,0,0,12.62,4.63,17.42-30.86a2.66,2.66,0,0,0,0-.37l-.61-78.29a2.52,2.52,0,0,0-2.52-2.5H380.21A2.52,2.52,0,0,0,377.69,251.62Z\" transform=\"translate(-374.97 -246.46)\"/\u003e\u003crect class=\"cls-1_collection_tube\" x=\"0.25\" y=\"0.25\" width=\"42.32\" height=\"4.79\" rx=\"2.4\" ry=\"2.4\"/\u003e\u003c/svg\u003e'\n          )\n      elsif contents == 'full'\n        ctube.add_child(\n          '\u003csvg\u003e\u003cdefs\u003e\u003cstyle\u003e.cls-1_collection_tube{fill:#26afe5;}.cls-2_collection_tube{fill:#fff;}.cls-2_collection_tube,.cls-3_collection_tube{stroke:#231f20;stroke-miterlimit:10;stroke-width:0.5px;}.cls-3_collection_tube{fill:none;}\u003c/style\u003e\u003c/defs\u003e\u003cpath class=\"cls-1_collection_tube\" d=\"M412.76,285.62c-8.82,5.75-17.91,3.62-26.54.87l-10.47,3v45.4c0,.05,0,.1,0,.15.12,1.91,4.52,35.39,19.95,31.76,0,0,12.62,4.63,17.42-30.86a2.67,2.67,0,0,0,0-.37Z\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003cpath class=\"cls-1_collection_tube\" d=\"M383.88,285.72a15.52,15.52,0,0,0-8.13-.66v4.44l10.47-3Z\" transform=\"translate(-372.39 -241.25)\"/\u003e\u003crect class=\"cls-2_collection_tube\" x=\"5.5\" y=\"2.53\" width=\"33.11\" height=\"9.82\" rx=\"2.36\" ry=\"2.36\"/\u003e\u003c/svg\u003e'\n          )\n      end\n    end    \n    \n    def svg_from_html(html, bx=50, by=140)\n      __svg = SVGElement.new(boundx: bx, boundy: by)\n      __svg.add_child(html)\n      __svg\n    end\n\n    def icon_from_html(html)\n      __svg = SVGElement.new(boundx: 500, boundy: 500)\n      __svg.add_child(html)\n      __svg\n    end\n\n    # svg_func: a symbol method name for a function that returns an SVGElement\n    # svg_label: label for svg\n    # opts: option hash to be applied to svg_func as named parameters\n    #\n    # example: svg = draw_svg(:tube, svg_label: \"Hello\\nWorld\", opened: true, full: true)\n    def draw_svg(svg_func, svg_label: nil, svg_label_initial_offset: 0, **opts)\n      if opts.any?\n        svg = method(svg_func).call(**opts)\n      else\n        svg = method(svg_func).call\n      end\n      svg = label_object(svg, svg_label, svg_label_initial_offset) if svg_label\n      svg\n    end\n\n    def label_object(svg, _label, initial_offset=0)\n      def label_helper(svg, labels, offsety = 0)\n        l = label(labels.shift, \"font-size\".to_sym =\u003e 25)\n        l.align!('center-center')\n        l.translate!(svg.boundx / 2, svg.boundy / 2 + offsety.to_i)\n        svg.add_child(l)\n        return label_helper(svg, labels, offsety + 25) unless labels.empty?\n        return svg\n      end\n\n      labels = _label.split(\"\\n\")\n      return labels.empty? ? svg : label_helper(svg, labels, initial_offset)\n    end\n  end\n\n  module MyGraphics\n    attr_reader :tube, :openlid, :closedlid, :closedtube, :opentube, :detection_strip, :strip, :striplabel\n\n    # bounding box for tube elements\n    @@tubebb = SVGElement.new(boundx: 78.35, boundy: 242.95)\n\n    def rarrow\n      arrow = SVGElement.new(boundx: 33.48, boundy: 38.65)\n      arrow.new_class!(\"rarrow\")\n      arrow.add_child('\u003cpolygon points=\"0,0 33.477,19.328 0,38.655 \"/\u003e')\n    end\n\n    def larrow\n      self.rarrow.mirror_horizontal.new_class(\"larrow\")\n    end\n\n    def uparrow\n      arrow = SVGElement.new(boundx: 38.65, boundy: 33.48)\n      arrow.new_class!(\"uparrow\")\n      arrow.add_child('\u003cpolygon points=\"0,33.477 19.328,0 38.655,33.477 \"/\u003e')\n    end\n\n    def downarrow\n      self.uparrow.mirror_vertical.new_class(\"downarrow\")\n    end\n\n    def tube\n      _tube = @@tubebb.inst\n      _tube.new_class!(\"tube\")\n      _tube.add_child(\u003c\u003cEOF\n      \u003cpath fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M4.75,99.697v45.309l14.998,90.066\n        c0,4.35,5.036,7.875,11.25,7.875c6.215,0,11.25-3.525,11.25-7.875l15-90.066V99.697H4.75z\"/\u003e\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M61.998,95.697c0,2.199-1.799,4-4,4h-54c-2.2,0-4-1.801-4-4v-1.875c0-2.201,1.8-4,4-4h54\n          c2.201,0,4,1.799,4,4V95.697z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M61.998,95.697c0,2.199-1.799,4-4,4h-54c-2.2,0-4-1.801-4-4v-1.875\n          c0-2.201,1.8-4,4-4h54c2.201,0,4,1.799,4,4V95.697z\"/\u003e\n      \u003c/g\u003e\nEOF\n      )\n      # \u003cline fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"7.721\" y1=\"123.572\" x2=\"53.387\" y2=\"123.572\"/\u003e\n      _tube.inst\n    end\n\n    def tube2mL\n      _tube = @@tubebb.inst\n      _tube.new_class!(\"tube\")\n      _tube.add_child(\u003c\u003cEOF\n        \t\u003cg id=\"2mLTube\"\u003e\n\t\t\u003cpath id=\"_x32_mLTube\" fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M57,96.698H4.503v42.581l0.479,2.704\n\t\tc-0.311,1.553-0.479,3.153-0.479,4.792v70.798c0,13.955,11.812,25.374,26.249,25.374c14.436,0,26.248-11.419,26.248-25.374v-70.798\n\t\tc0-1.639-0.17-3.239-0.48-4.792l0.48-2.704V96.698z\"/\u003e\u003c/g\u003e\nEOF\n      )\n      _tube\n    end\n\n    def closedlid\n      _closedlid = @@tubebb.inst\n      _closedlid.new_class!(\"closedlid\")\n      _closedlid.add_child(\u003c\u003cEOF\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M55.854,80.713c22.801,0,22.801,18.312,0,18.312c0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173\n          C55.854,83.092,55.854,81.902,55.854,80.713z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M55.854,80.713c22.801,0,22.801,18.312,0,18.312\n          c0-1.189,0-2.38,0-3.57c13.912,0,13.912-11.173,0-11.173C55.854,83.092,55.854,81.902,55.854,80.713z\"/\u003e\n      \u003c/g\u003e\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M10.375,101.744c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688c0-1.1-0.535-2-1.188-2\n          c-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2s-1.188,0.9-1.188,2\n          V101.744z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M10.375,101.744c0,1.1,0.9,2,2,2h37.25c1.1,0,2-0.9,2-2v-0.688\n          c0-1.1-0.535-2-1.188-2c-0.654,0-1.188-0.9-1.188-2v-8.938c0-1.1-0.9-2-2-2h-32.5c-1.1,0-2,0.9-2,2v8.938c0,1.1-0.534,2-1.188,2\n          s-1.188,0.9-1.188,2V101.744z\"/\u003e\n      \u003c/g\u003e\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M1,81.851c-0.55-0.952-0.101-1.731,1-1.731h55.473c1.1,0,2.311,0.845,2.689,1.877l1.146,3.121\n          c0.381,1.032-0.209,1.877-1.309,1.877H5.972c-1.1,0-2.45-0.779-3-1.731L1,81.851z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M1,81.851c-0.55-0.952-0.101-1.731,1-1.731h55.473\n          c1.1,0,2.311,0.845,2.689,1.877l1.146,3.121c0.381,1.032-0.209,1.877-1.309,1.877H5.972c-1.1,0-2.45-0.779-3-1.731L1,81.851z\"/\u003e\n      \u003c/g\u003e\n      \u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"72.809\" y1=\"92.338\" x2=\"73.953\" y2=\"92.338\"/\u003e\nEOF\n      )\n      _closedlid.inst\n    end\n\n    def openlid\n      _openlid = @@tubebb.inst\n      _openlid.new_class!(\"openlid\")\n      _openlid.add_child(\u003c\u003cEOF\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M72.42,77.695c-3.271,7.512-10.102,12.477-16.996,13.795c0.375,1.254,0.75,2.506,1.125,3.76\n          c17.402-5.207,26.029-24.734,18.164-41.105c-1.178,0.566-2.357,1.133-3.537,1.699C74.844,61.828,75.77,70.221,72.42,77.695z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M72.42,77.695c-3.271,7.512-10.102,12.477-16.996,13.795\n          c0.375,1.254,0.75,2.506,1.125,3.76c17.402-5.207,26.029-24.734,18.164-41.105c-1.178,0.566-2.357,1.133-3.537,1.699\n          C74.844,61.828,75.77,70.221,72.42,77.695z\"/\u003e\n      \u003c/g\u003e\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M56.721,10.375c-1.1,0-2,0.9-2,2v37.25c0,1.1,0.9,2,2,2h0.688c1.1,0,2-0.534,2-1.188s0.9-1.188,2-1.188\n          h8.938c1.1,0,2-0.9,2-2v-32.5c0-1.1-0.9-2-2-2h-8.938c-1.1,0-2-0.534-2-1.188s-0.9-1.188-2-1.188H56.721z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M56.721,10.375c-1.1,0-2,0.9-2,2v37.25c0,1.1,0.9,2,2,2h0.688\n          c1.1,0,2-0.534,2-1.188s0.9-1.188,2-1.188h8.938c1.1,0,2-0.9,2-2v-32.5c0-1.1-0.9-2-2-2h-8.938c-1.1,0-2-0.534-2-1.188\n          s-0.9-1.188-2-1.188H56.721z\"/\u003e\n      \u003c/g\u003e\n      \u003cg\u003e\n        \u003cpath fill=\"#F7FCFE\" d=\"M76.613,1c0.953-0.55,1.732-0.1,1.732,1v55.471c0,1.1-0.846,2.311-1.877,2.69l-3.121,1.148\n          c-1.033,0.38-1.877-0.21-1.877-1.31V5.971c0-1.1,0.779-2.45,1.73-3L76.613,1z\"/\u003e\n        \u003cpath fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M76.613,1c0.953-0.55,1.732-0.1,1.732,1v55.471\n          c0,1.1-0.846,2.311-1.877,2.69l-3.121,1.148c-1.033,0.38-1.877-0.21-1.877-1.31V5.971c0-1.1,0.779-2.45,1.73-3L76.613,1z\"/\u003e\n      \u003c/g\u003e\n      \u003cline fill=\"#F7FCFE\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"60.408\" y1=\"47.721\" x2=\"60.408\" y2=\"14.471\"/\u003e\nEOF\n      )\n      _openlid.inst\n    end\n\n    def opentube\n      _opentube = @@tubebb.inst\n      _opentube.new_name!(\"opentube\")\n      _opentube.add_child(self.openlid)\n      _opentube.add_child(self.tube).inst\n    end\n\n    def closedtube\n      _closedtube = @@tubebb.inst\n      _closedtube.new_name!(\"closedtube\")\n      _closedtube.add_child(self.closedlid)\n      _closedtube.add_child(self.tube).inst\n    end\n\n    def strip\n      mystrip = SVGElement.new(boundx: 83.1, boundy: 247.45)\n      mystrip.add_child(\u003c\u003cEOF\n\u003cg id=\"Strip\"\u003e\n\t\u003cg\u003e\n\t\t\u003crect x=\"4.75\" fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"78.346\" height=\"242.948\"/\u003e\n\t\t\u003cline fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"0\" y1=\"247.448\" x2=\"4.75\" y2=\"242.948\"/\u003e\n\t\t\u003cpolygon fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"-0.067,4.777 4.75,0.001 4.75,242.948 0,247.448 \t\t\"/\u003e\n\t\t\u003cpolygon fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" points=\"74.917,247.448 0,247.448 4.75,242.948 83.096,242.948 \n\t\t\t\t\t\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003crect x=\"19.583\" y=\"49.433\" fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"46.667\" height=\"80\"/\u003e\n\t\t\u003crect x=\"27.083\" y=\"57.433\" fill=\"#FFFFFF\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"31.667\" height=\"64\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"27.083\" y1=\"121.433\" x2=\"19.583\" y2=\"129.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"58.75\" y1=\"121.433\" x2=\"66.25\" y2=\"129.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"58.75\" y1=\"57.433\" x2=\"66.25\" y2=\"49.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"27.083\" y1=\"57.433\" x2=\"19.583\" y2=\"49.433\"/\u003e\n\t\u003c/g\u003e\n\t\u003cg\u003e\n\t\t\u003cpath fill=\"#E6E7E8\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M57.524,216.515c0,4.385-3.693,7.938-8.249,7.938H36.557\n\t\t\tc-4.556,0-8.249-3.554-8.249-7.938v-22.164c0-4.385,3.693-7.939,8.249-7.939h12.718c4.556,0,8.249,3.554,8.249,7.939V216.515z\"/\u003e\n\t\t\u003cpath fill=\"#FFFFFF\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M52.917,213.019c0,3.002-2.528,5.435-5.647,5.435h-8.706\n\t\t\tc-3.119,0-5.647-2.433-5.647-5.435v-15.172c0-3.001,2.528-5.435,5.647-5.435h8.706c3.119,0,5.647,2.433,5.647,5.435V213.019z\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"34.01\" y1=\"216.224\" x2=\"30.27\" y2=\"221.647\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"51.823\" y1=\"216.224\" x2=\"55.562\" y2=\"221.647\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"51.823\" y1=\"194.642\" x2=\"55.023\" y2=\"188.663\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"34.01\" y1=\"194.195\" x2=\"30.27\" y2=\"189.666\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"32.917\" y1=\"205.433\" x2=\"28.308\" y2=\"205.433\"/\u003e\n\t\t\u003cline fill=\"none\" stroke=\"#000000\" stroke-miterlimit=\"10\" x1=\"52.917\" y1=\"205.433\" x2=\"57.524\" y2=\"205.433\"/\u003e\n\t\u003c/g\u003e\n\n\u003c/g\u003e\nEOF\n      )\n    end\n\n    def fluid_small\n      fluid = @@tubebb.inst\n      fluid.new_class!(\"fluid\")\n      fluid.new_name!(\"small_fluid\")\n      fluid.add_child(\u003c\u003cEOF\n      \u003cpath id=\"FluidSmall\" fill=\"#00AEEF\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M44.565,216.853\n\tc-12.031,0-12.031,8.833-24.062,8.833c-0.825,0-1.589-0.045-2.309-0.122l1.584,9.509c0,4.35,5.036,7.875,11.249,7.875\n\tc6.215,0,11.25-3.525,11.25-7.875l3.031-18.202C45.063,216.862,44.821,216.853,44.565,216.853z\"/\u003e\nEOF\n      )\n    end\n\n    def fluid_medium\n      fluid = @@tubebb.inst\n      fluid.new_class!(\"fluid\")\n      fluid.new_name!(\"med_fluid\")\n      fluid.add_child(\u003c\u003cEOF\n\u003cpath id=\"FluidMedium\" fill=\"#00AEEF\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M44.315,166.187\n\tc-12.031,0-12.031,8.833-24.062,8.833c-5.585,0-8.576-1.904-11.383-3.944l10.657,63.997c0,4.35,5.036,7.875,11.249,7.875\n\tc6.215,0,11.25-3.525,11.25-7.875l11.101-66.649C50.918,167.142,48.268,166.187,44.315,166.187z\"/\u003e\nEOF\n      )\n    end\n\n    def fluid_large\n      fluid = @@tubebb.inst\n      fluid.new_class!(\"fluid\")\n      fluid.new_name!(\"small_fluid\")\n      fluid.add_child(\u003c\u003cEOF\n\u003cpath id=\"FluidLarge\" fill=\"#BCE6FB\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M43.202,110.52\n\tc-12.031,0-12.031,8.833-24.062,8.833c-7.554,0-10.365-3.483-14.39-6.075v31.729l14.998,90.066c0,4.35,5.036,7.875,11.249,7.875\n\tc6.215,0,11.25-3.525,11.25-7.875l15-90.066v-28.64C53.402,113.803,50.538,110.52,43.202,110.52z\"/\u003e\nEOF\n      )\n    end\n\n    def powder\n      powder = @@tubebb.inst\n      powder.new_class!(\"powder\")\n      powder.new_name!(\"powder\")\n      powder.add_child(\u003c\u003cEOF\n         \u003cpath id=\"Powder\" fill=\"#FFFFFF\" stroke=\"#000000\" stroke-miterlimit=\"10\" d=\"M27.784,234.289c-0.647-2.643,1.036-2.308,2.842-2.495\n\tc1.183-0.124,3.538-0.179,4.792,0.55c0.33,0.957,1.645,1.147,1.775,1.945c0.106,0.649-1.18,1.446-1.407,1.983\n\tc-0.399,0.946,0.521,1.041-0.603,2.289c-0.534,0.593-2.338,1.107-3.088,1.463c-0.073,0.265-0.021,0.495-0.09,0.763\n\tc-1.498,0.401-7.79-0.416-4.875-2.518c-1.888-1.042-0.182-4.734,1.506-4.551\"/\u003e\nEOF\n      )\n    end\n\n    def striplabel\n      mylabel = SVGElement.new(boundx: 83.1, boundy: 247.45)\n      mylabel.add_child(\u003c\u003cEOF\n\u003cg id=\"StripLabel\" class=\"fluid\"\u003e\n\t\u003crect x=\"4.75\" stroke=\"#000000\" stroke-miterlimit=\"10\" width=\"78.346\" height=\"46.433\"/\u003e\n\u003c/g\u003e\nEOF\n      )\n    end\n\n    def detection_strip\n      mystrip = SVGElement.new(boundx: 83.1, boundy: 247.45)\n      mystrip.add_child(self.strip)\n      mystrip.add_child(self.striplabel)\n    end\n\n    def control_band\n      band = SVGElement.new(boundx: 83.1, boundy: 247.45)\n      band.add_child(\u003c\u003cEOF\n\u003cline id=\"ControlBand\" fill=\"none\" stroke=\"#F7A7AB\" stroke-width=\"6\" stroke-miterlimit=\"10\" x1=\"27.083\" y1=\"68.432\" x2=\"58.75\" y2=\"68.432\"/\u003e\nEOF\n      )\n    end\n\n    def wt_band\n      band = SVGElement.new(boundx: 83.1, boundy: 247.45)\n      band.add_child(\u003c\u003cEOF\n\u003cline id=\"WTBand\" fill=\"none\" stroke=\"#F7A7AB\" stroke-width=\"6\" stroke-miterlimit=\"10\" x1=\"27.089\" y1=\"89.433\" x2=\"58.756\" y2=\"89.433\"/\u003e\nEOF\n      )\n    end\n\n    def mut_band\n      band = SVGElement.new(boundx: 83.1, boundy: 247.45)\n      band.add_child(\u003c\u003cEOF\n\u003cline id=\"MutantBand\" fill=\"none\" stroke=\"#F7A7AB\" stroke-width=\"6\" stroke-miterlimit=\"10\" x1=\"27.089\" y1=\"111.099\" x2=\"58.756\" y2=\"111.099\"/\u003e\nEOF\n      )\n    end\n  end\n\n  ########################################################################\n  # ####\n  # ####\n  # #### GRAPHICS TESTING\n  # ####\n  # ####\n  ########################################################################\n\n\n  def save_svg(filename, svg)\n    File.write(filename, svg.to_str)\n  end\nend\n\n\n"}}]}